
IGNITIONV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007200  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007310  08007310  00017310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007380  08007380  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08007380  08007380  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007380  08007380  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007380  08007380  00017380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007384  08007384  00017384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000090  08007414  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08007414  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc7b  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dee  00000000  00000000  0002dd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  0002fb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  000308f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000127b8  00000000  00000000  000315f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3bd  00000000  00000000  00043da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072067  00000000  00000000  0004f165  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c11cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004000  00000000  00000000  000c1248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	080072f8 	.word	0x080072f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	080072f8 	.word	0x080072f8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2lz>:
 80010c0:	b510      	push	{r4, lr}
 80010c2:	2100      	movs	r1, #0
 80010c4:	4604      	mov	r4, r0
 80010c6:	f7ff ffd3 	bl	8001070 <__aeabi_fcmplt>
 80010ca:	b920      	cbnz	r0, 80010d6 <__aeabi_f2lz+0x16>
 80010cc:	4620      	mov	r0, r4
 80010ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010d2:	f000 b809 	b.w	80010e8 <__aeabi_f2ulz>
 80010d6:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80010da:	f000 f805 	bl	80010e8 <__aeabi_f2ulz>
 80010de:	4240      	negs	r0, r0
 80010e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop

080010e8 <__aeabi_f2ulz>:
 80010e8:	b5d0      	push	{r4, r6, r7, lr}
 80010ea:	f7ff f995 	bl	8000418 <__aeabi_f2d>
 80010ee:	2200      	movs	r2, #0
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <__aeabi_f2ulz+0x40>)
 80010f2:	4606      	mov	r6, r0
 80010f4:	460f      	mov	r7, r1
 80010f6:	f7ff f9e7 	bl	80004c8 <__aeabi_dmul>
 80010fa:	f000 f819 	bl	8001130 <__aeabi_d2uiz>
 80010fe:	4604      	mov	r4, r0
 8001100:	f7ff f968 	bl	80003d4 <__aeabi_ui2d>
 8001104:	2200      	movs	r2, #0
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <__aeabi_f2ulz+0x44>)
 8001108:	f7ff f9de 	bl	80004c8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4630      	mov	r0, r6
 8001112:	4639      	mov	r1, r7
 8001114:	f7ff f820 	bl	8000158 <__aeabi_dsub>
 8001118:	f000 f80a 	bl	8001130 <__aeabi_d2uiz>
 800111c:	2200      	movs	r2, #0
 800111e:	4623      	mov	r3, r4
 8001120:	4310      	orrs	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	bdd0      	pop	{r4, r6, r7, pc}
 8001126:	bf00      	nop
 8001128:	3df00000 	.word	0x3df00000
 800112c:	41f00000 	.word	0x41f00000

08001130 <__aeabi_d2uiz>:
 8001130:	004a      	lsls	r2, r1, #1
 8001132:	d211      	bcs.n	8001158 <__aeabi_d2uiz+0x28>
 8001134:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001138:	d211      	bcs.n	800115e <__aeabi_d2uiz+0x2e>
 800113a:	d50d      	bpl.n	8001158 <__aeabi_d2uiz+0x28>
 800113c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001140:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001144:	d40e      	bmi.n	8001164 <__aeabi_d2uiz+0x34>
 8001146:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800114a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001152:	fa23 f002 	lsr.w	r0, r3, r2
 8001156:	4770      	bx	lr
 8001158:	f04f 0000 	mov.w	r0, #0
 800115c:	4770      	bx	lr
 800115e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001162:	d102      	bne.n	800116a <__aeabi_d2uiz+0x3a>
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <ADXL345_Init>:
int16_t Ax, Ay, Az;

extern uint8_t ACC_FAIL;

void ADXL345_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, ADXL345_READ_ADRESS, ADXL345_ID, 1, &ID_RESPONS, 1, ADXL345_TIMEOUT);
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <ADXL345_Init+0x7c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b29a      	uxth	r2, r3
 800117c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <ADXL345_Init+0x80>)
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	21a7      	movs	r1, #167	; 0xa7
 800118e:	4819      	ldr	r0, [pc, #100]	; (80011f4 <ADXL345_Init+0x84>)
 8001190:	f002 ff16 	bl	8003fc0 <HAL_I2C_Mem_Read>
	ACC_FAIL = 0;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <ADXL345_Init+0x88>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_IsDeviceReady(&hi2c1, ADXL345_WRITE_ADRESS, 1, ADXL345_TIMEOUT) != HAL_OK  && ID_RESPONS != 0xE5)
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	2201      	movs	r2, #1
 80011a0:	21a6      	movs	r1, #166	; 0xa6
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <ADXL345_Init+0x84>)
 80011a4:	f003 f96e 	bl	8004484 <HAL_I2C_IsDeviceReady>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d017      	beq.n	80011de <ADXL345_Init+0x6e>
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <ADXL345_Init+0x80>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2be5      	cmp	r3, #229	; 0xe5
 80011b4:	d013      	beq.n	80011de <ADXL345_Init+0x6e>
	{
		for (uint8_t i = 0 ; i < 4 ; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e00a      	b.n	80011d2 <ADXL345_Init+0x62>
		    {
		  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80011bc:	2108      	movs	r1, #8
 80011be:	480f      	ldr	r0, [pc, #60]	; (80011fc <ADXL345_Init+0x8c>)
 80011c0:	f002 f95a 	bl	8003478 <HAL_GPIO_TogglePin>
		  	  HAL_Delay(500);
 80011c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c8:	f001 fcaa 	bl	8002b20 <HAL_Delay>
		for (uint8_t i = 0 ; i < 4 ; i++)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	3301      	adds	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d9f1      	bls.n	80011bc <ADXL345_Init+0x4c>
		    }
		ACC_FAIL = 1;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <ADXL345_Init+0x88>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
	}
	ADXL345_SetCalibration();
 80011de:	f000 f80f 	bl	8001200 <ADXL345_SetCalibration>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000ac 	.word	0x200000ac
 80011f0:	200000ad 	.word	0x200000ad
 80011f4:	200001e0 	.word	0x200001e0
 80011f8:	2000017c 	.word	0x2000017c
 80011fc:	40010800 	.word	0x40010800

08001200 <ADXL345_SetCalibration>:

void ADXL345_SetCalibration(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af04      	add	r7, sp, #16
	// RESET POWER CONTROL REGISTER
	HAL_I2C_Mem_Write(&hi2c1, ADXL345_WRITE_ADRESS, POWER_CTL, 1, &POWER_RESET, 1, ADXL345_TIMEOUT);
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <ADXL345_SetCalibration+0xc0>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b29a      	uxth	r2, r3
 800120c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <ADXL345_SetCalibration+0xc4>)
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	21a6      	movs	r1, #166	; 0xa6
 800121e:	482a      	ldr	r0, [pc, #168]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 8001220:	f002 fdd4 	bl	8003dcc <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(&hi2c1, ADXL345_WRITE_ADRESS, POWER_CTL, 1, &control, 1, ADXL345_TIMEOUT);
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <ADXL345_SetCalibration+0xc0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b29a      	uxth	r2, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <ADXL345_SetCalibration+0xcc>)
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	21a6      	movs	r1, #166	; 0xa6
 800123c:	4822      	ldr	r0, [pc, #136]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 800123e:	f002 febf 	bl	8003fc0 <HAL_I2C_Mem_Read>

	// MEASUREMENT MODE
	HAL_I2C_Mem_Write(&hi2c1, ADXL345_WRITE_ADRESS, POWER_CTL, 1, &POWER_SET, 1, ADXL345_TIMEOUT);
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <ADXL345_SetCalibration+0xc0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2301      	movs	r3, #1
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <ADXL345_SetCalibration+0xd0>)
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	21a6      	movs	r1, #166	; 0xa6
 800125a:	481b      	ldr	r0, [pc, #108]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 800125c:	f002 fdb6 	bl	8003dcc <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(&hi2c1, ADXL345_WRITE_ADRESS, POWER_CTL, 1, &control, 1, ADXL345_TIMEOUT);
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <ADXL345_SetCalibration+0xc0>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b29a      	uxth	r2, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2301      	movs	r3, #1
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <ADXL345_SetCalibration+0xcc>)
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	21a6      	movs	r1, #166	; 0xa6
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 800127a:	f002 fea1 	bl	8003fc0 <HAL_I2C_Mem_Read>

	// G RANGE SELECTION
	HAL_I2C_Mem_Write(&hi2c1, ADXL345_WRITE_ADRESS, DATA_FORMAT, 1, &DATA_FORMAT_RATE, 1, ADXL345_TIMEOUT);
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <ADXL345_SetCalibration+0xd4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b29a      	uxth	r2, r3
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2301      	movs	r3, #1
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <ADXL345_SetCalibration+0xd8>)
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	21a6      	movs	r1, #166	; 0xa6
 8001296:	480c      	ldr	r0, [pc, #48]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 8001298:	f002 fd98 	bl	8003dcc <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(&hi2c1, ADXL345_WRITE_ADRESS, DATA_FORMAT, 1, &control, 1, ADXL345_TIMEOUT);
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <ADXL345_SetCalibration+0xd4>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <ADXL345_SetCalibration+0xcc>)
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	21a6      	movs	r1, #166	; 0xa6
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 80012b6:	f002 fe83 	bl	8003fc0 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Write(&hi2c1, ADXL345_WRITE_ADRESS, ADXL_OFFSET_ADD, 1, &ADXL_OFFSET, 1, ADXL345_TIMEOUT);
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	200000ae 	.word	0x200000ae
 80012c8:	200001e0 	.word	0x200001e0
 80012cc:	200000b6 	.word	0x200000b6
 80012d0:	20000001 	.word	0x20000001
 80012d4:	20000002 	.word	0x20000002
 80012d8:	20000003 	.word	0x20000003

080012dc <ADXL345_GetUnCompanseted_Accelerations>:

void ADXL345_GetUnCompanseted_Accelerations(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, ADXL345_READ_ADRESS, ADXL_DATA_ADRESS, 1, ADXL_DATA, ADXL_DATA_ADRESS_LENGTH, ADXL345_TIMEOUT);
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <ADXL345_GetUnCompanseted_Accelerations+0x74>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b299      	uxth	r1, r3
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <ADXL345_GetUnCompanseted_Accelerations+0x78>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f2:	9202      	str	r2, [sp, #8]
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	460a      	mov	r2, r1
 80012fe:	21a7      	movs	r1, #167	; 0xa7
 8001300:	4816      	ldr	r0, [pc, #88]	; (800135c <ADXL345_GetUnCompanseted_Accelerations+0x80>)
 8001302:	f002 fe5d 	bl	8003fc0 <HAL_I2C_Mem_Read>

	Ax = /*(int16_t)*/(ADXL_DATA[1] << 8) | ADXL_DATA[0];//  x values in Data[1] and Data[0]
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <ADXL345_GetUnCompanseted_Accelerations+0x84>)
 800131a:	801a      	strh	r2, [r3, #0]
	Ay = /*(int16_t)*/(ADXL_DATA[3] << 8) | ADXL_DATA[2];//  y values in Data[3] and Data[2]
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 8001326:	789b      	ldrb	r3, [r3, #2]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <ADXL345_GetUnCompanseted_Accelerations+0x88>)
 8001330:	801a      	strh	r2, [r3, #0]
	Az = /*(int16_t)*/(ADXL_DATA[5] << 8) | ADXL_DATA[4];//  z values in Data[5] and Data[4]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 8001334:	795b      	ldrb	r3, [r3, #5]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <ADXL345_GetUnCompanseted_Accelerations+0x8c>)
 8001346:	801a      	strh	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000004 	.word	0x20000004
 8001354:	20000005 	.word	0x20000005
 8001358:	200000b0 	.word	0x200000b0
 800135c:	200001e0 	.word	0x200001e0
 8001360:	20000192 	.word	0x20000192
 8001364:	20000190 	.word	0x20000190
 8001368:	20000194 	.word	0x20000194
 800136c:	00000000 	.word	0x00000000

08001370 <ADXL345_GetZaxis>:
{
	ADXL345_GetUnCompanseted_Accelerations();
	return Ay * .0312;
}
float ADXL345_GetZaxis(void)
{
 8001370:	b598      	push	{r3, r4, r7, lr}
 8001372:	af00      	add	r7, sp, #0
	ADXL345_GetUnCompanseted_Accelerations();
 8001374:	f7ff ffb2 	bl	80012dc <ADXL345_GetUnCompanseted_Accelerations>
	return Az * .0312;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <ADXL345_GetZaxis+0x38>)
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f838 	bl	80003f4 <__aeabi_i2d>
 8001384:	a306      	add	r3, pc, #24	; (adr r3, 80013a0 <ADXL345_GetZaxis+0x30>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff f89d 	bl	80004c8 <__aeabi_dmul>
 800138e:	4603      	mov	r3, r0
 8001390:	460c      	mov	r4, r1
 8001392:	4618      	mov	r0, r3
 8001394:	4621      	mov	r1, r4
 8001396:	f7ff fb6f 	bl	8000a78 <__aeabi_d2f>
 800139a:	4603      	mov	r3, r0
}
 800139c:	4618      	mov	r0, r3
 800139e:	bd98      	pop	{r3, r4, r7, pc}
 80013a0:	8e8a71de 	.word	0x8e8a71de
 80013a4:	3f9ff2e4 	.word	0x3f9ff2e4
 80013a8:	20000194 	.word	0x20000194

080013ac <ADXL345_Zaxiss_filter>:
float ADXL345_Zaxiss_filter(void)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
	float Zf[5] = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
		for (uint8_t i = 0 ; i < 5 ; i++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]
 80013c4:	e00c      	b.n	80013e0 <ADXL345_Zaxiss_filter+0x34>
			Zf[i] = ADXL345_GetZaxis();
 80013c6:	7dfc      	ldrb	r4, [r7, #23]
 80013c8:	f7ff ffd2 	bl	8001370 <ADXL345_GetZaxis>
 80013cc:	4602      	mov	r2, r0
 80013ce:	00a3      	lsls	r3, r4, #2
 80013d0:	f107 0118 	add.w	r1, r7, #24
 80013d4:	440b      	add	r3, r1
 80013d6:	f843 2c18 	str.w	r2, [r3, #-24]
		for (uint8_t i = 0 ; i < 5 ; i++)
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	3301      	adds	r3, #1
 80013de:	75fb      	strb	r3, [r7, #23]
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d9ef      	bls.n	80013c6 <ADXL345_Zaxiss_filter+0x1a>
		return Array_sort_ADXL(Zf,5);
 80013e6:	463b      	mov	r3, r7
 80013e8:	2105      	movs	r1, #5
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f805 	bl	80013fa <Array_sort_ADXL>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}

080013fa <Array_sort_ADXL>:
float Array_sort_ADXL(float *array, int n) {
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	int i = 0, j = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
	float temp = 0.0;
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < n; i++) {
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e036      	b.n	8001486 <Array_sort_ADXL+0x8c>
		for (j = 0; j < n - 1; j++) {
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	e02b      	b.n	8001476 <Array_sort_ADXL+0x7c>
			if (array[j] > array[j + 1]) {
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	3301      	adds	r3, #1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fe39 	bl	80010ac <__aeabi_fcmpgt>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d017      	beq.n	8001470 <Array_sort_ADXL+0x76>
				temp = array[j];
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]
				array[j] = array[j + 1];
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	3301      	adds	r3, #1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	441a      	add	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	440b      	add	r3, r1
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	601a      	str	r2, [r3, #0]
				array[j + 1] = temp;
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	3301      	adds	r3, #1
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	601a      	str	r2, [r3, #0]
		for (j = 0; j < n - 1; j++) {
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	3301      	adds	r3, #1
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbce      	blt.n	800141e <Array_sort_ADXL+0x24>
	for (i = 0; i < n; i++) {
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	dbc4      	blt.n	8001418 <Array_sort_ADXL+0x1e>
			}
		}
	}
	//return array[2];
	return array[n / 2];
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	0fda      	lsrs	r2, r3, #31
 8001492:	4413      	add	r3, r2
 8001494:	105b      	asrs	r3, r3, #1
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	681b      	ldr	r3, [r3, #0]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <MS5611_Init>:
float P0 = 1013.25;		// sea level air pressure
//float P0 = 1012.0;	// ADANA air pressure
float T = 0;
float* pte = &T;

void MS5611_Init(void) {
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af02      	add	r7, sp, #8

	if (HAL_I2C_IsDeviceReady(&hi2c1, MS5611_WRITE_ADRESS, 1, 100) != HAL_OK) {
 80014ae:	2364      	movs	r3, #100	; 0x64
 80014b0:	2201      	movs	r2, #1
 80014b2:	21ee      	movs	r1, #238	; 0xee
 80014b4:	4871      	ldr	r0, [pc, #452]	; (800167c <MS5611_Init+0x1d4>)
 80014b6:	f002 ffe5 	bl	8004484 <HAL_I2C_IsDeviceReady>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d010      	beq.n	80014e2 <MS5611_Init+0x3a>
		for (uint8_t i = 0; i < 6; i++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	e00a      	b.n	80014dc <MS5611_Init+0x34>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80014c6:	2108      	movs	r1, #8
 80014c8:	486d      	ldr	r0, [pc, #436]	; (8001680 <MS5611_Init+0x1d8>)
 80014ca:	f001 ffd5 	bl	8003478 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 80014ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d2:	f001 fb25 	bl	8002b20 <HAL_Delay>
		for (uint8_t i = 0; i < 6; i++) {
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	3301      	adds	r3, #1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d9f1      	bls.n	80014c6 <MS5611_Init+0x1e>
		}
	}

	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMFAB, 1,
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	4a66      	ldr	r2, [pc, #408]	; (8001684 <MS5611_Init+0x1dc>)
 80014ec:	21ee      	movs	r1, #238	; 0xee
 80014ee:	4863      	ldr	r0, [pc, #396]	; (800167c <MS5611_Init+0x1d4>)
 80014f0:	f002 f914 	bl	800371c <HAL_I2C_Master_Transmit>
			1000);
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[0], 2, 1000);
 80014f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2302      	movs	r3, #2
 80014fc:	4a62      	ldr	r2, [pc, #392]	; (8001688 <MS5611_Init+0x1e0>)
 80014fe:	21ef      	movs	r1, #239	; 0xef
 8001500:	485e      	ldr	r0, [pc, #376]	; (800167c <MS5611_Init+0x1d4>)
 8001502:	f002 fa09 	bl	8003918 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC1, 1, 1000);
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2301      	movs	r3, #1
 800150e:	4a5f      	ldr	r2, [pc, #380]	; (800168c <MS5611_Init+0x1e4>)
 8001510:	21ee      	movs	r1, #238	; 0xee
 8001512:	485a      	ldr	r0, [pc, #360]	; (800167c <MS5611_Init+0x1d4>)
 8001514:	f002 f902 	bl	800371c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[2], 2, 1000);
 8001518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2302      	movs	r3, #2
 8001520:	4a5b      	ldr	r2, [pc, #364]	; (8001690 <MS5611_Init+0x1e8>)
 8001522:	21ef      	movs	r1, #239	; 0xef
 8001524:	4855      	ldr	r0, [pc, #340]	; (800167c <MS5611_Init+0x1d4>)
 8001526:	f002 f9f7 	bl	8003918 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC2, 1, 1000);
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	4a58      	ldr	r2, [pc, #352]	; (8001694 <MS5611_Init+0x1ec>)
 8001534:	21ee      	movs	r1, #238	; 0xee
 8001536:	4851      	ldr	r0, [pc, #324]	; (800167c <MS5611_Init+0x1d4>)
 8001538:	f002 f8f0 	bl	800371c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[4], 2, 1000);
 800153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2302      	movs	r3, #2
 8001544:	4a54      	ldr	r2, [pc, #336]	; (8001698 <MS5611_Init+0x1f0>)
 8001546:	21ef      	movs	r1, #239	; 0xef
 8001548:	484c      	ldr	r0, [pc, #304]	; (800167c <MS5611_Init+0x1d4>)
 800154a:	f002 f9e5 	bl	8003918 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC3, 1, 1000);
 800154e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2301      	movs	r3, #1
 8001556:	4a51      	ldr	r2, [pc, #324]	; (800169c <MS5611_Init+0x1f4>)
 8001558:	21ee      	movs	r1, #238	; 0xee
 800155a:	4848      	ldr	r0, [pc, #288]	; (800167c <MS5611_Init+0x1d4>)
 800155c:	f002 f8de 	bl	800371c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[6], 2, 1000);
 8001560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2302      	movs	r3, #2
 8001568:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <MS5611_Init+0x1f8>)
 800156a:	21ef      	movs	r1, #239	; 0xef
 800156c:	4843      	ldr	r0, [pc, #268]	; (800167c <MS5611_Init+0x1d4>)
 800156e:	f002 f9d3 	bl	8003918 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC4, 1, 1000);
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <MS5611_Init+0x1fc>)
 800157c:	21ee      	movs	r1, #238	; 0xee
 800157e:	483f      	ldr	r0, [pc, #252]	; (800167c <MS5611_Init+0x1d4>)
 8001580:	f002 f8cc 	bl	800371c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[8], 2, 1000);
 8001584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2302      	movs	r3, #2
 800158c:	4a46      	ldr	r2, [pc, #280]	; (80016a8 <MS5611_Init+0x200>)
 800158e:	21ef      	movs	r1, #239	; 0xef
 8001590:	483a      	ldr	r0, [pc, #232]	; (800167c <MS5611_Init+0x1d4>)
 8001592:	f002 f9c1 	bl	8003918 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC5, 1, 1000);
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2301      	movs	r3, #1
 800159e:	4a43      	ldr	r2, [pc, #268]	; (80016ac <MS5611_Init+0x204>)
 80015a0:	21ee      	movs	r1, #238	; 0xee
 80015a2:	4836      	ldr	r0, [pc, #216]	; (800167c <MS5611_Init+0x1d4>)
 80015a4:	f002 f8ba 	bl	800371c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[10], 2, 1000);
 80015a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2302      	movs	r3, #2
 80015b0:	4a3f      	ldr	r2, [pc, #252]	; (80016b0 <MS5611_Init+0x208>)
 80015b2:	21ef      	movs	r1, #239	; 0xef
 80015b4:	4831      	ldr	r0, [pc, #196]	; (800167c <MS5611_Init+0x1d4>)
 80015b6:	f002 f9af 	bl	8003918 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC6, 1, 1000);
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	4a3c      	ldr	r2, [pc, #240]	; (80016b4 <MS5611_Init+0x20c>)
 80015c4:	21ee      	movs	r1, #238	; 0xee
 80015c6:	482d      	ldr	r0, [pc, #180]	; (800167c <MS5611_Init+0x1d4>)
 80015c8:	f002 f8a8 	bl	800371c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[12], 2, 1000);
 80015cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2302      	movs	r3, #2
 80015d4:	4a38      	ldr	r2, [pc, #224]	; (80016b8 <MS5611_Init+0x210>)
 80015d6:	21ef      	movs	r1, #239	; 0xef
 80015d8:	4828      	ldr	r0, [pc, #160]	; (800167c <MS5611_Init+0x1d4>)
 80015da:	f002 f99d 	bl	8003918 <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMCRC, 1,
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2301      	movs	r3, #1
 80015e6:	4a35      	ldr	r2, [pc, #212]	; (80016bc <MS5611_Init+0x214>)
 80015e8:	21ee      	movs	r1, #238	; 0xee
 80015ea:	4824      	ldr	r0, [pc, #144]	; (800167c <MS5611_Init+0x1d4>)
 80015ec:	f002 f896 	bl	800371c <HAL_I2C_Master_Transmit>
			1000);
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[14], 2, 1000);
 80015f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2302      	movs	r3, #2
 80015f8:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <MS5611_Init+0x218>)
 80015fa:	21ef      	movs	r1, #239	; 0xef
 80015fc:	481f      	ldr	r0, [pc, #124]	; (800167c <MS5611_Init+0x1d4>)
 80015fe:	f002 f98b 	bl	8003918 <HAL_I2C_Master_Receive>

	for (uint8_t x = 2; x < 14; x += 2) {
 8001602:	2302      	movs	r3, #2
 8001604:	71bb      	strb	r3, [r7, #6]
 8001606:	e016      	b.n	8001636 <MS5611_Init+0x18e>
		C[(x / 2) - 1] = fab_data[x] << 8 | fab_data[x + 1];
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <MS5611_Init+0x1e0>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	3301      	adds	r3, #1
 8001616:	491c      	ldr	r1, [pc, #112]	; (8001688 <MS5611_Init+0x1e0>)
 8001618:	5ccb      	ldrb	r3, [r1, r3]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21a      	sxth	r2, r3
 8001620:	79bb      	ldrb	r3, [r7, #6]
 8001622:	085b      	lsrs	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	b291      	uxth	r1, r2
 800162a:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <MS5611_Init+0x21c>)
 800162c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t x = 2; x < 14; x += 2) {
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	3302      	adds	r3, #2
 8001634:	71bb      	strb	r3, [r7, #6]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	2b0d      	cmp	r3, #13
 800163a:	d9e5      	bls.n	8001608 <MS5611_Init+0x160>
	}

	BASE = 0;
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <MS5611_Init+0x220>)
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0 ; i < sizeof(BASE_P) / sizeof(BASE_P[0]) ; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	717b      	strb	r3, [r7, #5]
 8001648:	e009      	b.n	800165e <MS5611_Init+0x1b6>
	{
		BASE_P[i] = MS5611_ReadMedian_Altitude();
 800164a:	797c      	ldrb	r4, [r7, #5]
 800164c:	f000 fa7a 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 8001650:	4602      	mov	r2, r0
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <MS5611_Init+0x224>)
 8001654:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(uint8_t i = 0 ; i < sizeof(BASE_P) / sizeof(BASE_P[0]) ; i++)
 8001658:	797b      	ldrb	r3, [r7, #5]
 800165a:	3301      	adds	r3, #1
 800165c:	717b      	strb	r3, [r7, #5]
 800165e:	797b      	ldrb	r3, [r7, #5]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d9f2      	bls.n	800164a <MS5611_Init+0x1a2>
	}
	BASE = Array_sort_MS(BASE_P, sizeof(BASE_P) / sizeof(BASE_P[0]));
 8001664:	2103      	movs	r1, #3
 8001666:	4819      	ldr	r0, [pc, #100]	; (80016cc <MS5611_Init+0x224>)
 8001668:	f000 fa93 	bl	8001b92 <Array_sort_MS>
 800166c:	4602      	mov	r2, r0
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MS5611_Init+0x220>)
 8001670:	601a      	str	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}
 800167a:	bf00      	nop
 800167c:	200001e0 	.word	0x200001e0
 8001680:	40010800 	.word	0x40010800
 8001684:	20000008 	.word	0x20000008
 8001688:	200000c8 	.word	0x200000c8
 800168c:	20000009 	.word	0x20000009
 8001690:	200000ca 	.word	0x200000ca
 8001694:	2000000a 	.word	0x2000000a
 8001698:	200000cc 	.word	0x200000cc
 800169c:	2000000b 	.word	0x2000000b
 80016a0:	200000ce 	.word	0x200000ce
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	200000d0 	.word	0x200000d0
 80016ac:	2000000d 	.word	0x2000000d
 80016b0:	200000d2 	.word	0x200000d2
 80016b4:	2000000e 	.word	0x2000000e
 80016b8:	200000d4 	.word	0x200000d4
 80016bc:	2000000f 	.word	0x2000000f
 80016c0:	200000d6 	.word	0x200000d6
 80016c4:	200000e0 	.word	0x200000e0
 80016c8:	200000c4 	.word	0x200000c4
 80016cc:	200000b8 	.word	0x200000b8

080016d0 <MS5611_ReadTemperature>:

float MS5611_ReadTemperature(void)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &D2_4096, 1, 1000);
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2301      	movs	r3, #1
 80016de:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <MS5611_ReadTemperature+0xfc>)
 80016e0:	21ee      	movs	r1, #238	; 0xee
 80016e2:	483b      	ldr	r0, [pc, #236]	; (80017d0 <MS5611_ReadTemperature+0x100>)
 80016e4:	f002 f81a 	bl	800371c <HAL_I2C_Master_Transmit>
	HAL_Delay(9);
 80016e8:	2009      	movs	r0, #9
 80016ea:	f001 fa19 	bl	8002b20 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_ADC, 1, 1000);
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	4a37      	ldr	r2, [pc, #220]	; (80017d4 <MS5611_ReadTemperature+0x104>)
 80016f8:	21ee      	movs	r1, #238	; 0xee
 80016fa:	4835      	ldr	r0, [pc, #212]	; (80017d0 <MS5611_ReadTemperature+0x100>)
 80016fc:	f002 f80e 	bl	800371c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, ADC, 3, 1000);
 8001700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2303      	movs	r3, #3
 8001708:	4a33      	ldr	r2, [pc, #204]	; (80017d8 <MS5611_ReadTemperature+0x108>)
 800170a:	21ef      	movs	r1, #239	; 0xef
 800170c:	4830      	ldr	r0, [pc, #192]	; (80017d0 <MS5611_ReadTemperature+0x100>)
 800170e:	f002 f903 	bl	8003918 <HAL_I2C_Master_Receive>
	D2 = ADC[0] << 16 | ADC[1] << 8 | ADC[2];
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <MS5611_ReadTemperature+0x108>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	041a      	lsls	r2, r3, #16
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <MS5611_ReadTemperature+0x108>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	4313      	orrs	r3, r2
 8001720:	4a2d      	ldr	r2, [pc, #180]	; (80017d8 <MS5611_ReadTemperature+0x108>)
 8001722:	7892      	ldrb	r2, [r2, #2]
 8001724:	4313      	orrs	r3, r2
 8001726:	461a      	mov	r2, r3
 8001728:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <MS5611_ReadTemperature+0x10c>)
 800172a:	601a      	str	r2, [r3, #0]

	dT = D2 - C[4] * pow(2, 8);
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <MS5611_ReadTemperature+0x10c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fe4f 	bl	80003d4 <__aeabi_ui2d>
 8001736:	4604      	mov	r4, r0
 8001738:	460d      	mov	r5, r1
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MS5611_ReadTemperature+0x110>)
 800173c:	891b      	ldrh	r3, [r3, #8]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fe58 	bl	80003f4 <__aeabi_i2d>
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <MS5611_ReadTemperature+0x114>)
 800174a:	f7fe febd 	bl	80004c8 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe fcff 	bl	8000158 <__aeabi_dsub>
 800175a:	4603      	mov	r3, r0
 800175c:	460c      	mov	r4, r1
 800175e:	4618      	mov	r0, r3
 8001760:	4621      	mov	r1, r4
 8001762:	f7ff f961 	bl	8000a28 <__aeabi_d2iz>
 8001766:	4602      	mov	r2, r0
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MS5611_ReadTemperature+0x118>)
 800176a:	601a      	str	r2, [r3, #0]
	TEMP = (2000 + dT * C[5] / pow(2, 23)) / 100.0;
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MS5611_ReadTemperature+0x110>)
 800176e:	895b      	ldrh	r3, [r3, #10]
 8001770:	461a      	mov	r2, r3
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MS5611_ReadTemperature+0x118>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fb03 f302 	mul.w	r3, r3, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fe3a 	bl	80003f4 <__aeabi_i2d>
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <MS5611_ReadTemperature+0x11c>)
 8001786:	f7fe ffc9 	bl	800071c <__aeabi_ddiv>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MS5611_ReadTemperature+0x120>)
 8001798:	f7fe fce0 	bl	800015c <__adddf3>
 800179c:	4603      	mov	r3, r0
 800179e:	460c      	mov	r4, r1
 80017a0:	4618      	mov	r0, r3
 80017a2:	4621      	mov	r1, r4
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MS5611_ReadTemperature+0x124>)
 80017aa:	f7fe ffb7 	bl	800071c <__aeabi_ddiv>
 80017ae:	4603      	mov	r3, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	4618      	mov	r0, r3
 80017b4:	4621      	mov	r1, r4
 80017b6:	f7ff f95f 	bl	8000a78 <__aeabi_d2f>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MS5611_ReadTemperature+0x128>)
 80017be:	601a      	str	r2, [r3, #0]
	return TEMP;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <MS5611_ReadTemperature+0x128>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000007 	.word	0x20000007
 80017d0:	200001e0 	.word	0x200001e0
 80017d4:	200000f4 	.word	0x200000f4
 80017d8:	200000d8 	.word	0x200000d8
 80017dc:	200000f0 	.word	0x200000f0
 80017e0:	200000e0 	.word	0x200000e0
 80017e4:	40700000 	.word	0x40700000
 80017e8:	200000f8 	.word	0x200000f8
 80017ec:	41600000 	.word	0x41600000
 80017f0:	409f4000 	.word	0x409f4000
 80017f4:	40590000 	.word	0x40590000
 80017f8:	20000120 	.word	0x20000120

080017fc <MS5611_ReadPressure>:

float MS5611_ReadPressure(void) {
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	b083      	sub	sp, #12
 8001800:	af02      	add	r7, sp, #8

	 dT = D2 - ((int32_t) C[4] << 8);
	 float T = (2000 + ((int32_t) (dT * C[5]) >> 23)) / 100.0;
	 */

	T = MS5611_ReadTemperature();
 8001802:	f7ff ff65 	bl	80016d0 <MS5611_ReadTemperature>
 8001806:	4602      	mov	r2, r0
 8001808:	4b86      	ldr	r3, [pc, #536]	; (8001a24 <MS5611_ReadPressure+0x228>)
 800180a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &D1_4096, 1, 1000);
 800180c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	4a84      	ldr	r2, [pc, #528]	; (8001a28 <MS5611_ReadPressure+0x22c>)
 8001816:	21ee      	movs	r1, #238	; 0xee
 8001818:	4884      	ldr	r0, [pc, #528]	; (8001a2c <MS5611_ReadPressure+0x230>)
 800181a:	f001 ff7f 	bl	800371c <HAL_I2C_Master_Transmit>
	HAL_Delay(9);
 800181e:	2009      	movs	r0, #9
 8001820:	f001 f97e 	bl	8002b20 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_ADC, 1, 1000);
 8001824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2301      	movs	r3, #1
 800182c:	4a80      	ldr	r2, [pc, #512]	; (8001a30 <MS5611_ReadPressure+0x234>)
 800182e:	21ee      	movs	r1, #238	; 0xee
 8001830:	487e      	ldr	r0, [pc, #504]	; (8001a2c <MS5611_ReadPressure+0x230>)
 8001832:	f001 ff73 	bl	800371c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &ADC[3], 3, 1000);
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2303      	movs	r3, #3
 800183e:	4a7d      	ldr	r2, [pc, #500]	; (8001a34 <MS5611_ReadPressure+0x238>)
 8001840:	21ef      	movs	r1, #239	; 0xef
 8001842:	487a      	ldr	r0, [pc, #488]	; (8001a2c <MS5611_ReadPressure+0x230>)
 8001844:	f002 f868 	bl	8003918 <HAL_I2C_Master_Receive>
	D1 = ADC[3] << 16 | ADC[4] << 8 | ADC[5];
 8001848:	4b7b      	ldr	r3, [pc, #492]	; (8001a38 <MS5611_ReadPressure+0x23c>)
 800184a:	78db      	ldrb	r3, [r3, #3]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	4b7a      	ldr	r3, [pc, #488]	; (8001a38 <MS5611_ReadPressure+0x23c>)
 8001850:	791b      	ldrb	r3, [r3, #4]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	4313      	orrs	r3, r2
 8001856:	4a78      	ldr	r2, [pc, #480]	; (8001a38 <MS5611_ReadPressure+0x23c>)
 8001858:	7952      	ldrb	r2, [r2, #5]
 800185a:	4313      	orrs	r3, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4b77      	ldr	r3, [pc, #476]	; (8001a3c <MS5611_ReadPressure+0x240>)
 8001860:	601a      	str	r2, [r3, #0]

	if (T < 20 && T > -15) {
 8001862:	4b70      	ldr	r3, [pc, #448]	; (8001a24 <MS5611_ReadPressure+0x228>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4976      	ldr	r1, [pc, #472]	; (8001a40 <MS5611_ReadPressure+0x244>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc01 	bl	8001070 <__aeabi_fcmplt>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d05f      	beq.n	8001934 <MS5611_ReadPressure+0x138>
 8001874:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <MS5611_ReadPressure+0x228>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4972      	ldr	r1, [pc, #456]	; (8001a44 <MS5611_ReadPressure+0x248>)
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fc16 	bl	80010ac <__aeabi_fcmpgt>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d056      	beq.n	8001934 <MS5611_ReadPressure+0x138>
		dT2 = (dT * dT) >> 31;
 8001886:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <MS5611_ReadPressure+0x24c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a6f      	ldr	r2, [pc, #444]	; (8001a48 <MS5611_ReadPressure+0x24c>)
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	17db      	asrs	r3, r3, #31
 8001894:	4a6d      	ldr	r2, [pc, #436]	; (8001a4c <MS5611_ReadPressure+0x250>)
 8001896:	6013      	str	r3, [r2, #0]
		OFF2 = 5 * (T - 2000) * (T - 2000) / 2;
 8001898:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <MS5611_ReadPressure+0x228>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	496c      	ldr	r1, [pc, #432]	; (8001a50 <MS5611_ReadPressure+0x254>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f93e 	bl	8000b20 <__aeabi_fsub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	496b      	ldr	r1, [pc, #428]	; (8001a54 <MS5611_ReadPressure+0x258>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fa43 	bl	8000d34 <__aeabi_fmul>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461e      	mov	r6, r3
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <MS5611_ReadPressure+0x228>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4966      	ldr	r1, [pc, #408]	; (8001a50 <MS5611_ReadPressure+0x254>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f931 	bl	8000b20 <__aeabi_fsub>
 80018be:	4603      	mov	r3, r0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4630      	mov	r0, r6
 80018c4:	f7ff fa36 	bl	8000d34 <__aeabi_fmul>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fae4 	bl	8000e9c <__aeabi_fdiv>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fbf2 	bl	80010c0 <__aeabi_f2lz>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	495d      	ldr	r1, [pc, #372]	; (8001a58 <MS5611_ReadPressure+0x25c>)
 80018e2:	e9c1 2300 	strd	r2, r3, [r1]
		SENS2 = 5 * (T - 2000) * (T - 2000) / 4;
 80018e6:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <MS5611_ReadPressure+0x228>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4959      	ldr	r1, [pc, #356]	; (8001a50 <MS5611_ReadPressure+0x254>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f917 	bl	8000b20 <__aeabi_fsub>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4957      	ldr	r1, [pc, #348]	; (8001a54 <MS5611_ReadPressure+0x258>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa1c 	bl	8000d34 <__aeabi_fmul>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461e      	mov	r6, r3
 8001900:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <MS5611_ReadPressure+0x228>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4952      	ldr	r1, [pc, #328]	; (8001a50 <MS5611_ReadPressure+0x254>)
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f90a 	bl	8000b20 <__aeabi_fsub>
 800190c:	4603      	mov	r3, r0
 800190e:	4619      	mov	r1, r3
 8001910:	4630      	mov	r0, r6
 8001912:	f7ff fa0f 	bl	8000d34 <__aeabi_fmul>
 8001916:	4603      	mov	r3, r0
 8001918:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fabd 	bl	8000e9c <__aeabi_fdiv>
 8001922:	4603      	mov	r3, r0
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fbcb 	bl	80010c0 <__aeabi_f2lz>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	494b      	ldr	r1, [pc, #300]	; (8001a5c <MS5611_ReadPressure+0x260>)
 8001930:	e9c1 2300 	strd	r2, r3, [r1]
	}
	OFF = (((int64_t) (C[1])) << 16) + ((C[3] * dT) >> 7);
 8001934:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <MS5611_ReadPressure+0x264>)
 8001936:	885b      	ldrh	r3, [r3, #2]
 8001938:	b29a      	uxth	r2, r3
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	0c15      	lsrs	r5, r2, #16
 8001940:	0414      	lsls	r4, r2, #16
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <MS5611_ReadPressure+0x264>)
 8001944:	88db      	ldrh	r3, [r3, #6]
 8001946:	461a      	mov	r2, r3
 8001948:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <MS5611_ReadPressure+0x24c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fb03 f302 	mul.w	r3, r3, r2
 8001950:	11db      	asrs	r3, r3, #7
 8001952:	461a      	mov	r2, r3
 8001954:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001958:	18a0      	adds	r0, r4, r2
 800195a:	eb45 0103 	adc.w	r1, r5, r3
 800195e:	4603      	mov	r3, r0
 8001960:	460c      	mov	r4, r1
 8001962:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <MS5611_ReadPressure+0x268>)
 8001964:	e9c2 3400 	strd	r3, r4, [r2]
	SENS = (((int64_t) (C[0])) << 15) + ((C[2] * dT) >> 8);
 8001968:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <MS5611_ReadPressure+0x264>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b299      	uxth	r1, r3
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0500 	mov.w	r5, #0
 8001976:	f04f 0600 	mov.w	r6, #0
 800197a:	03d6      	lsls	r6, r2, #15
 800197c:	ea46 4651 	orr.w	r6, r6, r1, lsr #17
 8001980:	03cd      	lsls	r5, r1, #15
 8001982:	4a37      	ldr	r2, [pc, #220]	; (8001a60 <MS5611_ReadPressure+0x264>)
 8001984:	8892      	ldrh	r2, [r2, #4]
 8001986:	4611      	mov	r1, r2
 8001988:	4a2f      	ldr	r2, [pc, #188]	; (8001a48 <MS5611_ReadPressure+0x24c>)
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	fb02 f201 	mul.w	r2, r2, r1
 8001990:	1212      	asrs	r2, r2, #8
 8001992:	4611      	mov	r1, r2
 8001994:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001998:	186b      	adds	r3, r5, r1
 800199a:	eb46 0402 	adc.w	r4, r6, r2
 800199e:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <MS5611_ReadPressure+0x26c>)
 80019a0:	e9c2 3400 	strd	r3, r4, [r2]
	PRESS = ((((D1 * SENS) >> 21) - OFF) >> 15) / 100.0;
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <MS5611_ReadPressure+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <MS5611_ReadPressure+0x26c>)
 80019b0:	cb18      	ldmia	r3, {r3, r4}
 80019b2:	fb03 f502 	mul.w	r5, r3, r2
 80019b6:	fb01 f004 	mul.w	r0, r1, r4
 80019ba:	4428      	add	r0, r5
 80019bc:	fba1 1203 	umull	r1, r2, r1, r3
 80019c0:	1883      	adds	r3, r0, r2
 80019c2:	461a      	mov	r2, r3
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	f04f 0400 	mov.w	r4, #0
 80019cc:	0d4b      	lsrs	r3, r1, #21
 80019ce:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80019d2:	1554      	asrs	r4, r2, #21
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <MS5611_ReadPressure+0x268>)
 80019d6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	eb64 0402 	sbc.w	r4, r4, r2
 80019e0:	461d      	mov	r5, r3
 80019e2:	4626      	mov	r6, r4
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	f04f 0400 	mov.w	r4, #0
 80019ec:	0beb      	lsrs	r3, r5, #15
 80019ee:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80019f2:	13f4      	asrs	r4, r6, #15
 80019f4:	4618      	mov	r0, r3
 80019f6:	4621      	mov	r1, r4
 80019f8:	f7fe fd38 	bl	800046c <__aeabi_l2d>
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MS5611_ReadPressure+0x270>)
 8001a02:	f7fe fe8b 	bl	800071c <__aeabi_ddiv>
 8001a06:	4603      	mov	r3, r0
 8001a08:	460c      	mov	r4, r1
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	f7ff f833 	bl	8000a78 <__aeabi_d2f>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MS5611_ReadPressure+0x274>)
 8001a16:	601a      	str	r2, [r3, #0]
	 SENS = SENS - SENS2;


	 PRESS = ((D1 * SENS / pow(2, 21) - OFF) / pow(2, 15)) / 100.0;
	 */
	return PRESS;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <MS5611_ReadPressure+0x274>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3704      	adds	r7, #4
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a24:	2000012c 	.word	0x2000012c
 8001a28:	20000006 	.word	0x20000006
 8001a2c:	200001e0 	.word	0x200001e0
 8001a30:	200000f4 	.word	0x200000f4
 8001a34:	200000db 	.word	0x200000db
 8001a38:	200000d8 	.word	0x200000d8
 8001a3c:	200000ec 	.word	0x200000ec
 8001a40:	41a00000 	.word	0x41a00000
 8001a44:	c1700000 	.word	0xc1700000
 8001a48:	200000f8 	.word	0x200000f8
 8001a4c:	200000fc 	.word	0x200000fc
 8001a50:	44fa0000 	.word	0x44fa0000
 8001a54:	40a00000 	.word	0x40a00000
 8001a58:	20000110 	.word	0x20000110
 8001a5c:	20000118 	.word	0x20000118
 8001a60:	200000e0 	.word	0x200000e0
 8001a64:	20000100 	.word	0x20000100
 8001a68:	20000108 	.word	0x20000108
 8001a6c:	40590000 	.word	0x40590000
 8001a70:	20000124 	.word	0x20000124
 8001a74:	00000000 	.word	0x00000000

08001a78 <MS5611_ReadAltitude>:

float MS5611_ReadAltitude(void)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
	float P = MS5611_ReadPressure();
 8001a7e:	f7ff febd 	bl	80017fc <MS5611_ReadPressure>
 8001a82:	6078      	str	r0, [r7, #4]
	//float T0 = MS5611_ReadTemperature();
	//ALT = (float) (44330.0 * (1 - pow((PRESS / P0), (1 / 5.255))));
	ALT = ((pow((P0/P), (1/5.257))-1) * (*pte + 273.15)) / 0.0065;  // Altitude with temperature and pressure
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <MS5611_ReadAltitude+0xb8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fa06 	bl	8000e9c <__aeabi_fdiv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fcc0 	bl	8000418 <__aeabi_f2d>
 8001a98:	a31f      	add	r3, pc, #124	; (adr r3, 8001b18 <MS5611_ReadAltitude+0xa0>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f004 fc03 	bl	80062a8 <pow>
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <MS5611_ReadAltitude+0xbc>)
 8001aa8:	f7fe fb56 	bl	8000158 <__aeabi_dsub>
 8001aac:	4603      	mov	r3, r0
 8001aae:	460c      	mov	r4, r1
 8001ab0:	4625      	mov	r5, r4
 8001ab2:	461c      	mov	r4, r3
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MS5611_ReadAltitude+0xc0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fcac 	bl	8000418 <__aeabi_f2d>
 8001ac0:	a317      	add	r3, pc, #92	; (adr r3, 8001b20 <MS5611_ReadAltitude+0xa8>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fb49 	bl	800015c <__adddf3>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fcf9 	bl	80004c8 <__aeabi_dmul>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460c      	mov	r4, r1
 8001ada:	4618      	mov	r0, r3
 8001adc:	4621      	mov	r1, r4
 8001ade:	a312      	add	r3, pc, #72	; (adr r3, 8001b28 <MS5611_ReadAltitude+0xb0>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fe1a 	bl	800071c <__aeabi_ddiv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	4618      	mov	r0, r3
 8001aee:	4621      	mov	r1, r4
 8001af0:	f7fe ffc2 	bl	8000a78 <__aeabi_d2f>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MS5611_ReadAltitude+0xc4>)
 8001af8:	601a      	str	r2, [r3, #0]
	//ALT = (pow(10,log(PRESS/P0)/5.2558797)-1) / (-6.8755856 * pow(10,-6));
	return (ALT - BASE);
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MS5611_ReadAltitude+0xc4>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MS5611_ReadAltitude+0xc8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f7ff f80b 	bl	8000b20 <__aeabi_fsub>
 8001b0a:	4603      	mov	r3, r0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bdb0      	pop	{r4, r5, r7, pc}
 8001b14:	f3af 8000 	nop.w
 8001b18:	7dee2d4a 	.word	0x7dee2d4a
 8001b1c:	3fc85936 	.word	0x3fc85936
 8001b20:	66666666 	.word	0x66666666
 8001b24:	40711266 	.word	0x40711266
 8001b28:	76c8b439 	.word	0x76c8b439
 8001b2c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001b30:	20000010 	.word	0x20000010
 8001b34:	3ff00000 	.word	0x3ff00000
 8001b38:	20000014 	.word	0x20000014
 8001b3c:	20000128 	.word	0x20000128
 8001b40:	200000c4 	.word	0x200000c4

08001b44 <MS5611_ReadMedian_Altitude>:

float MS5611_ReadMedian_Altitude(void)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
	float H[5] = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
	for (uint8_t i = 0 ; i < 5 ; i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	75fb      	strb	r3, [r7, #23]
 8001b5c:	e00c      	b.n	8001b78 <MS5611_ReadMedian_Altitude+0x34>
		H[i] = MS5611_ReadAltitude();
 8001b5e:	7dfc      	ldrb	r4, [r7, #23]
 8001b60:	f7ff ff8a 	bl	8001a78 <MS5611_ReadAltitude>
 8001b64:	4602      	mov	r2, r0
 8001b66:	00a3      	lsls	r3, r4, #2
 8001b68:	f107 0118 	add.w	r1, r7, #24
 8001b6c:	440b      	add	r3, r1
 8001b6e:	f843 2c18 	str.w	r2, [r3, #-24]
	for (uint8_t i = 0 ; i < 5 ; i++)
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	75fb      	strb	r3, [r7, #23]
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d9ef      	bls.n	8001b5e <MS5611_ReadMedian_Altitude+0x1a>
	return Array_sort_MS(H,5);
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2105      	movs	r1, #5
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f805 	bl	8001b92 <Array_sort_MS>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}

08001b92 <Array_sort_MS>:

float Array_sort_MS(float *array, int n) {
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
	int i = 0, j = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
	float temp = 0.0;
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < n; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e036      	b.n	8001c1e <Array_sort_MS+0x8c>
		for (j = 0; j < n - 1; j++) {
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	e02b      	b.n	8001c0e <Array_sort_MS+0x7c>
			if (array[j] > array[j + 1]) {
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7ff fa6d 	bl	80010ac <__aeabi_fcmpgt>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d017      	beq.n	8001c08 <Array_sort_MS+0x76>
				temp = array[j];
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]
				array[j] = array[j + 1];
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	3301      	adds	r3, #1
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	441a      	add	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	601a      	str	r2, [r3, #0]
				array[j + 1] = temp;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	601a      	str	r2, [r3, #0]
		for (j = 0; j < n - 1; j++) {
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbce      	blt.n	8001bb6 <Array_sort_MS+0x24>
	for (i = 0; i < n; i++) {
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbc4      	blt.n	8001bb0 <Array_sort_MS+0x1e>
			}
		}
	}
	//return array[2];
	return array[n / 2];
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	0fda      	lsrs	r2, r3, #31
 8001c2a:	4413      	add	r3, r2
 8001c2c:	105b      	asrs	r3, r3, #1
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	681b      	ldr	r3, [r3, #0]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c46:	f000 ff09 	bl	8002a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c4a:	f000 fb83 	bl	8002354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c4e:	f000 fd2d 	bl	80026ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c52:	f000 fc15 	bl	8002480 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001c56:	f000 fc41 	bl	80024dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c5a:	f000 fc8b 	bl	8002574 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c5e:	f000 fcd7 	bl	8002610 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001c62:	f000 fbcf 	bl	8002404 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ADXL345_Init();
 8001c66:	f7ff fa83 	bl	8001170 <ADXL345_Init>
  MS5611_Init();
 8001c6a:	f7ff fc1d 	bl	80014a8 <MS5611_Init>
  //HAL_TIM_Base_Start(&htim3);
  enum rocket {Rail, Launch, Burnout, Apogee, Descent, Main, Recovery};
  enum rocket EPHEMERISH;


  for (uint8_t i = 0 ; i < 12 ; i++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75bb      	strb	r3, [r7, #22]
 8001c72:	e011      	b.n	8001c98 <main+0x58>
    {
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001c74:	2140      	movs	r1, #64	; 0x40
 8001c76:	48aa      	ldr	r0, [pc, #680]	; (8001f20 <main+0x2e0>)
 8001c78:	f001 fbfe 	bl	8003478 <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001c7c:	2108      	movs	r1, #8
 8001c7e:	48a8      	ldr	r0, [pc, #672]	; (8001f20 <main+0x2e0>)
 8001c80:	f001 fbfa 	bl	8003478 <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001c84:	2110      	movs	r1, #16
 8001c86:	48a7      	ldr	r0, [pc, #668]	; (8001f24 <main+0x2e4>)
 8001c88:	f001 fbf6 	bl	8003478 <HAL_GPIO_TogglePin>
  	  HAL_Delay(50);
 8001c8c:	2032      	movs	r0, #50	; 0x32
 8001c8e:	f000 ff47 	bl	8002b20 <HAL_Delay>
  for (uint8_t i = 0 ; i < 12 ; i++)
 8001c92:	7dbb      	ldrb	r3, [r7, #22]
 8001c94:	3301      	adds	r3, #1
 8001c96:	75bb      	strb	r3, [r7, #22]
 8001c98:	7dbb      	ldrb	r3, [r7, #22]
 8001c9a:	2b0b      	cmp	r3, #11
 8001c9c:	d9ea      	bls.n	8001c74 <main+0x34>
    }

	if (ACC_FAIL == 0) {
 8001c9e:	4ba2      	ldr	r3, [pc, #648]	; (8001f28 <main+0x2e8>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <main+0x72>
		EPHEMERISH = Rail;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	75fb      	strb	r3, [r7, #23]
		HAL_TIM_Base_Start_IT(&htim2);
 8001caa:	48a0      	ldr	r0, [pc, #640]	; (8001f2c <main+0x2ec>)
 8001cac:	f003 ff14 	bl	8005ad8 <HAL_TIM_Base_Start_IT>
 8001cb0:	e00e      	b.n	8001cd0 <main+0x90>
		//EPHEMERISH = Burnout;
	} else if (ACC_FAIL == 1) {
 8001cb2:	4b9d      	ldr	r3, [pc, #628]	; (8001f28 <main+0x2e8>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10a      	bne.n	8001cd0 <main+0x90>
		EPHEMERISH = Launch;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001cbe:	489b      	ldr	r0, [pc, #620]	; (8001f2c <main+0x2ec>)
 8001cc0:	f003 ff56 	bl	8005b70 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001cc4:	489a      	ldr	r0, [pc, #616]	; (8001f30 <main+0x2f0>)
 8001cc6:	f003 ff07 	bl	8005ad8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start(&htim4);
 8001cca:	489a      	ldr	r0, [pc, #616]	; (8001f34 <main+0x2f4>)
 8001ccc:	f003 fec0 	bl	8005a50 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (EPHEMERISH) {
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d8fc      	bhi.n	8001cd0 <main+0x90>
 8001cd6:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <main+0x9c>)
 8001cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cdc:	08001cf9 	.word	0x08001cf9
 8001ce0:	08001dc5 	.word	0x08001dc5
 8001ce4:	08001fa5 	.word	0x08001fa5
 8001ce8:	08002133 	.word	0x08002133
 8001cec:	08002193 	.word	0x08002193
 8001cf0:	0800229f 	.word	0x0800229f
 8001cf4:	080022f9 	.word	0x080022f9
		case Rail:
			if (ADXL == 1) {
 8001cf8:	4b8f      	ldr	r3, [pc, #572]	; (8001f38 <main+0x2f8>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	f040 8315 	bne.w	800232c <main+0x6ec>
				ADXL_Z[ADXL_S] = ADXL345_Zaxiss_filter();
 8001d02:	4b8e      	ldr	r3, [pc, #568]	; (8001f3c <main+0x2fc>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461c      	mov	r4, r3
 8001d08:	f7ff fb50 	bl	80013ac <ADXL345_Zaxiss_filter>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b8c      	ldr	r3, [pc, #560]	; (8001f40 <main+0x300>)
 8001d10:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				if (ADXL_S == 5) {
 8001d14:	4b89      	ldr	r3, [pc, #548]	; (8001f3c <main+0x2fc>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d149      	bne.n	8001db0 <main+0x170>
					uint8_t C2 = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	757b      	strb	r3, [r7, #21]
					for (uint8_t i = 0; i <= ADXL_S; i++) {
 8001d20:	2300      	movs	r3, #0
 8001d22:	753b      	strb	r3, [r7, #20]
 8001d24:	e01c      	b.n	8001d60 <main+0x120>
						if (ADXL_Z[i] < (-1 * ACC_l) || ADXL_Z[i] > ACC_l)
 8001d26:	7d3b      	ldrb	r3, [r7, #20]
 8001d28:	4a85      	ldr	r2, [pc, #532]	; (8001f40 <main+0x300>)
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2e:	4985      	ldr	r1, [pc, #532]	; (8001f44 <main+0x304>)
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff f99d 	bl	8001070 <__aeabi_fcmplt>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10b      	bne.n	8001d54 <main+0x114>
 8001d3c:	7d3b      	ldrb	r3, [r7, #20]
 8001d3e:	4a80      	ldr	r2, [pc, #512]	; (8001f40 <main+0x300>)
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f9af 	bl	80010ac <__aeabi_fcmpgt>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <main+0x11a>
							C2++;
 8001d54:	7d7b      	ldrb	r3, [r7, #21]
 8001d56:	3301      	adds	r3, #1
 8001d58:	757b      	strb	r3, [r7, #21]
					for (uint8_t i = 0; i <= ADXL_S; i++) {
 8001d5a:	7d3b      	ldrb	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	753b      	strb	r3, [r7, #20]
 8001d60:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <main+0x2fc>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	7d3a      	ldrb	r2, [r7, #20]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d9dd      	bls.n	8001d26 <main+0xe6>
					}
					if (C2 >= 3) {
 8001d6a:	7d7b      	ldrb	r3, [r7, #21]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d91c      	bls.n	8001daa <main+0x16a>
						EPHEMERISH = Launch;
 8001d70:	2301      	movs	r3, #1
 8001d72:	75fb      	strb	r3, [r7, #23]
						//EPHEMERISH = Apogee;
						HAL_TIM_Base_Stop_IT(&htim2);
 8001d74:	486d      	ldr	r0, [pc, #436]	; (8001f2c <main+0x2ec>)
 8001d76:	f003 fefb 	bl	8005b70 <HAL_TIM_Base_Stop_IT>
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	74fb      	strb	r3, [r7, #19]
 8001d7e:	e009      	b.n	8001d94 <main+0x154>
							HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001d80:	2108      	movs	r1, #8
 8001d82:	4867      	ldr	r0, [pc, #412]	; (8001f20 <main+0x2e0>)
 8001d84:	f001 fb78 	bl	8003478 <HAL_GPIO_TogglePin>
							HAL_Delay(50);
 8001d88:	2032      	movs	r0, #50	; 0x32
 8001d8a:	f000 fec9 	bl	8002b20 <HAL_Delay>
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8001d8e:	7cfb      	ldrb	r3, [r7, #19]
 8001d90:	3301      	adds	r3, #1
 8001d92:	74fb      	strb	r3, [r7, #19]
 8001d94:	7cfa      	ldrb	r2, [r7, #19]
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	dbf0      	blt.n	8001d80 <main+0x140>
						}
						HAL_TIM_Base_Start_IT(&htim3);
 8001d9e:	4864      	ldr	r0, [pc, #400]	; (8001f30 <main+0x2f0>)
 8001da0:	f003 fe9a 	bl	8005ad8 <HAL_TIM_Base_Start_IT>
						HAL_TIM_Base_Start(&htim4);
 8001da4:	4863      	ldr	r0, [pc, #396]	; (8001f34 <main+0x2f4>)
 8001da6:	f003 fe53 	bl	8005a50 <HAL_TIM_Base_Start>
					}
					ADXL_S = 0;
 8001daa:	4b64      	ldr	r3, [pc, #400]	; (8001f3c <main+0x2fc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
				}
				ADXL_S++;
 8001db0:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <main+0x2fc>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <main+0x2fc>)
 8001dba:	701a      	strb	r2, [r3, #0]
				ADXL = 0;
 8001dbc:	4b5e      	ldr	r3, [pc, #376]	; (8001f38 <main+0x2f8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001dc2:	e2b3      	b.n	800232c <main+0x6ec>
		case Launch:
			if (MS5611 == 1) {
 8001dc4:	4b60      	ldr	r3, [pc, #384]	; (8001f48 <main+0x308>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	f040 82b1 	bne.w	8002330 <main+0x6f0>
				if (alt_l == 0) {
 8001dce:	4b5f      	ldr	r3, [pc, #380]	; (8001f4c <main+0x30c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <main+0x1b2>
					tim1 = __HAL_TIM_GET_COUNTER(&htim4);
 8001dd6:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <main+0x2f4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	4a5c      	ldr	r2, [pc, #368]	; (8001f50 <main+0x310>)
 8001dde:	6013      	str	r3, [r2, #0]
					MS[0] = MS5611_ReadMedian_Altitude();
 8001de0:	f7ff feb0 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b5b      	ldr	r3, [pc, #364]	; (8001f54 <main+0x314>)
 8001de8:	601a      	str	r2, [r3, #0]
					alt_l = 1;
 8001dea:	4b58      	ldr	r3, [pc, #352]	; (8001f4c <main+0x30c>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e0d4      	b.n	8001f9c <main+0x35c>
				} else if (alt_l == 1) {
 8001df2:	4b56      	ldr	r3, [pc, #344]	; (8001f4c <main+0x30c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	f040 80d0 	bne.w	8001f9c <main+0x35c>
					tim2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001dfc:	4b4d      	ldr	r3, [pc, #308]	; (8001f34 <main+0x2f4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	4a55      	ldr	r2, [pc, #340]	; (8001f58 <main+0x318>)
 8001e04:	6013      	str	r3, [r2, #0]
					MS[1] = MS5611_ReadMedian_Altitude();
 8001e06:	f7ff fe9d 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b51      	ldr	r3, [pc, #324]	; (8001f54 <main+0x314>)
 8001e0e:	605a      	str	r2, [r3, #4]
					if (tim2 < tim1) {
 8001e10:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <main+0x318>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b4e      	ldr	r3, [pc, #312]	; (8001f50 <main+0x310>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d20e      	bcs.n	8001e3a <main+0x1fa>
						tim2 = tim2 + 65535;
 8001e1c:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <main+0x318>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001e24:	33ff      	adds	r3, #255	; 0xff
 8001e26:	4a4c      	ldr	r2, [pc, #304]	; (8001f58 <main+0x318>)
 8001e28:	6013      	str	r3, [r2, #0]
						dif = tim2 - tim1;
 8001e2a:	4b4b      	ldr	r3, [pc, #300]	; (8001f58 <main+0x318>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b48      	ldr	r3, [pc, #288]	; (8001f50 <main+0x310>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a49      	ldr	r2, [pc, #292]	; (8001f5c <main+0x31c>)
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	e006      	b.n	8001e48 <main+0x208>
					} else
						dif = tim2 - tim1;
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <main+0x318>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <main+0x310>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	4a45      	ldr	r2, [pc, #276]	; (8001f5c <main+0x31c>)
 8001e46:	6013      	str	r3, [r2, #0]
					MS_V[MS_S] = (MS[1] - MS[0]) / (0.001 * dif);
 8001e48:	4b42      	ldr	r3, [pc, #264]	; (8001f54 <main+0x314>)
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <main+0x314>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f7fe fe64 	bl	8000b20 <__aeabi_fsub>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fadc 	bl	8000418 <__aeabi_f2d>
 8001e60:	4604      	mov	r4, r0
 8001e62:	460d      	mov	r5, r1
 8001e64:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <main+0x31c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fab3 	bl	80003d4 <__aeabi_ui2d>
 8001e6e:	a32a      	add	r3, pc, #168	; (adr r3, 8001f18 <main+0x2d8>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe fb28 	bl	80004c8 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fc4c 	bl	800071c <__aeabi_ddiv>
 8001e84:	4603      	mov	r3, r0
 8001e86:	460c      	mov	r4, r1
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <main+0x320>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461c      	mov	r4, r3
 8001e92:	4608      	mov	r0, r1
 8001e94:	4611      	mov	r1, r2
 8001e96:	f7fe fdef 	bl	8000a78 <__aeabi_d2f>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <main+0x324>)
 8001e9e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					if (MS_S == 5) {
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <main+0x320>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d16f      	bne.n	8001f8a <main+0x34a>
						uint8_t M = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	74bb      	strb	r3, [r7, #18]
						for (uint8_t i = 0; i <= MS_S; i++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	747b      	strb	r3, [r7, #17]
 8001eb2:	e010      	b.n	8001ed6 <main+0x296>
							if (MS_V[i] > 15)  // TEST BURNOUT VALUE = 15 READ BURNOUT VALUE = 100
 8001eb4:	7c7b      	ldrb	r3, [r7, #17]
 8001eb6:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <main+0x324>)
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	492a      	ldr	r1, [pc, #168]	; (8001f68 <main+0x328>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f8f4 	bl	80010ac <__aeabi_fcmpgt>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <main+0x290>
								M++;
 8001eca:	7cbb      	ldrb	r3, [r7, #18]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	74bb      	strb	r3, [r7, #18]
						for (uint8_t i = 0; i <= MS_S; i++) {
 8001ed0:	7c7b      	ldrb	r3, [r7, #17]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	747b      	strb	r3, [r7, #17]
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <main+0x320>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	7c7a      	ldrb	r2, [r7, #17]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d9e9      	bls.n	8001eb4 <main+0x274>
						}
						if (M >= 3) {
 8001ee0:	7cbb      	ldrb	r3, [r7, #18]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d913      	bls.n	8001f0e <main+0x2ce>
							//**********************
							EPHEMERISH = Burnout;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	75fb      	strb	r3, [r7, #23]
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8001eea:	2300      	movs	r3, #0
 8001eec:	743b      	strb	r3, [r7, #16]
 8001eee:	e009      	b.n	8001f04 <main+0x2c4>
								HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001ef0:	2108      	movs	r1, #8
 8001ef2:	480b      	ldr	r0, [pc, #44]	; (8001f20 <main+0x2e0>)
 8001ef4:	f001 fac0 	bl	8003478 <HAL_GPIO_TogglePin>
								HAL_Delay(50);
 8001ef8:	2032      	movs	r0, #50	; 0x32
 8001efa:	f000 fe11 	bl	8002b20 <HAL_Delay>
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8001efe:	7c3b      	ldrb	r3, [r7, #16]
 8001f00:	3301      	adds	r3, #1
 8001f02:	743b      	strb	r3, [r7, #16]
 8001f04:	7c3a      	ldrb	r2, [r7, #16]
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dbf0      	blt.n	8001ef0 <main+0x2b0>
							}
						}
						for (uint8_t k = 0; k <= 5; k++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e034      	b.n	8001f7e <main+0x33e>
 8001f14:	f3af 8000 	nop.w
 8001f18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f1c:	3f50624d 	.word	0x3f50624d
 8001f20:	40010800 	.word	0x40010800
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	2000017c 	.word	0x2000017c
 8001f2c:	200002bc 	.word	0x200002bc
 8001f30:	20000240 	.word	0x20000240
 8001f34:	20000198 	.word	0x20000198
 8001f38:	20000178 	.word	0x20000178
 8001f3c:	20000179 	.word	0x20000179
 8001f40:	20000130 	.word	0x20000130
 8001f44:	bfc00000 	.word	0xbfc00000
 8001f48:	2000017a 	.word	0x2000017a
 8001f4c:	2000018c 	.word	0x2000018c
 8001f50:	20000180 	.word	0x20000180
 8001f54:	20000234 	.word	0x20000234
 8001f58:	20000184 	.word	0x20000184
 8001f5c:	20000188 	.word	0x20000188
 8001f60:	2000017b 	.word	0x2000017b
 8001f64:	20000148 	.word	0x20000148
 8001f68:	41700000 	.word	0x41700000
							MS_V[k] = 0;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	4aa8      	ldr	r2, [pc, #672]	; (8002210 <main+0x5d0>)
 8001f70:	f04f 0100 	mov.w	r1, #0
 8001f74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for (uint8_t k = 0; k <= 5; k++)
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d9f3      	bls.n	8001f6c <main+0x32c>
						MS_S = 0;
 8001f84:	4ba3      	ldr	r3, [pc, #652]	; (8002214 <main+0x5d4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
					}
					MS_S++;
 8001f8a:	4ba2      	ldr	r3, [pc, #648]	; (8002214 <main+0x5d4>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4ba0      	ldr	r3, [pc, #640]	; (8002214 <main+0x5d4>)
 8001f94:	701a      	strb	r2, [r3, #0]
					alt_l = 0;
 8001f96:	4ba0      	ldr	r3, [pc, #640]	; (8002218 <main+0x5d8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
				}
				MS5611 = 0;
 8001f9c:	4b9f      	ldr	r3, [pc, #636]	; (800221c <main+0x5dc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001fa2:	e1c5      	b.n	8002330 <main+0x6f0>
		case Burnout:
			if (MS5611 == 1) {
 8001fa4:	4b9d      	ldr	r3, [pc, #628]	; (800221c <main+0x5dc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	f040 81c3 	bne.w	8002334 <main+0x6f4>
				if (alt_l == 0) {
 8001fae:	4b9a      	ldr	r3, [pc, #616]	; (8002218 <main+0x5d8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <main+0x392>
					tim1 = __HAL_TIM_GET_COUNTER(&htim4);
 8001fb6:	4b9a      	ldr	r3, [pc, #616]	; (8002220 <main+0x5e0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	4a99      	ldr	r2, [pc, #612]	; (8002224 <main+0x5e4>)
 8001fbe:	6013      	str	r3, [r2, #0]
					MS[0] = MS5611_ReadMedian_Altitude();
 8001fc0:	f7ff fdc0 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b98      	ldr	r3, [pc, #608]	; (8002228 <main+0x5e8>)
 8001fc8:	601a      	str	r2, [r3, #0]
					alt_l = 1;
 8001fca:	4b93      	ldr	r3, [pc, #588]	; (8002218 <main+0x5d8>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e0ab      	b.n	800212a <main+0x4ea>
				} else if (alt_l == 1) {
 8001fd2:	4b91      	ldr	r3, [pc, #580]	; (8002218 <main+0x5d8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 80a7 	bne.w	800212a <main+0x4ea>
					tim2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001fdc:	4b90      	ldr	r3, [pc, #576]	; (8002220 <main+0x5e0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	4a92      	ldr	r2, [pc, #584]	; (800222c <main+0x5ec>)
 8001fe4:	6013      	str	r3, [r2, #0]
					MS[1] = MS5611_ReadMedian_Altitude();
 8001fe6:	f7ff fdad 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b8e      	ldr	r3, [pc, #568]	; (8002228 <main+0x5e8>)
 8001fee:	605a      	str	r2, [r3, #4]
					if (tim2 < tim1) {
 8001ff0:	4b8e      	ldr	r3, [pc, #568]	; (800222c <main+0x5ec>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b8b      	ldr	r3, [pc, #556]	; (8002224 <main+0x5e4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d20e      	bcs.n	800201a <main+0x3da>
						tim2 = tim2 + 65535;
 8001ffc:	4b8b      	ldr	r3, [pc, #556]	; (800222c <main+0x5ec>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002004:	33ff      	adds	r3, #255	; 0xff
 8002006:	4a89      	ldr	r2, [pc, #548]	; (800222c <main+0x5ec>)
 8002008:	6013      	str	r3, [r2, #0]
						dif = tim2 - tim1;
 800200a:	4b88      	ldr	r3, [pc, #544]	; (800222c <main+0x5ec>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b85      	ldr	r3, [pc, #532]	; (8002224 <main+0x5e4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	4a86      	ldr	r2, [pc, #536]	; (8002230 <main+0x5f0>)
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e006      	b.n	8002028 <main+0x3e8>
					} else
						dif = tim2 - tim1;
 800201a:	4b84      	ldr	r3, [pc, #528]	; (800222c <main+0x5ec>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b81      	ldr	r3, [pc, #516]	; (8002224 <main+0x5e4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4a82      	ldr	r2, [pc, #520]	; (8002230 <main+0x5f0>)
 8002026:	6013      	str	r3, [r2, #0]
					MS_V[MS_S] = (MS[1] - MS[0]) / (0.001 * dif);
 8002028:	4b7f      	ldr	r3, [pc, #508]	; (8002228 <main+0x5e8>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4b7e      	ldr	r3, [pc, #504]	; (8002228 <main+0x5e8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	4610      	mov	r0, r2
 8002034:	f7fe fd74 	bl	8000b20 <__aeabi_fsub>
 8002038:	4603      	mov	r3, r0
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe f9ec 	bl	8000418 <__aeabi_f2d>
 8002040:	4604      	mov	r4, r0
 8002042:	460d      	mov	r5, r1
 8002044:	4b7a      	ldr	r3, [pc, #488]	; (8002230 <main+0x5f0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe f9c3 	bl	80003d4 <__aeabi_ui2d>
 800204e:	a36e      	add	r3, pc, #440	; (adr r3, 8002208 <main+0x5c8>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa38 	bl	80004c8 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4620      	mov	r0, r4
 800205e:	4629      	mov	r1, r5
 8002060:	f7fe fb5c 	bl	800071c <__aeabi_ddiv>
 8002064:	4603      	mov	r3, r0
 8002066:	460c      	mov	r4, r1
 8002068:	4619      	mov	r1, r3
 800206a:	4622      	mov	r2, r4
 800206c:	4b69      	ldr	r3, [pc, #420]	; (8002214 <main+0x5d4>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461c      	mov	r4, r3
 8002072:	4608      	mov	r0, r1
 8002074:	4611      	mov	r1, r2
 8002076:	f7fe fcff 	bl	8000a78 <__aeabi_d2f>
 800207a:	4602      	mov	r2, r0
 800207c:	4b64      	ldr	r3, [pc, #400]	; (8002210 <main+0x5d0>)
 800207e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					if (MS_S == 5) {
 8002082:	4b64      	ldr	r3, [pc, #400]	; (8002214 <main+0x5d4>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b05      	cmp	r3, #5
 8002088:	d146      	bne.n	8002118 <main+0x4d8>
						uint8_t M = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	73bb      	strb	r3, [r7, #14]
						for (uint8_t i = 0; i <= MS_S; i++) {
 800208e:	2300      	movs	r3, #0
 8002090:	737b      	strb	r3, [r7, #13]
 8002092:	e010      	b.n	80020b6 <main+0x476>
							if (MS_V[i] < 5)
 8002094:	7b7b      	ldrb	r3, [r7, #13]
 8002096:	4a5e      	ldr	r2, [pc, #376]	; (8002210 <main+0x5d0>)
 8002098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209c:	4965      	ldr	r1, [pc, #404]	; (8002234 <main+0x5f4>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe ffe6 	bl	8001070 <__aeabi_fcmplt>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <main+0x470>
								M++;
 80020aa:	7bbb      	ldrb	r3, [r7, #14]
 80020ac:	3301      	adds	r3, #1
 80020ae:	73bb      	strb	r3, [r7, #14]
						for (uint8_t i = 0; i <= MS_S; i++) {
 80020b0:	7b7b      	ldrb	r3, [r7, #13]
 80020b2:	3301      	adds	r3, #1
 80020b4:	737b      	strb	r3, [r7, #13]
 80020b6:	4b57      	ldr	r3, [pc, #348]	; (8002214 <main+0x5d4>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	7b7a      	ldrb	r2, [r7, #13]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d9e9      	bls.n	8002094 <main+0x454>
						}
						if (M >= 3) {
 80020c0:	7bbb      	ldrb	r3, [r7, #14]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d916      	bls.n	80020f4 <main+0x4b4>
							EPHEMERISH = Apogee;
 80020c6:	2303      	movs	r3, #3
 80020c8:	75fb      	strb	r3, [r7, #23]
							HAL_TIM_Base_Stop_IT(&htim3);
 80020ca:	485b      	ldr	r0, [pc, #364]	; (8002238 <main+0x5f8>)
 80020cc:	f003 fd50 	bl	8005b70 <HAL_TIM_Base_Stop_IT>
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 80020d0:	2300      	movs	r3, #0
 80020d2:	733b      	strb	r3, [r7, #12]
 80020d4:	e009      	b.n	80020ea <main+0x4aa>
								HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80020d6:	2108      	movs	r1, #8
 80020d8:	4858      	ldr	r0, [pc, #352]	; (800223c <main+0x5fc>)
 80020da:	f001 f9cd 	bl	8003478 <HAL_GPIO_TogglePin>
								HAL_Delay(50);
 80020de:	2032      	movs	r0, #50	; 0x32
 80020e0:	f000 fd1e 	bl	8002b20 <HAL_Delay>
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 80020e4:	7b3b      	ldrb	r3, [r7, #12]
 80020e6:	3301      	adds	r3, #1
 80020e8:	733b      	strb	r3, [r7, #12]
 80020ea:	7b3a      	ldrb	r2, [r7, #12]
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dbf0      	blt.n	80020d6 <main+0x496>
							}
						}
						for (uint8_t k = 0 ; k <= 5 ; k++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	72fb      	strb	r3, [r7, #11]
 80020f8:	e008      	b.n	800210c <main+0x4cc>
							MS_V[k] = 0;
 80020fa:	7afb      	ldrb	r3, [r7, #11]
 80020fc:	4a44      	ldr	r2, [pc, #272]	; (8002210 <main+0x5d0>)
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for (uint8_t k = 0 ; k <= 5 ; k++)
 8002106:	7afb      	ldrb	r3, [r7, #11]
 8002108:	3301      	adds	r3, #1
 800210a:	72fb      	strb	r3, [r7, #11]
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d9f3      	bls.n	80020fa <main+0x4ba>
						MS_S = 0;
 8002112:	4b40      	ldr	r3, [pc, #256]	; (8002214 <main+0x5d4>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
					}
					MS_S++;
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <main+0x5d4>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	3301      	adds	r3, #1
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b3c      	ldr	r3, [pc, #240]	; (8002214 <main+0x5d4>)
 8002122:	701a      	strb	r2, [r3, #0]
					alt_l = 0;
 8002124:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <main+0x5d8>)
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
				}
				MS5611 = 0;
 800212a:	4b3c      	ldr	r3, [pc, #240]	; (800221c <main+0x5dc>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002130:	e100      	b.n	8002334 <main+0x6f4>
		case Apogee:
			//EPHEMERISH = Recovery;
			EPHEMERISH = Descent;
 8002132:	2304      	movs	r3, #4
 8002134:	75fb      	strb	r3, [r7, #23]
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002136:	2300      	movs	r3, #0
 8002138:	72bb      	strb	r3, [r7, #10]
 800213a:	e009      	b.n	8002150 <main+0x510>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800213c:	2108      	movs	r1, #8
 800213e:	483f      	ldr	r0, [pc, #252]	; (800223c <main+0x5fc>)
 8002140:	f001 f99a 	bl	8003478 <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 8002144:	2032      	movs	r0, #50	; 0x32
 8002146:	f000 fceb 	bl	8002b20 <HAL_Delay>
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 800214a:	7abb      	ldrb	r3, [r7, #10]
 800214c:	3301      	adds	r3, #1
 800214e:	72bb      	strb	r3, [r7, #10]
 8002150:	7aba      	ldrb	r2, [r7, #10]
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	429a      	cmp	r2, r3
 8002158:	dbf0      	blt.n	800213c <main+0x4fc>
			}
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800215a:	2108      	movs	r1, #8
 800215c:	4837      	ldr	r0, [pc, #220]	; (800223c <main+0x5fc>)
 800215e:	f001 f98b 	bl	8003478 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8002162:	2201      	movs	r2, #1
 8002164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002168:	4834      	ldr	r0, [pc, #208]	; (800223c <main+0x5fc>)
 800216a:	f001 f96d 	bl	8003448 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);  // ***************
			HAL_Delay(600);
 800216e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002172:	f000 fcd5 	bl	8002b20 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800217c:	482f      	ldr	r0, [pc, #188]	; (800223c <main+0x5fc>)
 800217e:	f001 f963 	bl	8003448 <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);  // **************
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8002182:	2108      	movs	r1, #8
 8002184:	482d      	ldr	r0, [pc, #180]	; (800223c <main+0x5fc>)
 8002186:	f001 f977 	bl	8003478 <HAL_GPIO_TogglePin>
			HAL_TIM_Base_Start_IT(&htim3);
 800218a:	482b      	ldr	r0, [pc, #172]	; (8002238 <main+0x5f8>)
 800218c:	f003 fca4 	bl	8005ad8 <HAL_TIM_Base_Start_IT>
			break;
 8002190:	e0d3      	b.n	800233a <main+0x6fa>
		case Descent:
			if (MS5611 == 1) {
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <main+0x5dc>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	f040 80ce 	bne.w	8002338 <main+0x6f8>
				MS_A[MS_S] = MS5611_ReadMedian_Altitude();
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <main+0x5d4>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461c      	mov	r4, r3
 80021a2:	f7ff fccf 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <main+0x600>)
 80021aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				if (MS_S == 5) {
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <main+0x5d4>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b05      	cmp	r3, #5
 80021b4:	d169      	bne.n	800228a <main+0x64a>
					uint8_t M = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	727b      	strb	r3, [r7, #9]
					for (uint8_t i = 0; i <= MS_S; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	723b      	strb	r3, [r7, #8]
 80021be:	e010      	b.n	80021e2 <main+0x5a2>
						if (MS_A[i] < 500)
 80021c0:	7a3b      	ldrb	r3, [r7, #8]
 80021c2:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <main+0x600>)
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	491e      	ldr	r1, [pc, #120]	; (8002244 <main+0x604>)
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe ff50 	bl	8001070 <__aeabi_fcmplt>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <main+0x59c>
							M++;
 80021d6:	7a7b      	ldrb	r3, [r7, #9]
 80021d8:	3301      	adds	r3, #1
 80021da:	727b      	strb	r3, [r7, #9]
					for (uint8_t i = 0; i <= MS_S; i++) {
 80021dc:	7a3b      	ldrb	r3, [r7, #8]
 80021de:	3301      	adds	r3, #1
 80021e0:	723b      	strb	r3, [r7, #8]
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <main+0x5d4>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	7a3a      	ldrb	r2, [r7, #8]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d9e9      	bls.n	80021c0 <main+0x580>
					}
					if (M >= 3) {
 80021ec:	7a7b      	ldrb	r3, [r7, #9]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d939      	bls.n	8002266 <main+0x626>
						// MAIN FIRE
						EPHEMERISH = Main;
 80021f2:	2305      	movs	r3, #5
 80021f4:	75fb      	strb	r3, [r7, #23]
						HAL_TIM_Base_Stop_IT(&htim3);
 80021f6:	4810      	ldr	r0, [pc, #64]	; (8002238 <main+0x5f8>)
 80021f8:	f003 fcba 	bl	8005b70 <HAL_TIM_Base_Stop_IT>
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 80021fc:	2300      	movs	r3, #0
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	e02c      	b.n	800225c <main+0x61c>
 8002202:	bf00      	nop
 8002204:	f3af 8000 	nop.w
 8002208:	d2f1a9fc 	.word	0xd2f1a9fc
 800220c:	3f50624d 	.word	0x3f50624d
 8002210:	20000148 	.word	0x20000148
 8002214:	2000017b 	.word	0x2000017b
 8002218:	2000018c 	.word	0x2000018c
 800221c:	2000017a 	.word	0x2000017a
 8002220:	20000198 	.word	0x20000198
 8002224:	20000180 	.word	0x20000180
 8002228:	20000234 	.word	0x20000234
 800222c:	20000184 	.word	0x20000184
 8002230:	20000188 	.word	0x20000188
 8002234:	40a00000 	.word	0x40a00000
 8002238:	20000240 	.word	0x20000240
 800223c:	40010800 	.word	0x40010800
 8002240:	20000160 	.word	0x20000160
 8002244:	43fa0000 	.word	0x43fa0000
							HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8002248:	2108      	movs	r1, #8
 800224a:	483c      	ldr	r0, [pc, #240]	; (800233c <main+0x6fc>)
 800224c:	f001 f914 	bl	8003478 <HAL_GPIO_TogglePin>
							HAL_Delay(50);
 8002250:	2032      	movs	r0, #50	; 0x32
 8002252:	f000 fc65 	bl	8002b20 <HAL_Delay>
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	3301      	adds	r3, #1
 800225a:	71fb      	strb	r3, [r7, #7]
 800225c:	79fa      	ldrb	r2, [r7, #7]
 800225e:	7dfb      	ldrb	r3, [r7, #23]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	429a      	cmp	r2, r3
 8002264:	dbf0      	blt.n	8002248 <main+0x608>
						}
					}
					for (uint8_t k = 0 ; k <= 5 ; k++)
 8002266:	2300      	movs	r3, #0
 8002268:	71bb      	strb	r3, [r7, #6]
 800226a:	e008      	b.n	800227e <main+0x63e>
						MS_A[k] = 0;
 800226c:	79bb      	ldrb	r3, [r7, #6]
 800226e:	4a34      	ldr	r2, [pc, #208]	; (8002340 <main+0x700>)
 8002270:	f04f 0100 	mov.w	r1, #0
 8002274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for (uint8_t k = 0 ; k <= 5 ; k++)
 8002278:	79bb      	ldrb	r3, [r7, #6]
 800227a:	3301      	adds	r3, #1
 800227c:	71bb      	strb	r3, [r7, #6]
 800227e:	79bb      	ldrb	r3, [r7, #6]
 8002280:	2b05      	cmp	r3, #5
 8002282:	d9f3      	bls.n	800226c <main+0x62c>
					MS_S = 0;
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <main+0x704>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
				}
				MS_S++;
 800228a:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <main+0x704>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <main+0x704>)
 8002294:	701a      	strb	r2, [r3, #0]
				MS5611 = 0;
 8002296:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <main+0x708>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800229c:	e04c      	b.n	8002338 <main+0x6f8>
		case Main:
			EPHEMERISH = Recovery;
 800229e:	2306      	movs	r3, #6
 80022a0:	75fb      	strb	r3, [r7, #23]
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 80022a2:	2300      	movs	r3, #0
 80022a4:	717b      	strb	r3, [r7, #5]
 80022a6:	e009      	b.n	80022bc <main+0x67c>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80022a8:	2108      	movs	r1, #8
 80022aa:	4824      	ldr	r0, [pc, #144]	; (800233c <main+0x6fc>)
 80022ac:	f001 f8e4 	bl	8003478 <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 80022b0:	2032      	movs	r0, #50	; 0x32
 80022b2:	f000 fc35 	bl	8002b20 <HAL_Delay>
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 80022b6:	797b      	ldrb	r3, [r7, #5]
 80022b8:	3301      	adds	r3, #1
 80022ba:	717b      	strb	r3, [r7, #5]
 80022bc:	797a      	ldrb	r2, [r7, #5]
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	429a      	cmp	r2, r3
 80022c4:	dbf0      	blt.n	80022a8 <main+0x668>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	2108      	movs	r1, #8
 80022ca:	481c      	ldr	r0, [pc, #112]	; (800233c <main+0x6fc>)
 80022cc:	f001 f8bc 	bl	8003448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	2108      	movs	r1, #8
 80022d4:	481d      	ldr	r0, [pc, #116]	; (800234c <main+0x70c>)
 80022d6:	f001 f8b7 	bl	8003448 <HAL_GPIO_WritePin>
			HAL_Delay(600);
 80022da:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022de:	f000 fc1f 	bl	8002b20 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2108      	movs	r1, #8
 80022e6:	4819      	ldr	r0, [pc, #100]	; (800234c <main+0x70c>)
 80022e8:	f001 f8ae 	bl	8003448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2108      	movs	r1, #8
 80022f0:	4812      	ldr	r0, [pc, #72]	; (800233c <main+0x6fc>)
 80022f2:	f001 f8a9 	bl	8003448 <HAL_GPIO_WritePin>
			break;
 80022f6:	e020      	b.n	800233a <main+0x6fa>
		case Recovery:
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	713b      	strb	r3, [r7, #4]
 80022fc:	e010      	b.n	8002320 <main+0x6e0>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80022fe:	2110      	movs	r1, #16
 8002300:	4812      	ldr	r0, [pc, #72]	; (800234c <main+0x70c>)
 8002302:	f001 f8b9 	bl	8003478 <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 8002306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800230a:	f000 fc09 	bl	8002b20 <HAL_Delay>
				final++;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <main+0x710>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <main+0x710>)
 8002318:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 800231a:	793b      	ldrb	r3, [r7, #4]
 800231c:	3301      	adds	r3, #1
 800231e:	713b      	strb	r3, [r7, #4]
 8002320:	793a      	ldrb	r2, [r7, #4]
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	429a      	cmp	r2, r3
 8002328:	dbe9      	blt.n	80022fe <main+0x6be>
			}
			break;
 800232a:	e006      	b.n	800233a <main+0x6fa>
			break;
 800232c:	bf00      	nop
 800232e:	e4cf      	b.n	8001cd0 <main+0x90>
			break;
 8002330:	bf00      	nop
 8002332:	e4cd      	b.n	8001cd0 <main+0x90>
			break;
 8002334:	bf00      	nop
 8002336:	e4cb      	b.n	8001cd0 <main+0x90>
			break;
 8002338:	bf00      	nop
		switch (EPHEMERISH) {
 800233a:	e4c9      	b.n	8001cd0 <main+0x90>
 800233c:	40010800 	.word	0x40010800
 8002340:	20000160 	.word	0x20000160
 8002344:	2000017b 	.word	0x2000017b
 8002348:	2000017a 	.word	0x2000017a
 800234c:	40010c00 	.word	0x40010c00
 8002350:	2000017d 	.word	0x2000017d

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b094      	sub	sp, #80	; 0x50
 8002358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800235e:	2228      	movs	r2, #40	; 0x28
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f003 ff98 	bl	8006298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002384:	2302      	movs	r3, #2
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002388:	2301      	movs	r3, #1
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800238c:	2310      	movs	r3, #16
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002390:	2302      	movs	r3, #2
 8002392:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002394:	2300      	movs	r3, #0
 8002396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002398:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 800239c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fe46 	bl	8005034 <HAL_RCC_OscConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80023ae:	f000 f9dd 	bl	800276c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b2:	230f      	movs	r3, #15
 80023b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b6:	2302      	movs	r3, #2
 80023b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	2101      	movs	r1, #1
 80023ce:	4618      	mov	r0, r3
 80023d0:	f003 f8b0 	bl	8005534 <HAL_RCC_ClockConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80023da:	f000 f9c7 	bl	800276c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023de:	2302      	movs	r3, #2
 80023e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80023e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 fa2a 	bl	8005844 <HAL_RCCEx_PeriphCLKConfig>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80023f6:	f000 f9b9 	bl	800276c <Error_Handler>
  }
}
 80023fa:	bf00      	nop
 80023fc:	3750      	adds	r7, #80	; 0x50
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <MX_ADC1_Init+0x74>)
 8002416:	4a19      	ldr	r2, [pc, #100]	; (800247c <MX_ADC1_Init+0x78>)
 8002418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <MX_ADC1_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <MX_ADC1_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <MX_ADC1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <MX_ADC1_Init+0x74>)
 800242e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002432:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002434:	4b10      	ldr	r3, [pc, #64]	; (8002478 <MX_ADC1_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800243a:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <MX_ADC1_Init+0x74>)
 800243c:	2201      	movs	r2, #1
 800243e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002440:	480d      	ldr	r0, [pc, #52]	; (8002478 <MX_ADC1_Init+0x74>)
 8002442:	f000 fb8f 	bl	8002b64 <HAL_ADC_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800244c:	f000 f98e 	bl	800276c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002450:	2309      	movs	r3, #9
 8002452:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002454:	2301      	movs	r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	4619      	mov	r1, r3
 8002460:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_ADC1_Init+0x74>)
 8002462:	f000 fc57 	bl	8002d14 <HAL_ADC_ConfigChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800246c:	f000 f97e 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000288 	.word	0x20000288
 800247c:	40012400 	.word	0x40012400

08002480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <MX_I2C1_Init+0x54>)
 8002488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_I2C1_Init+0x50>)
 800248c:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <MX_I2C1_Init+0x58>)
 800248e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_I2C1_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_I2C1_Init+0x50>)
 800249e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b0:	4b07      	ldr	r3, [pc, #28]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024bc:	4804      	ldr	r0, [pc, #16]	; (80024d0 <MX_I2C1_Init+0x50>)
 80024be:	f000 fff5 	bl	80034ac <HAL_I2C_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024c8:	f000 f950 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200001e0 	.word	0x200001e0
 80024d4:	40005400 	.word	0x40005400
 80024d8:	000186a0 	.word	0x000186a0

080024dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	463b      	mov	r3, r7
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <MX_TIM2_Init+0x94>)
 80024fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <MX_TIM2_Init+0x94>)
 8002502:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002506:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <MX_TIM2_Init+0x94>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 800250e:	4b18      	ldr	r3, [pc, #96]	; (8002570 <MX_TIM2_Init+0x94>)
 8002510:	2204      	movs	r2, #4
 8002512:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <MX_TIM2_Init+0x94>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <MX_TIM2_Init+0x94>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002520:	4813      	ldr	r0, [pc, #76]	; (8002570 <MX_TIM2_Init+0x94>)
 8002522:	f003 fa45 	bl	80059b0 <HAL_TIM_Base_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800252c:	f000 f91e 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002536:	f107 0308 	add.w	r3, r7, #8
 800253a:	4619      	mov	r1, r3
 800253c:	480c      	ldr	r0, [pc, #48]	; (8002570 <MX_TIM2_Init+0x94>)
 800253e:	f003 fc4d 	bl	8005ddc <HAL_TIM_ConfigClockSource>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002548:	f000 f910 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002554:	463b      	mov	r3, r7
 8002556:	4619      	mov	r1, r3
 8002558:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_TIM2_Init+0x94>)
 800255a:	f003 fe09 	bl	8006170 <HAL_TIMEx_MasterConfigSynchronization>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002564:	f000 f902 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200002bc 	.word	0x200002bc

08002574 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002588:	463b      	mov	r3, r7
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <MX_TIM3_Init+0x94>)
 8002592:	4a1e      	ldr	r2, [pc, #120]	; (800260c <MX_TIM3_Init+0x98>)
 8002594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <MX_TIM3_Init+0x94>)
 8002598:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800259c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <MX_TIM3_Init+0x94>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 108;
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <MX_TIM3_Init+0x94>)
 80025a6:	226c      	movs	r2, #108	; 0x6c
 80025a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <MX_TIM3_Init+0x94>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b0:	4b15      	ldr	r3, [pc, #84]	; (8002608 <MX_TIM3_Init+0x94>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025b6:	4814      	ldr	r0, [pc, #80]	; (8002608 <MX_TIM3_Init+0x94>)
 80025b8:	f003 f9fa 	bl	80059b0 <HAL_TIM_Base_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025c2:	f000 f8d3 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	4619      	mov	r1, r3
 80025d2:	480d      	ldr	r0, [pc, #52]	; (8002608 <MX_TIM3_Init+0x94>)
 80025d4:	f003 fc02 	bl	8005ddc <HAL_TIM_ConfigClockSource>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025de:	f000 f8c5 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ea:	463b      	mov	r3, r7
 80025ec:	4619      	mov	r1, r3
 80025ee:	4806      	ldr	r0, [pc, #24]	; (8002608 <MX_TIM3_Init+0x94>)
 80025f0:	f003 fdbe 	bl	8006170 <HAL_TIMEx_MasterConfigSynchronization>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80025fa:	f000 f8b7 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000240 	.word	0x20000240
 800260c:	40000400 	.word	0x40000400

08002610 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	463b      	mov	r3, r7
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <MX_TIM4_Init+0x94>)
 800262e:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <MX_TIM4_Init+0x98>)
 8002630:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <MX_TIM4_Init+0x94>)
 8002634:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002638:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <MX_TIM4_Init+0x94>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002640:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <MX_TIM4_Init+0x94>)
 8002642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002646:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002648:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <MX_TIM4_Init+0x94>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264e:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <MX_TIM4_Init+0x94>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002654:	4813      	ldr	r0, [pc, #76]	; (80026a4 <MX_TIM4_Init+0x94>)
 8002656:	f003 f9ab 	bl	80059b0 <HAL_TIM_Base_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002660:	f000 f884 	bl	800276c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	4619      	mov	r1, r3
 8002670:	480c      	ldr	r0, [pc, #48]	; (80026a4 <MX_TIM4_Init+0x94>)
 8002672:	f003 fbb3 	bl	8005ddc <HAL_TIM_ConfigClockSource>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800267c:	f000 f876 	bl	800276c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002680:	2300      	movs	r3, #0
 8002682:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002688:	463b      	mov	r3, r7
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <MX_TIM4_Init+0x94>)
 800268e:	f003 fd6f 	bl	8006170 <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002698:	f000 f868 	bl	800276c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800269c:	bf00      	nop
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000198 	.word	0x20000198
 80026a8:	40000800 	.word	0x40000800

080026ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b2:	f107 0310 	add.w	r3, r7, #16
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c0:	4b27      	ldr	r3, [pc, #156]	; (8002760 <MX_GPIO_Init+0xb4>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a26      	ldr	r2, [pc, #152]	; (8002760 <MX_GPIO_Init+0xb4>)
 80026c6:	f043 0320 	orr.w	r3, r3, #32
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b24      	ldr	r3, [pc, #144]	; (8002760 <MX_GPIO_Init+0xb4>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b21      	ldr	r3, [pc, #132]	; (8002760 <MX_GPIO_Init+0xb4>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <MX_GPIO_Init+0xb4>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <MX_GPIO_Init+0xb4>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <MX_GPIO_Init+0xb4>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a1a      	ldr	r2, [pc, #104]	; (8002760 <MX_GPIO_Init+0xb4>)
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b18      	ldr	r3, [pc, #96]	; (8002760 <MX_GPIO_Init+0xb4>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|BOTTOM_LED_Pin|APOGEE_Pin, GPIO_PIN_RESET);
 8002708:	2200      	movs	r2, #0
 800270a:	f248 0148 	movw	r1, #32840	; 0x8048
 800270e:	4815      	ldr	r0, [pc, #84]	; (8002764 <MX_GPIO_Init+0xb8>)
 8002710:	f000 fe9a 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAIN_Pin|TOP_LED_Pin, GPIO_PIN_RESET);
 8002714:	2200      	movs	r2, #0
 8002716:	2118      	movs	r1, #24
 8002718:	4813      	ldr	r0, [pc, #76]	; (8002768 <MX_GPIO_Init+0xbc>)
 800271a:	f000 fe95 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_Pin BOTTOM_LED_Pin APOGEE_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BOTTOM_LED_Pin|APOGEE_Pin;
 800271e:	f248 0348 	movw	r3, #32840	; 0x8048
 8002722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2302      	movs	r3, #2
 800272e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4619      	mov	r1, r3
 8002736:	480b      	ldr	r0, [pc, #44]	; (8002764 <MX_GPIO_Init+0xb8>)
 8002738:	f000 fd34 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_Pin TOP_LED_Pin */
  GPIO_InitStruct.Pin = MAIN_Pin|TOP_LED_Pin;
 800273c:	2318      	movs	r3, #24
 800273e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002740:	2301      	movs	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2302      	movs	r3, #2
 800274a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	4619      	mov	r1, r3
 8002752:	4805      	ldr	r0, [pc, #20]	; (8002768 <MX_GPIO_Init+0xbc>)
 8002754:	f000 fd26 	bl	80031a4 <HAL_GPIO_Init>

}
 8002758:	bf00      	nop
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	40010800 	.word	0x40010800
 8002768:	40010c00 	.word	0x40010c00

0800276c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_MspInit+0x5c>)
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_MspInit+0x5c>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6193      	str	r3, [r2, #24]
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <HAL_MspInit+0x5c>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_MspInit+0x5c>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <HAL_MspInit+0x5c>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	61d3      	str	r3, [r2, #28]
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_MspInit+0x5c>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_MspInit+0x60>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <HAL_MspInit+0x60>)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40010000 	.word	0x40010000

080027dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_ADC_MspInit+0x6c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d121      	bne.n	8002840 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_ADC_MspInit+0x70>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a12      	ldr	r2, [pc, #72]	; (800284c <HAL_ADC_MspInit+0x70>)
 8002802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_ADC_MspInit+0x70>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_ADC_MspInit+0x70>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4a0c      	ldr	r2, [pc, #48]	; (800284c <HAL_ADC_MspInit+0x70>)
 800281a:	f043 0308 	orr.w	r3, r3, #8
 800281e:	6193      	str	r3, [r2, #24]
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_ADC_MspInit+0x70>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VSENS_Pin;
 800282c:	2302      	movs	r3, #2
 800282e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002830:	2303      	movs	r3, #3
 8002832:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VSENS_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	4619      	mov	r1, r3
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <HAL_ADC_MspInit+0x74>)
 800283c:	f000 fcb2 	bl	80031a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002840:	bf00      	nop
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40012400 	.word	0x40012400
 800284c:	40021000 	.word	0x40021000
 8002850:	40010c00 	.word	0x40010c00

08002854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <HAL_I2C_MspInit+0x70>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d123      	bne.n	80028bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_I2C_MspInit+0x74>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <HAL_I2C_MspInit+0x74>)
 800287a:	f043 0308 	orr.w	r3, r3, #8
 800287e:	6193      	str	r3, [r2, #24]
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_I2C_MspInit+0x74>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800288c:	23c0      	movs	r3, #192	; 0xc0
 800288e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002890:	2312      	movs	r3, #18
 8002892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002894:	2303      	movs	r3, #3
 8002896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	4619      	mov	r1, r3
 800289e:	480b      	ldr	r0, [pc, #44]	; (80028cc <HAL_I2C_MspInit+0x78>)
 80028a0:	f000 fc80 	bl	80031a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <HAL_I2C_MspInit+0x74>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_I2C_MspInit+0x74>)
 80028aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028ae:	61d3      	str	r3, [r2, #28]
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_I2C_MspInit+0x74>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028bc:	bf00      	nop
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40005400 	.word	0x40005400
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40010c00 	.word	0x40010c00

080028d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e0:	d114      	bne.n	800290c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028e2:	4b22      	ldr	r3, [pc, #136]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	4a21      	ldr	r2, [pc, #132]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	61d3      	str	r3, [r2, #28]
 80028ee:	4b1f      	ldr	r3, [pc, #124]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	201c      	movs	r0, #28
 8002900:	f000 fc19 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002904:	201c      	movs	r0, #28
 8002906:	f000 fc32 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800290a:	e02a      	b.n	8002962 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a17      	ldr	r2, [pc, #92]	; (8002970 <HAL_TIM_Base_MspInit+0xa0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d114      	bne.n	8002940 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	61d3      	str	r3, [r2, #28]
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	201d      	movs	r0, #29
 8002934:	f000 fbff 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002938:	201d      	movs	r0, #29
 800293a:	f000 fc18 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 800293e:	e010      	b.n	8002962 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <HAL_TIM_Base_MspInit+0xa4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10b      	bne.n	8002962 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4a07      	ldr	r2, [pc, #28]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	61d3      	str	r3, [r2, #28]
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	40000400 	.word	0x40000400
 8002974:	40000800 	.word	0x40000800

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <HardFault_Handler+0x4>

0800298a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298e:	e7fe      	b.n	800298e <MemManage_Handler+0x4>

08002990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <BusFault_Handler+0x4>

08002996 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299a:	e7fe      	b.n	800299a <UsageFault_Handler+0x4>

0800299c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c4:	f000 f890 	bl	8002ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	bd80      	pop	{r7, pc}

080029cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029d0:	4803      	ldr	r0, [pc, #12]	; (80029e0 <TIM2_IRQHandler+0x14>)
 80029d2:	f003 f8fb 	bl	8005bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  ADXL = 1;
 80029d6:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <TIM2_IRQHandler+0x18>)
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200002bc 	.word	0x200002bc
 80029e4:	20000178 	.word	0x20000178

080029e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029ec:	4803      	ldr	r0, [pc, #12]	; (80029fc <TIM3_IRQHandler+0x14>)
 80029ee:	f003 f8ed 	bl	8005bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  MS5611 = 1;
 80029f2:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <TIM3_IRQHandler+0x18>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000240 	.word	0x20000240
 8002a00:	2000017a 	.word	0x2000017a

08002a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a10:	480c      	ldr	r0, [pc, #48]	; (8002a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a12:	490d      	ldr	r1, [pc, #52]	; (8002a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a14:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a18:	e002      	b.n	8002a20 <LoopCopyDataInit>

08002a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a1e:	3304      	adds	r3, #4

08002a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a24:	d3f9      	bcc.n	8002a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a28:	4c0a      	ldr	r4, [pc, #40]	; (8002a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a2c:	e001      	b.n	8002a32 <LoopFillZerobss>

08002a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a30:	3204      	adds	r2, #4

08002a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a34:	d3fb      	bcc.n	8002a2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a36:	f7ff ffe5 	bl	8002a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a3a:	f003 fc09 	bl	8006250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a3e:	f7ff f8ff 	bl	8001c40 <main>
  bx lr
 8002a42:	4770      	bx	lr
  ldr r0, =_sdata
 8002a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a48:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002a4c:	08007388 	.word	0x08007388
  ldr r2, =_sbss
 8002a50:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002a54:	20000308 	.word	0x20000308

08002a58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a58:	e7fe      	b.n	8002a58 <ADC1_IRQHandler>
	...

08002a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_Init+0x28>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <HAL_Init+0x28>)
 8002a66:	f043 0310 	orr.w	r3, r3, #16
 8002a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	f000 fb57 	bl	8003120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f000 f808 	bl	8002a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a78:	f7ff fe7e 	bl	8002778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40022000 	.word	0x40022000

08002a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_InitTick+0x54>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <HAL_InitTick+0x58>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fb6f 	bl	800318a <HAL_SYSTICK_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00e      	b.n	8002ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b0f      	cmp	r3, #15
 8002aba:	d80a      	bhi.n	8002ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002abc:	2200      	movs	r2, #0
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f000 fb37 	bl	8003136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <HAL_InitTick+0x5c>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000018 	.word	0x20000018
 8002ae0:	20000020 	.word	0x20000020
 8002ae4:	2000001c 	.word	0x2000001c

08002ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_IncTick+0x1c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_IncTick+0x20>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	4a03      	ldr	r2, [pc, #12]	; (8002b08 <HAL_IncTick+0x20>)
 8002afa:	6013      	str	r3, [r2, #0]
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	20000020 	.word	0x20000020
 8002b08:	20000304 	.word	0x20000304

08002b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b02      	ldr	r3, [pc, #8]	; (8002b1c <HAL_GetTick+0x10>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	20000304 	.word	0x20000304

08002b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff fff0 	bl	8002b0c <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d005      	beq.n	8002b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_Delay+0x40>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b46:	bf00      	nop
 8002b48:	f7ff ffe0 	bl	8002b0c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d8f7      	bhi.n	8002b48 <HAL_Delay+0x28>
  {
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000020 	.word	0x20000020

08002b64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0be      	b.n	8002d04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fe1a 	bl	80027dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f9ab 	bl	8002f04 <ADC_ConversionStop_Disable>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 8099 	bne.w	8002cf2 <HAL_ADC_Init+0x18e>
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 8095 	bne.w	8002cf2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bd0:	f023 0302 	bic.w	r3, r3, #2
 8002bd4:	f043 0202 	orr.w	r2, r3, #2
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002be4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7b1b      	ldrb	r3, [r3, #12]
 8002bea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfc:	d003      	beq.n	8002c06 <HAL_ADC_Init+0xa2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d102      	bne.n	8002c0c <HAL_ADC_Init+0xa8>
 8002c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0a:	e000      	b.n	8002c0e <HAL_ADC_Init+0xaa>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7d1b      	ldrb	r3, [r3, #20]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d119      	bne.n	8002c50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	7b1b      	ldrb	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	035a      	lsls	r2, r3, #13
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	e00b      	b.n	8002c50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4b28      	ldr	r3, [pc, #160]	; (8002d0c <HAL_ADC_Init+0x1a8>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c80:	d003      	beq.n	8002c8a <HAL_ADC_Init+0x126>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d104      	bne.n	8002c94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	051b      	lsls	r3, r3, #20
 8002c92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_ADC_Init+0x1ac>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cce:	e018      	b.n	8002d02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	f023 0312 	bic.w	r3, r3, #18
 8002cd8:	f043 0210 	orr.w	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cf0:	e007      	b.n	8002d02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	ffe1f7fd 	.word	0xffe1f7fd
 8002d10:	ff1f0efe 	.word	0xff1f0efe

08002d14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x20>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e0dc      	b.n	8002eee <HAL_ADC_ConfigChannel+0x1da>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b06      	cmp	r3, #6
 8002d42:	d81c      	bhi.n	8002d7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	3b05      	subs	r3, #5
 8002d56:	221f      	movs	r2, #31
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	4019      	ands	r1, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b05      	subs	r3, #5
 8002d70:	fa00 f203 	lsl.w	r2, r0, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d7c:	e03c      	b.n	8002df8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d81c      	bhi.n	8002dc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	3b23      	subs	r3, #35	; 0x23
 8002d98:	221f      	movs	r2, #31
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	4019      	ands	r1, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	3b23      	subs	r3, #35	; 0x23
 8002db2:	fa00 f203 	lsl.w	r2, r0, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8002dbe:	e01b      	b.n	8002df8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b41      	subs	r3, #65	; 0x41
 8002dd2:	221f      	movs	r2, #31
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	4019      	ands	r1, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	3b41      	subs	r3, #65	; 0x41
 8002dec:	fa00 f203 	lsl.w	r2, r0, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b09      	cmp	r3, #9
 8002dfe:	d91c      	bls.n	8002e3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68d9      	ldr	r1, [r3, #12]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	3b1e      	subs	r3, #30
 8002e12:	2207      	movs	r2, #7
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	4019      	ands	r1, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	6898      	ldr	r0, [r3, #8]
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b1e      	subs	r3, #30
 8002e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	e019      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6919      	ldr	r1, [r3, #16]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	4019      	ands	r1, r3
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6898      	ldr	r0, [r3, #8]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	fa00 f203 	lsl.w	r2, r0, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d003      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e7a:	2b11      	cmp	r3, #17
 8002e7c:	d132      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d125      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d126      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ea4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d11a      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eae:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_ADC_ConfigChannel+0x1e8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <HAL_ADC_ConfigChannel+0x1ec>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	0c9a      	lsrs	r2, r3, #18
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ec4:	e002      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f9      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x1b2>
 8002ed2:	e007      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	40012400 	.word	0x40012400
 8002efc:	20000018 	.word	0x20000018
 8002f00:	431bde83 	.word	0x431bde83

08002f04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d12e      	bne.n	8002f7c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f2e:	f7ff fded 	bl	8002b0c <HAL_GetTick>
 8002f32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f34:	e01b      	b.n	8002f6e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f36:	f7ff fde9 	bl	8002b0c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d914      	bls.n	8002f6e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10d      	bne.n	8002f6e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	f043 0210 	orr.w	r2, r3, #16
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e007      	b.n	8002f7e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d0dc      	beq.n	8002f36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0307 	and.w	r3, r3, #7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0b      	blt.n	8003016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4906      	ldr	r1, [pc, #24]	; (8003020 <__NVIC_EnableIRQ+0x34>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2001      	movs	r0, #1
 800300e:	fa00 f202 	lsl.w	r2, r0, r2
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	e000e100 	.word	0xe000e100

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	; (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ec:	d301      	bcc.n	80030f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00f      	b.n	8003112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <SysTick_Config+0x40>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fa:	210f      	movs	r1, #15
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f7ff ff90 	bl	8003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <SysTick_Config+0x40>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <SysTick_Config+0x40>)
 800310c:	2207      	movs	r2, #7
 800310e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	e000e010 	.word	0xe000e010

08003120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ff2d 	bl	8002f88 <__NVIC_SetPriorityGrouping>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003148:	f7ff ff42 	bl	8002fd0 <__NVIC_GetPriorityGrouping>
 800314c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	6978      	ldr	r0, [r7, #20]
 8003154:	f7ff ff90 	bl	8003078 <NVIC_EncodePriority>
 8003158:	4602      	mov	r2, r0
 800315a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff5f 	bl	8003024 <__NVIC_SetPriority>
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff35 	bl	8002fec <__NVIC_EnableIRQ>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ffa2 	bl	80030dc <SysTick_Config>
 8003198:	4603      	mov	r3, r0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b08b      	sub	sp, #44	; 0x2c
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ae:	2300      	movs	r3, #0
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031b2:	2300      	movs	r3, #0
 80031b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031b6:	e121      	b.n	80033fc <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031b8:	2201      	movs	r2, #1
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	f040 8110 	bne.w	80033f6 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b12      	cmp	r3, #18
 80031dc:	d034      	beq.n	8003248 <HAL_GPIO_Init+0xa4>
 80031de:	2b12      	cmp	r3, #18
 80031e0:	d80d      	bhi.n	80031fe <HAL_GPIO_Init+0x5a>
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d02b      	beq.n	800323e <HAL_GPIO_Init+0x9a>
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d804      	bhi.n	80031f4 <HAL_GPIO_Init+0x50>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d031      	beq.n	8003252 <HAL_GPIO_Init+0xae>
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d01c      	beq.n	800322c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031f2:	e048      	b.n	8003286 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d043      	beq.n	8003280 <HAL_GPIO_Init+0xdc>
 80031f8:	2b11      	cmp	r3, #17
 80031fa:	d01b      	beq.n	8003234 <HAL_GPIO_Init+0x90>
          break;
 80031fc:	e043      	b.n	8003286 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031fe:	4a86      	ldr	r2, [pc, #536]	; (8003418 <HAL_GPIO_Init+0x274>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d026      	beq.n	8003252 <HAL_GPIO_Init+0xae>
 8003204:	4a84      	ldr	r2, [pc, #528]	; (8003418 <HAL_GPIO_Init+0x274>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d806      	bhi.n	8003218 <HAL_GPIO_Init+0x74>
 800320a:	4a84      	ldr	r2, [pc, #528]	; (800341c <HAL_GPIO_Init+0x278>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d020      	beq.n	8003252 <HAL_GPIO_Init+0xae>
 8003210:	4a83      	ldr	r2, [pc, #524]	; (8003420 <HAL_GPIO_Init+0x27c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01d      	beq.n	8003252 <HAL_GPIO_Init+0xae>
          break;
 8003216:	e036      	b.n	8003286 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003218:	4a82      	ldr	r2, [pc, #520]	; (8003424 <HAL_GPIO_Init+0x280>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d019      	beq.n	8003252 <HAL_GPIO_Init+0xae>
 800321e:	4a82      	ldr	r2, [pc, #520]	; (8003428 <HAL_GPIO_Init+0x284>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d016      	beq.n	8003252 <HAL_GPIO_Init+0xae>
 8003224:	4a81      	ldr	r2, [pc, #516]	; (800342c <HAL_GPIO_Init+0x288>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <HAL_GPIO_Init+0xae>
          break;
 800322a:	e02c      	b.n	8003286 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	623b      	str	r3, [r7, #32]
          break;
 8003232:	e028      	b.n	8003286 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	3304      	adds	r3, #4
 800323a:	623b      	str	r3, [r7, #32]
          break;
 800323c:	e023      	b.n	8003286 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	3308      	adds	r3, #8
 8003244:	623b      	str	r3, [r7, #32]
          break;
 8003246:	e01e      	b.n	8003286 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	330c      	adds	r3, #12
 800324e:	623b      	str	r3, [r7, #32]
          break;
 8003250:	e019      	b.n	8003286 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800325a:	2304      	movs	r3, #4
 800325c:	623b      	str	r3, [r7, #32]
          break;
 800325e:	e012      	b.n	8003286 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d105      	bne.n	8003274 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003268:	2308      	movs	r3, #8
 800326a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	611a      	str	r2, [r3, #16]
          break;
 8003272:	e008      	b.n	8003286 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003274:	2308      	movs	r3, #8
 8003276:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	615a      	str	r2, [r3, #20]
          break;
 800327e:	e002      	b.n	8003286 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
          break;
 8003284:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2bff      	cmp	r3, #255	; 0xff
 800328a:	d801      	bhi.n	8003290 <HAL_GPIO_Init+0xec>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	e001      	b.n	8003294 <HAL_GPIO_Init+0xf0>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2bff      	cmp	r3, #255	; 0xff
 800329a:	d802      	bhi.n	80032a2 <HAL_GPIO_Init+0xfe>
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	e002      	b.n	80032a8 <HAL_GPIO_Init+0x104>
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	3b08      	subs	r3, #8
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	210f      	movs	r1, #15
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	401a      	ands	r2, r3
 80032ba:	6a39      	ldr	r1, [r7, #32]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	431a      	orrs	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 8090 	beq.w	80033f6 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032d6:	4b56      	ldr	r3, [pc, #344]	; (8003430 <HAL_GPIO_Init+0x28c>)
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	4a55      	ldr	r2, [pc, #340]	; (8003430 <HAL_GPIO_Init+0x28c>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6193      	str	r3, [r2, #24]
 80032e2:	4b53      	ldr	r3, [pc, #332]	; (8003430 <HAL_GPIO_Init+0x28c>)
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032ee:	4a51      	ldr	r2, [pc, #324]	; (8003434 <HAL_GPIO_Init+0x290>)
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	3302      	adds	r3, #2
 80032f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	220f      	movs	r2, #15
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4013      	ands	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a48      	ldr	r2, [pc, #288]	; (8003438 <HAL_GPIO_Init+0x294>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00d      	beq.n	8003336 <HAL_GPIO_Init+0x192>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a47      	ldr	r2, [pc, #284]	; (800343c <HAL_GPIO_Init+0x298>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_Init+0x18e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a46      	ldr	r2, [pc, #280]	; (8003440 <HAL_GPIO_Init+0x29c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_GPIO_Init+0x18a>
 800332a:	2302      	movs	r3, #2
 800332c:	e004      	b.n	8003338 <HAL_GPIO_Init+0x194>
 800332e:	2303      	movs	r3, #3
 8003330:	e002      	b.n	8003338 <HAL_GPIO_Init+0x194>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_GPIO_Init+0x194>
 8003336:	2300      	movs	r3, #0
 8003338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333a:	f002 0203 	and.w	r2, r2, #3
 800333e:	0092      	lsls	r2, r2, #2
 8003340:	4093      	lsls	r3, r2
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003348:	493a      	ldr	r1, [pc, #232]	; (8003434 <HAL_GPIO_Init+0x290>)
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3302      	adds	r3, #2
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d006      	beq.n	8003370 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003362:	4b38      	ldr	r3, [pc, #224]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4937      	ldr	r1, [pc, #220]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
 800336e:	e006      	b.n	800337e <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003370:	4b34      	ldr	r3, [pc, #208]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	43db      	mvns	r3, r3
 8003378:	4932      	ldr	r1, [pc, #200]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 800337a:	4013      	ands	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d006      	beq.n	8003398 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800338a:	4b2e      	ldr	r3, [pc, #184]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	492d      	ldr	r1, [pc, #180]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	604b      	str	r3, [r1, #4]
 8003396:	e006      	b.n	80033a6 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003398:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	43db      	mvns	r3, r3
 80033a0:	4928      	ldr	r1, [pc, #160]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	4923      	ldr	r1, [pc, #140]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
 80033be:	e006      	b.n	80033ce <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	491e      	ldr	r1, [pc, #120]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d006      	beq.n	80033e8 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033da:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	4919      	ldr	r1, [pc, #100]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60cb      	str	r3, [r1, #12]
 80033e6:	e006      	b.n	80033f6 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033e8:	4b16      	ldr	r3, [pc, #88]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	4914      	ldr	r1, [pc, #80]	; (8003444 <HAL_GPIO_Init+0x2a0>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	3301      	adds	r3, #1
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	f47f aed6 	bne.w	80031b8 <HAL_GPIO_Init+0x14>
  }
}
 800340c:	bf00      	nop
 800340e:	372c      	adds	r7, #44	; 0x2c
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	10210000 	.word	0x10210000
 800341c:	10110000 	.word	0x10110000
 8003420:	10120000 	.word	0x10120000
 8003424:	10310000 	.word	0x10310000
 8003428:	10320000 	.word	0x10320000
 800342c:	10220000 	.word	0x10220000
 8003430:	40021000 	.word	0x40021000
 8003434:	40010000 	.word	0x40010000
 8003438:	40010800 	.word	0x40010800
 800343c:	40010c00 	.word	0x40010c00
 8003440:	40011000 	.word	0x40011000
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003458:	787b      	ldrb	r3, [r7, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003464:	e003      	b.n	800346e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003466:	887b      	ldrh	r3, [r7, #2]
 8003468:	041a      	lsls	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	611a      	str	r2, [r3, #16]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4013      	ands	r3, r2
 8003490:	041a      	lsls	r2, r3, #16
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43d9      	mvns	r1, r3
 8003496:	887b      	ldrh	r3, [r7, #2]
 8003498:	400b      	ands	r3, r1
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	611a      	str	r2, [r3, #16]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
	...

080034ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e11f      	b.n	80036fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff f9be 	bl	8002854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	; 0x24
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800350e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003510:	f002 f966 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8003514:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4a7b      	ldr	r2, [pc, #492]	; (8003708 <HAL_I2C_Init+0x25c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d807      	bhi.n	8003530 <HAL_I2C_Init+0x84>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a7a      	ldr	r2, [pc, #488]	; (800370c <HAL_I2C_Init+0x260>)
 8003524:	4293      	cmp	r3, r2
 8003526:	bf94      	ite	ls
 8003528:	2301      	movls	r3, #1
 800352a:	2300      	movhi	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	e006      	b.n	800353e <HAL_I2C_Init+0x92>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a77      	ldr	r2, [pc, #476]	; (8003710 <HAL_I2C_Init+0x264>)
 8003534:	4293      	cmp	r3, r2
 8003536:	bf94      	ite	ls
 8003538:	2301      	movls	r3, #1
 800353a:	2300      	movhi	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e0db      	b.n	80036fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a72      	ldr	r2, [pc, #456]	; (8003714 <HAL_I2C_Init+0x268>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	0c9b      	lsrs	r3, r3, #18
 8003550:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a64      	ldr	r2, [pc, #400]	; (8003708 <HAL_I2C_Init+0x25c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d802      	bhi.n	8003580 <HAL_I2C_Init+0xd4>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3301      	adds	r3, #1
 800357e:	e009      	b.n	8003594 <HAL_I2C_Init+0xe8>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003586:	fb02 f303 	mul.w	r3, r2, r3
 800358a:	4a63      	ldr	r2, [pc, #396]	; (8003718 <HAL_I2C_Init+0x26c>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	3301      	adds	r3, #1
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	430b      	orrs	r3, r1
 800359a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4956      	ldr	r1, [pc, #344]	; (8003708 <HAL_I2C_Init+0x25c>)
 80035b0:	428b      	cmp	r3, r1
 80035b2:	d80d      	bhi.n	80035d0 <HAL_I2C_Init+0x124>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	1e59      	subs	r1, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	bf38      	it	cc
 80035cc:	2304      	movcc	r3, #4
 80035ce:	e04f      	b.n	8003670 <HAL_I2C_Init+0x1c4>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d111      	bne.n	80035fc <HAL_I2C_Init+0x150>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1e58      	subs	r0, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	e012      	b.n	8003622 <HAL_I2C_Init+0x176>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e58      	subs	r0, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6859      	ldr	r1, [r3, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	0099      	lsls	r1, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003612:	3301      	adds	r3, #1
 8003614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Init+0x17e>
 8003626:	2301      	movs	r3, #1
 8003628:	e022      	b.n	8003670 <HAL_I2C_Init+0x1c4>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10e      	bne.n	8003650 <HAL_I2C_Init+0x1a4>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	1e58      	subs	r0, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	440b      	add	r3, r1
 8003640:	fbb0 f3f3 	udiv	r3, r0, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364e:	e00f      	b.n	8003670 <HAL_I2C_Init+0x1c4>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e58      	subs	r0, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	0099      	lsls	r1, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	fbb0 f3f3 	udiv	r3, r0, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	6809      	ldr	r1, [r1, #0]
 8003674:	4313      	orrs	r3, r2
 8003676:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800369e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6911      	ldr	r1, [r2, #16]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68d2      	ldr	r2, [r2, #12]
 80036aa:	4311      	orrs	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	000186a0 	.word	0x000186a0
 800370c:	001e847f 	.word	0x001e847f
 8003710:	003d08ff 	.word	0x003d08ff
 8003714:	431bde83 	.word	0x431bde83
 8003718:	10624dd3 	.word	0x10624dd3

0800371c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	460b      	mov	r3, r1
 800372a:	817b      	strh	r3, [r7, #10]
 800372c:	4613      	mov	r3, r2
 800372e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003730:	f7ff f9ec 	bl	8002b0c <HAL_GetTick>
 8003734:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	f040 80e0 	bne.w	8003904 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2319      	movs	r3, #25
 800374a:	2201      	movs	r2, #1
 800374c:	4970      	ldr	r1, [pc, #448]	; (8003910 <HAL_I2C_Master_Transmit+0x1f4>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f001 fa94 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800375a:	2302      	movs	r3, #2
 800375c:	e0d3      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_I2C_Master_Transmit+0x50>
 8003768:	2302      	movs	r3, #2
 800376a:	e0cc      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d007      	beq.n	8003792 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2221      	movs	r2, #33	; 0x21
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2210      	movs	r2, #16
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	893a      	ldrh	r2, [r7, #8]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a50      	ldr	r2, [pc, #320]	; (8003914 <HAL_I2C_Master_Transmit+0x1f8>)
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037d4:	8979      	ldrh	r1, [r7, #10]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	6a3a      	ldr	r2, [r7, #32]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 ff80 	bl	80046e0 <I2C_MasterRequestWrite>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e08d      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003800:	e066      	b.n	80038d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	6a39      	ldr	r1, [r7, #32]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f001 fb0e 	bl	8004e28 <I2C_WaitOnTXEFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	2b04      	cmp	r3, #4
 8003818:	d107      	bne.n	800382a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003828:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e06b      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d11b      	bne.n	80038a4 <HAL_I2C_Master_Transmit+0x188>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d017      	beq.n	80038a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	6a39      	ldr	r1, [r7, #32]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f001 fafe 	bl	8004eaa <I2C_WaitOnBTFFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00d      	beq.n	80038d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d107      	bne.n	80038cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e01a      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d194      	bne.n	8003802 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	00100002 	.word	0x00100002
 8003914:	ffff0000 	.word	0xffff0000

08003918 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08c      	sub	sp, #48	; 0x30
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	461a      	mov	r2, r3
 8003924:	460b      	mov	r3, r1
 8003926:	817b      	strh	r3, [r7, #10]
 8003928:	4613      	mov	r3, r2
 800392a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003930:	f7ff f8ec 	bl	8002b0c <HAL_GetTick>
 8003934:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b20      	cmp	r3, #32
 8003940:	f040 8238 	bne.w	8003db4 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2319      	movs	r3, #25
 800394a:	2201      	movs	r2, #1
 800394c:	497e      	ldr	r1, [pc, #504]	; (8003b48 <HAL_I2C_Master_Receive+0x230>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f001 f994 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	e22b      	b.n	8003db6 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_I2C_Master_Receive+0x54>
 8003968:	2302      	movs	r3, #2
 800396a:	e224      	b.n	8003db6 <HAL_I2C_Master_Receive+0x49e>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d007      	beq.n	8003992 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2222      	movs	r2, #34	; 0x22
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2210      	movs	r2, #16
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	893a      	ldrh	r2, [r7, #8]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4a5e      	ldr	r2, [pc, #376]	; (8003b4c <HAL_I2C_Master_Receive+0x234>)
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039d4:	8979      	ldrh	r1, [r7, #10]
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 ff02 	bl	80047e4 <I2C_MasterRequestRead>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e1e5      	b.n	8003db6 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d113      	bne.n	8003a1a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	e1b9      	b.n	8003d8e <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d11d      	bne.n	8003a5e <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a30:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a32:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a5a:	b662      	cpsie	i
 8003a5c:	e197      	b.n	8003d8e <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d11d      	bne.n	8003aa2 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a76:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a9e:	b662      	cpsie	i
 8003aa0:	e175      	b.n	8003d8e <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ac8:	e161      	b.n	8003d8e <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	f200 811a 	bhi.w	8003d08 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d123      	bne.n	8003b24 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f001 fa23 	bl	8004f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e162      	b.n	8003db6 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691a      	ldr	r2, [r3, #16]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b22:	e134      	b.n	8003d8e <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d150      	bne.n	8003bce <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	2200      	movs	r2, #0
 8003b34:	4906      	ldr	r1, [pc, #24]	; (8003b50 <HAL_I2C_Master_Receive+0x238>)
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f001 f8a0 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e137      	b.n	8003db6 <HAL_I2C_Master_Receive+0x49e>
 8003b46:	bf00      	nop
 8003b48:	00100002 	.word	0x00100002
 8003b4c:	ffff0000 	.word	0xffff0000
 8003b50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b54:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b64:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b98:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bcc:	e0df      	b.n	8003d8e <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	497a      	ldr	r1, [pc, #488]	; (8003dc0 <HAL_I2C_Master_Receive+0x4a8>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f001 f84f 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0e6      	b.n	8003db6 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bf8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c2c:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <HAL_I2C_Master_Receive+0x4ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	08db      	lsrs	r3, r3, #3
 8003c32:	4a65      	ldr	r2, [pc, #404]	; (8003dc8 <HAL_I2C_Master_Receive+0x4b0>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	0a1a      	lsrs	r2, r3, #8
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	00da      	lsls	r2, r3, #3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d117      	bne.n	8003c82 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c74:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e099      	b.n	8003db6 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d1da      	bne.n	8003c46 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cd2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d06:	e042      	b.n	8003d8e <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f001 f90d 	bl	8004f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e04c      	b.n	8003db6 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d118      	bne.n	8003d8e <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f47f ae99 	bne.w	8003aca <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3728      	adds	r7, #40	; 0x28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	00010004 	.word	0x00010004
 8003dc4:	20000018 	.word	0x20000018
 8003dc8:	14f8b589 	.word	0x14f8b589

08003dcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	460b      	mov	r3, r1
 8003de0:	813b      	strh	r3, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003de6:	f7fe fe91 	bl	8002b0c <HAL_GetTick>
 8003dea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	f040 80d9 	bne.w	8003fac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	2319      	movs	r3, #25
 8003e00:	2201      	movs	r2, #1
 8003e02:	496d      	ldr	r1, [pc, #436]	; (8003fb8 <HAL_I2C_Mem_Write+0x1ec>)
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 ff39 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e10:	2302      	movs	r3, #2
 8003e12:	e0cc      	b.n	8003fae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_I2C_Mem_Write+0x56>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0c5      	b.n	8003fae <HAL_I2C_Mem_Write+0x1e2>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d007      	beq.n	8003e48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2221      	movs	r2, #33	; 0x21
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2240      	movs	r2, #64	; 0x40
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a3a      	ldr	r2, [r7, #32]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a4d      	ldr	r2, [pc, #308]	; (8003fbc <HAL_I2C_Mem_Write+0x1f0>)
 8003e88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e8a:	88f8      	ldrh	r0, [r7, #6]
 8003e8c:	893a      	ldrh	r2, [r7, #8]
 8003e8e:	8979      	ldrh	r1, [r7, #10]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	4603      	mov	r3, r0
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fd70 	bl	8004980 <I2C_RequestMemoryWrite>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d052      	beq.n	8003f4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e081      	b.n	8003fae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 ffba 	bl	8004e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00d      	beq.n	8003ed6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d107      	bne.n	8003ed2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e06b      	b.n	8003fae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	781a      	ldrb	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d11b      	bne.n	8003f4c <HAL_I2C_Mem_Write+0x180>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d017      	beq.n	8003f4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1aa      	bne.n	8003eaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 ffa6 	bl	8004eaa <I2C_WaitOnBTFFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00d      	beq.n	8003f80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d107      	bne.n	8003f7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e016      	b.n	8003fae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e000      	b.n	8003fae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	00100002 	.word	0x00100002
 8003fbc:	ffff0000 	.word	0xffff0000

08003fc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08c      	sub	sp, #48	; 0x30
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	4608      	mov	r0, r1
 8003fca:	4611      	mov	r1, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	817b      	strh	r3, [r7, #10]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	813b      	strh	r3, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fde:	f7fe fd95 	bl	8002b0c <HAL_GetTick>
 8003fe2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	f040 823d 	bne.w	800446c <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	2319      	movs	r3, #25
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	4981      	ldr	r1, [pc, #516]	; (8004200 <HAL_I2C_Mem_Read+0x240>)
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fe3d 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
 800400a:	e230      	b.n	800446e <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_I2C_Mem_Read+0x5a>
 8004016:	2302      	movs	r3, #2
 8004018:	e229      	b.n	800446e <HAL_I2C_Mem_Read+0x4ae>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d007      	beq.n	8004040 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2222      	movs	r2, #34	; 0x22
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2240      	movs	r2, #64	; 0x40
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a61      	ldr	r2, [pc, #388]	; (8004204 <HAL_I2C_Mem_Read+0x244>)
 8004080:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004082:	88f8      	ldrh	r0, [r7, #6]
 8004084:	893a      	ldrh	r2, [r7, #8]
 8004086:	8979      	ldrh	r1, [r7, #10]
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	4603      	mov	r3, r0
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fd0a 	bl	8004aac <I2C_RequestMemoryRead>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e1e5      	b.n	800446e <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d113      	bne.n	80040d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	e1b9      	b.n	8004446 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d11d      	bne.n	8004116 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040ea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	61bb      	str	r3, [r7, #24]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004110:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004112:	b662      	cpsie	i
 8004114:	e197      	b.n	8004446 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	2b02      	cmp	r3, #2
 800411c:	d11d      	bne.n	800415a <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800412e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004156:	b662      	cpsie	i
 8004158:	e175      	b.n	8004446 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004168:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004180:	e161      	b.n	8004446 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	2b03      	cmp	r3, #3
 8004188:	f200 811a 	bhi.w	80043c0 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004190:	2b01      	cmp	r3, #1
 8004192:	d123      	bne.n	80041dc <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fec7 	bl	8004f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e162      	b.n	800446e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041da:	e134      	b.n	8004446 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d150      	bne.n	8004286 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	2200      	movs	r2, #0
 80041ec:	4906      	ldr	r1, [pc, #24]	; (8004208 <HAL_I2C_Mem_Read+0x248>)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fd44 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e137      	b.n	800446e <HAL_I2C_Mem_Read+0x4ae>
 80041fe:	bf00      	nop
 8004200:	00100002 	.word	0x00100002
 8004204:	ffff0000 	.word	0xffff0000
 8004208:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800420c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004250:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004284:	e0df      	b.n	8004446 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	2200      	movs	r2, #0
 800428e:	497a      	ldr	r1, [pc, #488]	; (8004478 <HAL_I2C_Mem_Read+0x4b8>)
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 fcf3 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0e6      	b.n	800446e <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042b0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042e4:	4b65      	ldr	r3, [pc, #404]	; (800447c <HAL_I2C_Mem_Read+0x4bc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	4a65      	ldr	r2, [pc, #404]	; (8004480 <HAL_I2C_Mem_Read+0x4c0>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	0a1a      	lsrs	r2, r3, #8
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	00da      	lsls	r2, r3, #3
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	3b01      	subs	r3, #1
 8004302:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d117      	bne.n	800433a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800432c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e099      	b.n	800446e <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d1da      	bne.n	80042fe <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	855a      	strh	r2, [r3, #42]	; 0x2a
 800438a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043be:	e042      	b.n	8004446 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fdb1 	bl	8004f2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e04c      	b.n	800446e <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b04      	cmp	r3, #4
 8004412:	d118      	bne.n	8004446 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	f47f ae99 	bne.w	8004182 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	e000      	b.n	800446e <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 800446c:	2302      	movs	r3, #2
  }
}
 800446e:	4618      	mov	r0, r3
 8004470:	3728      	adds	r7, #40	; 0x28
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	00010004 	.word	0x00010004
 800447c:	20000018 	.word	0x20000018
 8004480:	14f8b589 	.word	0x14f8b589

08004484 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	460b      	mov	r3, r1
 8004492:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004494:	f7fe fb3a 	bl	8002b0c <HAL_GetTick>
 8004498:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800449a:	2301      	movs	r3, #1
 800449c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	f040 8111 	bne.w	80046ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	2319      	movs	r3, #25
 80044b2:	2201      	movs	r2, #1
 80044b4:	4988      	ldr	r1, [pc, #544]	; (80046d8 <HAL_I2C_IsDeviceReady+0x254>)
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fbe0 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
 80044c4:	e104      	b.n	80046d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_I2C_IsDeviceReady+0x50>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e0fd      	b.n	80046d0 <HAL_I2C_IsDeviceReady+0x24c>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d007      	beq.n	80044fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004508:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2224      	movs	r2, #36	; 0x24
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a70      	ldr	r2, [pc, #448]	; (80046dc <HAL_I2C_IsDeviceReady+0x258>)
 800451c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2200      	movs	r2, #0
 8004536:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fb9e 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00d      	beq.n	8004562 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004554:	d103      	bne.n	800455e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800455c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e0b6      	b.n	80046d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004562:	897b      	ldrh	r3, [r7, #10]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004570:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004572:	f7fe facb 	bl	8002b0c <HAL_GetTick>
 8004576:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	bf0c      	ite	eq
 8004586:	2301      	moveq	r3, #1
 8004588:	2300      	movne	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459c:	bf0c      	ite	eq
 800459e:	2301      	moveq	r3, #1
 80045a0:	2300      	movne	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045a6:	e025      	b.n	80045f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045a8:	f7fe fab0 	bl	8002b0c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d302      	bcc.n	80045be <HAL_I2C_IsDeviceReady+0x13a>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d103      	bne.n	80045c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	22a0      	movs	r2, #160	; 0xa0
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ea:	bf0c      	ite	eq
 80045ec:	2301      	moveq	r3, #1
 80045ee:	2300      	movne	r3, #0
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2ba0      	cmp	r3, #160	; 0xa0
 80045fe:	d005      	beq.n	800460c <HAL_I2C_IsDeviceReady+0x188>
 8004600:	7dfb      	ldrb	r3, [r7, #23]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <HAL_I2C_IsDeviceReady+0x188>
 8004606:	7dbb      	ldrb	r3, [r7, #22]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0cd      	beq.n	80045a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d129      	bne.n	8004676 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004630:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004632:	2300      	movs	r3, #0
 8004634:	613b      	str	r3, [r7, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	2319      	movs	r3, #25
 800464e:	2201      	movs	r2, #1
 8004650:	4921      	ldr	r1, [pc, #132]	; (80046d8 <HAL_I2C_IsDeviceReady+0x254>)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fb12 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e036      	b.n	80046d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e02c      	b.n	80046d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004684:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800468e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	2319      	movs	r3, #25
 8004696:	2201      	movs	r2, #1
 8004698:	490f      	ldr	r1, [pc, #60]	; (80046d8 <HAL_I2C_IsDeviceReady+0x254>)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 faee 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e012      	b.n	80046d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	3301      	adds	r3, #1
 80046ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	f4ff af32 	bcc.w	800451e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
  }
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	00100002 	.word	0x00100002
 80046dc:	ffff0000 	.word	0xffff0000

080046e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	460b      	mov	r3, r1
 80046ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d006      	beq.n	800470a <I2C_MasterRequestWrite+0x2a>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d003      	beq.n	800470a <I2C_MasterRequestWrite+0x2a>
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004708:	d108      	bne.n	800471c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e00b      	b.n	8004734 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	2b12      	cmp	r3, #18
 8004722:	d107      	bne.n	8004734 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004732:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fa9b 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475a:	d103      	bne.n	8004764 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e035      	b.n	80047d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004770:	d108      	bne.n	8004784 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004772:	897b      	ldrh	r3, [r7, #10]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004780:	611a      	str	r2, [r3, #16]
 8004782:	e01b      	b.n	80047bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004784:	897b      	ldrh	r3, [r7, #10]
 8004786:	11db      	asrs	r3, r3, #7
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f003 0306 	and.w	r3, r3, #6
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f063 030f 	orn	r3, r3, #15
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	490e      	ldr	r1, [pc, #56]	; (80047dc <I2C_MasterRequestWrite+0xfc>)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fac1 	bl	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e010      	b.n	80047d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047b2:	897b      	ldrh	r3, [r7, #10]
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	4907      	ldr	r1, [pc, #28]	; (80047e0 <I2C_MasterRequestWrite+0x100>)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fab1 	bl	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	00010008 	.word	0x00010008
 80047e0:	00010002 	.word	0x00010002

080047e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	460b      	mov	r3, r1
 80047f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004808:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d006      	beq.n	800481e <I2C_MasterRequestRead+0x3a>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d003      	beq.n	800481e <I2C_MasterRequestRead+0x3a>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800481c:	d108      	bne.n	8004830 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e00b      	b.n	8004848 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	2b11      	cmp	r3, #17
 8004836:	d107      	bne.n	8004848 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004846:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fa11 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486e:	d103      	bne.n	8004878 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e079      	b.n	8004970 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004884:	d108      	bne.n	8004898 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004886:	897b      	ldrh	r3, [r7, #10]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	b2da      	uxtb	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]
 8004896:	e05f      	b.n	8004958 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004898:	897b      	ldrh	r3, [r7, #10]
 800489a:	11db      	asrs	r3, r3, #7
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f003 0306 	and.w	r3, r3, #6
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f063 030f 	orn	r3, r3, #15
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4930      	ldr	r1, [pc, #192]	; (8004978 <I2C_MasterRequestRead+0x194>)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fa37 	bl	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e054      	b.n	8004970 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048c6:	897b      	ldrh	r3, [r7, #10]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4929      	ldr	r1, [pc, #164]	; (800497c <I2C_MasterRequestRead+0x198>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 fa27 	bl	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e044      	b.n	8004970 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e6:	2300      	movs	r3, #0
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800490a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f9af 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00d      	beq.n	8004940 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004932:	d103      	bne.n	800493c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800493a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e017      	b.n	8004970 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004940:	897b      	ldrh	r3, [r7, #10]
 8004942:	11db      	asrs	r3, r3, #7
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f003 0306 	and.w	r3, r3, #6
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f063 030e 	orn	r3, r3, #14
 8004950:	b2da      	uxtb	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	4907      	ldr	r1, [pc, #28]	; (800497c <I2C_MasterRequestRead+0x198>)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f9e3 	bl	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	00010008 	.word	0x00010008
 800497c:	00010002 	.word	0x00010002

08004980 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	4608      	mov	r0, r1
 800498a:	4611      	mov	r1, r2
 800498c:	461a      	mov	r2, r3
 800498e:	4603      	mov	r3, r0
 8004990:	817b      	strh	r3, [r7, #10]
 8004992:	460b      	mov	r3, r1
 8004994:	813b      	strh	r3, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f960 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d0:	d103      	bne.n	80049da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e05f      	b.n	8004a9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049de:	897b      	ldrh	r3, [r7, #10]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	6a3a      	ldr	r2, [r7, #32]
 80049f2:	492d      	ldr	r1, [pc, #180]	; (8004aa8 <I2C_RequestMemoryWrite+0x128>)
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f998 	bl	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e04c      	b.n	8004a9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1c:	6a39      	ldr	r1, [r7, #32]
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fa02 	bl	8004e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00d      	beq.n	8004a46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d107      	bne.n	8004a42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e02b      	b.n	8004a9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d105      	bne.n	8004a58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4c:	893b      	ldrh	r3, [r7, #8]
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	611a      	str	r2, [r3, #16]
 8004a56:	e021      	b.n	8004a9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a58:	893b      	ldrh	r3, [r7, #8]
 8004a5a:	0a1b      	lsrs	r3, r3, #8
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a68:	6a39      	ldr	r1, [r7, #32]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f9dc 	bl	8004e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00d      	beq.n	8004a92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d107      	bne.n	8004a8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e005      	b.n	8004a9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a92:	893b      	ldrh	r3, [r7, #8]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	00010002 	.word	0x00010002

08004aac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	817b      	strh	r3, [r7, #10]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	813b      	strh	r3, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f8c2 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0c:	d103      	bne.n	8004b16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0aa      	b.n	8004c70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b1a:	897b      	ldrh	r3, [r7, #10]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	4952      	ldr	r1, [pc, #328]	; (8004c78 <I2C_RequestMemoryRead+0x1cc>)
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f8fa 	bl	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e097      	b.n	8004c70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b58:	6a39      	ldr	r1, [r7, #32]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f964 	bl	8004e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00d      	beq.n	8004b82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d107      	bne.n	8004b7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e076      	b.n	8004c70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d105      	bne.n	8004b94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b88:	893b      	ldrh	r3, [r7, #8]
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	611a      	str	r2, [r3, #16]
 8004b92:	e021      	b.n	8004bd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba4:	6a39      	ldr	r1, [r7, #32]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f93e 	bl	8004e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00d      	beq.n	8004bce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	d107      	bne.n	8004bca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e050      	b.n	8004c70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bce:	893b      	ldrh	r3, [r7, #8]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	6a39      	ldr	r1, [r7, #32]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f923 	bl	8004e28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00d      	beq.n	8004c04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d107      	bne.n	8004c00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e035      	b.n	8004c70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f82b 	bl	8004c7c <I2C_WaitOnFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3a:	d103      	bne.n	8004c44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e013      	b.n	8004c70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c48:	897b      	ldrh	r3, [r7, #10]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	6a3a      	ldr	r2, [r7, #32]
 8004c5c:	4906      	ldr	r1, [pc, #24]	; (8004c78 <I2C_RequestMemoryRead+0x1cc>)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f863 	bl	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	00010002 	.word	0x00010002

08004c7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c8c:	e025      	b.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d021      	beq.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fd ff39 	bl	8002b0c <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d116      	bne.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f043 0220 	orr.w	r2, r3, #32
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e023      	b.n	8004d22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10d      	bne.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	43da      	mvns	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf0c      	ite	eq
 8004cf6:	2301      	moveq	r3, #1
 8004cf8:	2300      	movne	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	e00c      	b.n	8004d1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	43da      	mvns	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	bf0c      	ite	eq
 8004d12:	2301      	moveq	r3, #1
 8004d14:	2300      	movne	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d0b6      	beq.n	8004c8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d38:	e051      	b.n	8004dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d48:	d123      	bne.n	8004d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f043 0204 	orr.w	r2, r3, #4
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e046      	b.n	8004e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d021      	beq.n	8004dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9a:	f7fd feb7 	bl	8002b0c <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d116      	bne.n	8004dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f043 0220 	orr.w	r2, r3, #32
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e020      	b.n	8004e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d10c      	bne.n	8004e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	43da      	mvns	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf14      	ite	ne
 8004dfa:	2301      	movne	r3, #1
 8004dfc:	2300      	moveq	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	e00b      	b.n	8004e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	43da      	mvns	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d18d      	bne.n	8004d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e34:	e02d      	b.n	8004e92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f8ce 	bl	8004fd8 <I2C_IsAcknowledgeFailed>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e02d      	b.n	8004ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d021      	beq.n	8004e92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4e:	f7fd fe5d 	bl	8002b0c <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d302      	bcc.n	8004e64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d116      	bne.n	8004e92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e007      	b.n	8004ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e9c:	2b80      	cmp	r3, #128	; 0x80
 8004e9e:	d1ca      	bne.n	8004e36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eb6:	e02d      	b.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f88d 	bl	8004fd8 <I2C_IsAcknowledgeFailed>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e02d      	b.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d021      	beq.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed0:	f7fd fe1c 	bl	8002b0c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d302      	bcc.n	8004ee6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d116      	bne.n	8004f14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	f043 0220 	orr.w	r2, r3, #32
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e007      	b.n	8004f24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d1ca      	bne.n	8004eb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f38:	e042      	b.n	8004fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b10      	cmp	r3, #16
 8004f46:	d119      	bne.n	8004f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0210 	mvn.w	r2, #16
 8004f50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e029      	b.n	8004fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7c:	f7fd fdc6 	bl	8002b0c <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d302      	bcc.n	8004f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d116      	bne.n	8004fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	f043 0220 	orr.w	r2, r3, #32
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e007      	b.n	8004fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d1b5      	bne.n	8004f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fee:	d11b      	bne.n	8005028 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ff8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	f043 0204 	orr.w	r2, r3, #4
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e26c      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 8087 	beq.w	8005162 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005054:	4b92      	ldr	r3, [pc, #584]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 030c 	and.w	r3, r3, #12
 800505c:	2b04      	cmp	r3, #4
 800505e:	d00c      	beq.n	800507a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005060:	4b8f      	ldr	r3, [pc, #572]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f003 030c 	and.w	r3, r3, #12
 8005068:	2b08      	cmp	r3, #8
 800506a:	d112      	bne.n	8005092 <HAL_RCC_OscConfig+0x5e>
 800506c:	4b8c      	ldr	r3, [pc, #560]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005078:	d10b      	bne.n	8005092 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507a:	4b89      	ldr	r3, [pc, #548]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d06c      	beq.n	8005160 <HAL_RCC_OscConfig+0x12c>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d168      	bne.n	8005160 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e246      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509a:	d106      	bne.n	80050aa <HAL_RCC_OscConfig+0x76>
 800509c:	4b80      	ldr	r3, [pc, #512]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a7f      	ldr	r2, [pc, #508]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	e02e      	b.n	8005108 <HAL_RCC_OscConfig+0xd4>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10c      	bne.n	80050cc <HAL_RCC_OscConfig+0x98>
 80050b2:	4b7b      	ldr	r3, [pc, #492]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7a      	ldr	r2, [pc, #488]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	4b78      	ldr	r3, [pc, #480]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a77      	ldr	r2, [pc, #476]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	e01d      	b.n	8005108 <HAL_RCC_OscConfig+0xd4>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d4:	d10c      	bne.n	80050f0 <HAL_RCC_OscConfig+0xbc>
 80050d6:	4b72      	ldr	r3, [pc, #456]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a71      	ldr	r2, [pc, #452]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	4b6f      	ldr	r3, [pc, #444]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a6e      	ldr	r2, [pc, #440]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	e00b      	b.n	8005108 <HAL_RCC_OscConfig+0xd4>
 80050f0:	4b6b      	ldr	r3, [pc, #428]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a6a      	ldr	r2, [pc, #424]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	4b68      	ldr	r3, [pc, #416]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a67      	ldr	r2, [pc, #412]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 8005102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005106:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d013      	beq.n	8005138 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005110:	f7fd fcfc 	bl	8002b0c <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005118:	f7fd fcf8 	bl	8002b0c <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b64      	cmp	r3, #100	; 0x64
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e1fa      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512a:	4b5d      	ldr	r3, [pc, #372]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCC_OscConfig+0xe4>
 8005136:	e014      	b.n	8005162 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fd fce8 	bl	8002b0c <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005140:	f7fd fce4 	bl	8002b0c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b64      	cmp	r3, #100	; 0x64
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e1e6      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005152:	4b53      	ldr	r3, [pc, #332]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x10c>
 800515e:	e000      	b.n	8005162 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d063      	beq.n	8005236 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800516e:	4b4c      	ldr	r3, [pc, #304]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f003 030c 	and.w	r3, r3, #12
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00b      	beq.n	8005192 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800517a:	4b49      	ldr	r3, [pc, #292]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	2b08      	cmp	r3, #8
 8005184:	d11c      	bne.n	80051c0 <HAL_RCC_OscConfig+0x18c>
 8005186:	4b46      	ldr	r3, [pc, #280]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d116      	bne.n	80051c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005192:	4b43      	ldr	r3, [pc, #268]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <HAL_RCC_OscConfig+0x176>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d001      	beq.n	80051aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e1ba      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051aa:	4b3d      	ldr	r3, [pc, #244]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4939      	ldr	r1, [pc, #228]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051be:	e03a      	b.n	8005236 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d020      	beq.n	800520a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c8:	4b36      	ldr	r3, [pc, #216]	; (80052a4 <HAL_RCC_OscConfig+0x270>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fd fc9d 	bl	8002b0c <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d6:	f7fd fc99 	bl	8002b0c <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e19b      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e8:	4b2d      	ldr	r3, [pc, #180]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f4:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4927      	ldr	r1, [pc, #156]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 8005204:	4313      	orrs	r3, r2
 8005206:	600b      	str	r3, [r1, #0]
 8005208:	e015      	b.n	8005236 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800520a:	4b26      	ldr	r3, [pc, #152]	; (80052a4 <HAL_RCC_OscConfig+0x270>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005210:	f7fd fc7c 	bl	8002b0c <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005218:	f7fd fc78 	bl	8002b0c <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e17a      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800522a:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d03a      	beq.n	80052b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d019      	beq.n	800527e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800524a:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <HAL_RCC_OscConfig+0x274>)
 800524c:	2201      	movs	r2, #1
 800524e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005250:	f7fd fc5c 	bl	8002b0c <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005258:	f7fd fc58 	bl	8002b0c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e15a      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526a:	4b0d      	ldr	r3, [pc, #52]	; (80052a0 <HAL_RCC_OscConfig+0x26c>)
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005276:	2001      	movs	r0, #1
 8005278:	f000 fac6 	bl	8005808 <RCC_Delay>
 800527c:	e01c      	b.n	80052b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <HAL_RCC_OscConfig+0x274>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005284:	f7fd fc42 	bl	8002b0c <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800528a:	e00f      	b.n	80052ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528c:	f7fd fc3e 	bl	8002b0c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d908      	bls.n	80052ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e140      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
 800529e:	bf00      	nop
 80052a0:	40021000 	.word	0x40021000
 80052a4:	42420000 	.word	0x42420000
 80052a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ac:	4b9e      	ldr	r3, [pc, #632]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e9      	bne.n	800528c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80a6 	beq.w	8005412 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ca:	4b97      	ldr	r3, [pc, #604]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10d      	bne.n	80052f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d6:	4b94      	ldr	r3, [pc, #592]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	4a93      	ldr	r2, [pc, #588]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 80052dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e0:	61d3      	str	r3, [r2, #28]
 80052e2:	4b91      	ldr	r3, [pc, #580]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ea:	60bb      	str	r3, [r7, #8]
 80052ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f2:	4b8e      	ldr	r3, [pc, #568]	; (800552c <HAL_RCC_OscConfig+0x4f8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d118      	bne.n	8005330 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052fe:	4b8b      	ldr	r3, [pc, #556]	; (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a8a      	ldr	r2, [pc, #552]	; (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800530a:	f7fd fbff 	bl	8002b0c <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005312:	f7fd fbfb 	bl	8002b0c <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b64      	cmp	r3, #100	; 0x64
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e0fd      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005324:	4b81      	ldr	r3, [pc, #516]	; (800552c <HAL_RCC_OscConfig+0x4f8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0f0      	beq.n	8005312 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d106      	bne.n	8005346 <HAL_RCC_OscConfig+0x312>
 8005338:	4b7b      	ldr	r3, [pc, #492]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4a7a      	ldr	r2, [pc, #488]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	6213      	str	r3, [r2, #32]
 8005344:	e02d      	b.n	80053a2 <HAL_RCC_OscConfig+0x36e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10c      	bne.n	8005368 <HAL_RCC_OscConfig+0x334>
 800534e:	4b76      	ldr	r3, [pc, #472]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	4a75      	ldr	r2, [pc, #468]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	6213      	str	r3, [r2, #32]
 800535a:	4b73      	ldr	r3, [pc, #460]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	4a72      	ldr	r2, [pc, #456]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005360:	f023 0304 	bic.w	r3, r3, #4
 8005364:	6213      	str	r3, [r2, #32]
 8005366:	e01c      	b.n	80053a2 <HAL_RCC_OscConfig+0x36e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	2b05      	cmp	r3, #5
 800536e:	d10c      	bne.n	800538a <HAL_RCC_OscConfig+0x356>
 8005370:	4b6d      	ldr	r3, [pc, #436]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	4a6c      	ldr	r2, [pc, #432]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005376:	f043 0304 	orr.w	r3, r3, #4
 800537a:	6213      	str	r3, [r2, #32]
 800537c:	4b6a      	ldr	r3, [pc, #424]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	4a69      	ldr	r2, [pc, #420]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6213      	str	r3, [r2, #32]
 8005388:	e00b      	b.n	80053a2 <HAL_RCC_OscConfig+0x36e>
 800538a:	4b67      	ldr	r3, [pc, #412]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	4a66      	ldr	r2, [pc, #408]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6213      	str	r3, [r2, #32]
 8005396:	4b64      	ldr	r3, [pc, #400]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	4a63      	ldr	r2, [pc, #396]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 800539c:	f023 0304 	bic.w	r3, r3, #4
 80053a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d015      	beq.n	80053d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053aa:	f7fd fbaf 	bl	8002b0c <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b0:	e00a      	b.n	80053c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b2:	f7fd fbab 	bl	8002b0c <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0ab      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c8:	4b57      	ldr	r3, [pc, #348]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0ee      	beq.n	80053b2 <HAL_RCC_OscConfig+0x37e>
 80053d4:	e014      	b.n	8005400 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d6:	f7fd fb99 	bl	8002b0c <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053dc:	e00a      	b.n	80053f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fd fb95 	bl	8002b0c <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e095      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f4:	4b4c      	ldr	r3, [pc, #304]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ee      	bne.n	80053de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d105      	bne.n	8005412 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005406:	4b48      	ldr	r3, [pc, #288]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	4a47      	ldr	r2, [pc, #284]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 800540c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005410:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8081 	beq.w	800551e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800541c:	4b42      	ldr	r3, [pc, #264]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 030c 	and.w	r3, r3, #12
 8005424:	2b08      	cmp	r3, #8
 8005426:	d061      	beq.n	80054ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d146      	bne.n	80054be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005430:	4b3f      	ldr	r3, [pc, #252]	; (8005530 <HAL_RCC_OscConfig+0x4fc>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005436:	f7fd fb69 	bl	8002b0c <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543e:	f7fd fb65 	bl	8002b0c <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e067      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005450:	4b35      	ldr	r3, [pc, #212]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f0      	bne.n	800543e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005464:	d108      	bne.n	8005478 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005466:	4b30      	ldr	r3, [pc, #192]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	492d      	ldr	r1, [pc, #180]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 8005474:	4313      	orrs	r3, r2
 8005476:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005478:	4b2b      	ldr	r3, [pc, #172]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a19      	ldr	r1, [r3, #32]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	430b      	orrs	r3, r1
 800548a:	4927      	ldr	r1, [pc, #156]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 800548c:	4313      	orrs	r3, r2
 800548e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005490:	4b27      	ldr	r3, [pc, #156]	; (8005530 <HAL_RCC_OscConfig+0x4fc>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005496:	f7fd fb39 	bl	8002b0c <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549e:	f7fd fb35 	bl	8002b0c <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e037      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCC_OscConfig+0x46a>
 80054bc:	e02f      	b.n	800551e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054be:	4b1c      	ldr	r3, [pc, #112]	; (8005530 <HAL_RCC_OscConfig+0x4fc>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c4:	f7fd fb22 	bl	8002b0c <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054cc:	f7fd fb1e 	bl	8002b0c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e020      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054de:	4b12      	ldr	r3, [pc, #72]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f0      	bne.n	80054cc <HAL_RCC_OscConfig+0x498>
 80054ea:	e018      	b.n	800551e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e013      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054f8:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <HAL_RCC_OscConfig+0x4f4>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	429a      	cmp	r2, r3
 800550a:	d106      	bne.n	800551a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005516:	429a      	cmp	r2, r3
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021000 	.word	0x40021000
 800552c:	40007000 	.word	0x40007000
 8005530:	42420060 	.word	0x42420060

08005534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0d0      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b6a      	ldr	r3, [pc, #424]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d910      	bls.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b67      	ldr	r3, [pc, #412]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 0207 	bic.w	r2, r3, #7
 800555e:	4965      	ldr	r1, [pc, #404]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b63      	ldr	r3, [pc, #396]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0b8      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d020      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005590:	4b59      	ldr	r3, [pc, #356]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4a58      	ldr	r2, [pc, #352]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005596:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800559a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055a8:	4b53      	ldr	r3, [pc, #332]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a52      	ldr	r2, [pc, #328]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80055b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b4:	4b50      	ldr	r3, [pc, #320]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	494d      	ldr	r1, [pc, #308]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d040      	beq.n	8005654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d107      	bne.n	80055ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055da:	4b47      	ldr	r3, [pc, #284]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d115      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e07f      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f2:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e073      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005602:	4b3d      	ldr	r3, [pc, #244]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e06b      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005612:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4936      	ldr	r1, [pc, #216]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005620:	4313      	orrs	r3, r2
 8005622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005624:	f7fd fa72 	bl	8002b0c <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7fd fa6e 	bl	8002b0c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	; 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e053      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f003 020c 	and.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d1eb      	bne.n	800562c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005654:	4b27      	ldr	r3, [pc, #156]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d210      	bcs.n	8005684 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 0207 	bic.w	r2, r3, #7
 800566a:	4922      	ldr	r1, [pc, #136]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005672:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e032      	b.n	80056ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005690:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	4916      	ldr	r1, [pc, #88]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	490e      	ldr	r1, [pc, #56]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056c2:	f000 f821 	bl	8005708 <HAL_RCC_GetSysClockFreq>
 80056c6:	4601      	mov	r1, r0
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <HAL_RCC_ClockConfig+0x1c8>)
 80056d4:	5cd3      	ldrb	r3, [r2, r3]
 80056d6:	fa21 f303 	lsr.w	r3, r1, r3
 80056da:	4a09      	ldr	r2, [pc, #36]	; (8005700 <HAL_RCC_ClockConfig+0x1cc>)
 80056dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80056de:	4b09      	ldr	r3, [pc, #36]	; (8005704 <HAL_RCC_ClockConfig+0x1d0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fd f9d0 	bl	8002a88 <HAL_InitTick>

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40022000 	.word	0x40022000
 80056f8:	40021000 	.word	0x40021000
 80056fc:	08007324 	.word	0x08007324
 8005700:	20000018 	.word	0x20000018
 8005704:	2000001c 	.word	0x2000001c

08005708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005708:	b490      	push	{r4, r7}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800570e:	4b2a      	ldr	r3, [pc, #168]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005710:	1d3c      	adds	r4, r7, #4
 8005712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005714:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005718:	4b28      	ldr	r3, [pc, #160]	; (80057bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	2300      	movs	r3, #0
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005732:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b04      	cmp	r3, #4
 8005740:	d002      	beq.n	8005748 <HAL_RCC_GetSysClockFreq+0x40>
 8005742:	2b08      	cmp	r3, #8
 8005744:	d003      	beq.n	800574e <HAL_RCC_GetSysClockFreq+0x46>
 8005746:	e02d      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005748:	4b1e      	ldr	r3, [pc, #120]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800574a:	623b      	str	r3, [r7, #32]
      break;
 800574c:	e02d      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	0c9b      	lsrs	r3, r3, #18
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800575a:	4413      	add	r3, r2
 800575c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005760:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d013      	beq.n	8005794 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800576c:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	0c5b      	lsrs	r3, r3, #17
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800577a:	4413      	add	r3, r2
 800577c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005780:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	4a0f      	ldr	r2, [pc, #60]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005786:	fb02 f203 	mul.w	r2, r2, r3
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
 8005792:	e004      	b.n	800579e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4a0c      	ldr	r2, [pc, #48]	; (80057c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005798:	fb02 f303 	mul.w	r3, r2, r3
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	623b      	str	r3, [r7, #32]
      break;
 80057a2:	e002      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057a4:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057a6:	623b      	str	r3, [r7, #32]
      break;
 80057a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057aa:	6a3b      	ldr	r3, [r7, #32]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3728      	adds	r7, #40	; 0x28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc90      	pop	{r4, r7}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	08007310 	.word	0x08007310
 80057bc:	08007320 	.word	0x08007320
 80057c0:	40021000 	.word	0x40021000
 80057c4:	007a1200 	.word	0x007a1200
 80057c8:	003d0900 	.word	0x003d0900

080057cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d0:	4b02      	ldr	r3, [pc, #8]	; (80057dc <HAL_RCC_GetHCLKFreq+0x10>)
 80057d2:	681b      	ldr	r3, [r3, #0]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	20000018 	.word	0x20000018

080057e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057e4:	f7ff fff2 	bl	80057cc <HAL_RCC_GetHCLKFreq>
 80057e8:	4601      	mov	r1, r0
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4a03      	ldr	r2, [pc, #12]	; (8005804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f6:	5cd3      	ldrb	r3, [r2, r3]
 80057f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40021000 	.word	0x40021000
 8005804:	08007334 	.word	0x08007334

08005808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <RCC_Delay+0x34>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <RCC_Delay+0x38>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	0a5b      	lsrs	r3, r3, #9
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005824:	bf00      	nop
  }
  while (Delay --);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1e5a      	subs	r2, r3, #1
 800582a:	60fa      	str	r2, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f9      	bne.n	8005824 <RCC_Delay+0x1c>
}
 8005830:	bf00      	nop
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20000018 	.word	0x20000018
 8005840:	10624dd3 	.word	0x10624dd3

08005844 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d07d      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005860:	2300      	movs	r3, #0
 8005862:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005864:	4b4f      	ldr	r3, [pc, #316]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10d      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005870:	4b4c      	ldr	r3, [pc, #304]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	4a4b      	ldr	r2, [pc, #300]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587a:	61d3      	str	r3, [r2, #28]
 800587c:	4b49      	ldr	r3, [pc, #292]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005888:	2301      	movs	r3, #1
 800588a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588c:	4b46      	ldr	r3, [pc, #280]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d118      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005898:	4b43      	ldr	r3, [pc, #268]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a42      	ldr	r2, [pc, #264]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800589e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058a4:	f7fd f932 	bl	8002b0c <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058aa:	e008      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ac:	f7fd f92e 	bl	8002b0c <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	; 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e06d      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058be:	4b3a      	ldr	r3, [pc, #232]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ca:	4b36      	ldr	r3, [pc, #216]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d02e      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d027      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058e8:	4b2e      	ldr	r3, [pc, #184]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058f2:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058f8:	4b2c      	ldr	r3, [pc, #176]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058fe:	4a29      	ldr	r2, [pc, #164]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d014      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590e:	f7fd f8fd 	bl	8002b0c <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005914:	e00a      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fd f8f9 	bl	8002b0c <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f241 3288 	movw	r2, #5000	; 0x1388
 8005924:	4293      	cmp	r3, r2
 8005926:	d901      	bls.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e036      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	4b1d      	ldr	r3, [pc, #116]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0ee      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005938:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4917      	ldr	r1, [pc, #92]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005946:	4313      	orrs	r3, r2
 8005948:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d105      	bne.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005950:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005968:	4b0e      	ldr	r3, [pc, #56]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	490b      	ldr	r1, [pc, #44]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005976:	4313      	orrs	r3, r2
 8005978:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005986:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	4904      	ldr	r1, [pc, #16]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005994:	4313      	orrs	r3, r2
 8005996:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40007000 	.word	0x40007000
 80059ac:	42420440 	.word	0x42420440

080059b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e041      	b.n	8005a46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fc ff7a 	bl	80028d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f000 fad8 	bl	8005fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d001      	beq.n	8005a68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e02d      	b.n	8005ac4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a78:	d009      	beq.n	8005a8e <HAL_TIM_Base_Start+0x3e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a14      	ldr	r2, [pc, #80]	; (8005ad0 <HAL_TIM_Base_Start+0x80>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d004      	beq.n	8005a8e <HAL_TIM_Base_Start+0x3e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a12      	ldr	r2, [pc, #72]	; (8005ad4 <HAL_TIM_Base_Start+0x84>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d111      	bne.n	8005ab2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2b06      	cmp	r3, #6
 8005a9e:	d010      	beq.n	8005ac2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab0:	e007      	b.n	8005ac2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800

08005ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d001      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e035      	b.n	8005b5c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b10:	d009      	beq.n	8005b26 <HAL_TIM_Base_Start_IT+0x4e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <HAL_TIM_Base_Start_IT+0x90>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_TIM_Base_Start_IT+0x4e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <HAL_TIM_Base_Start_IT+0x94>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d111      	bne.n	8005b4a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d010      	beq.n	8005b5a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b48:	e007      	b.n	8005b5a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bc80      	pop	{r7}
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800

08005b70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6a1a      	ldr	r2, [r3, #32]
 8005b8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b92:	4013      	ands	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10f      	bne.n	8005bb8 <HAL_TIM_Base_Stop_IT+0x48>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	f240 4344 	movw	r3, #1092	; 0x444
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d107      	bne.n	8005bb8 <HAL_TIM_Base_Stop_IT+0x48>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0201 	bic.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d122      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d11b      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0202 	mvn.w	r2, #2
 8005bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9ad 	bl	8005f6e <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f9a0 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f9af 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d122      	bne.n	8005c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d11b      	bne.n	8005c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0204 	mvn.w	r2, #4
 8005c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2202      	movs	r2, #2
 8005c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f983 	bl	8005f6e <HAL_TIM_IC_CaptureCallback>
 8005c68:	e005      	b.n	8005c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f976 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f985 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d122      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d11b      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0208 	mvn.w	r2, #8
 8005ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2204      	movs	r2, #4
 8005ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f959 	bl	8005f6e <HAL_TIM_IC_CaptureCallback>
 8005cbc:	e005      	b.n	8005cca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f94c 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f95b 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b10      	cmp	r3, #16
 8005cdc:	d122      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d11b      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0210 	mvn.w	r2, #16
 8005cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f92f 	bl	8005f6e <HAL_TIM_IC_CaptureCallback>
 8005d10:	e005      	b.n	8005d1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f922 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f931 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d10e      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d107      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0201 	mvn.w	r2, #1
 8005d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f8fd 	bl	8005f4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d10e      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d68:	2b80      	cmp	r3, #128	; 0x80
 8005d6a:	d107      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa5b 	bl	8006232 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d10e      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	d107      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f8f5 	bl	8005f92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d10e      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d107      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0220 	mvn.w	r2, #32
 8005dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa26 	bl	8006220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d101      	bne.n	8005df4 <HAL_TIM_ConfigClockSource+0x18>
 8005df0:	2302      	movs	r3, #2
 8005df2:	e0a6      	b.n	8005f42 <HAL_TIM_ConfigClockSource+0x166>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b40      	cmp	r3, #64	; 0x40
 8005e2a:	d067      	beq.n	8005efc <HAL_TIM_ConfigClockSource+0x120>
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	d80b      	bhi.n	8005e48 <HAL_TIM_ConfigClockSource+0x6c>
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	d073      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x140>
 8005e34:	2b10      	cmp	r3, #16
 8005e36:	d802      	bhi.n	8005e3e <HAL_TIM_ConfigClockSource+0x62>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d06f      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e3c:	e078      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e3e:	2b20      	cmp	r3, #32
 8005e40:	d06c      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x140>
 8005e42:	2b30      	cmp	r3, #48	; 0x30
 8005e44:	d06a      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e46:	e073      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e48:	2b70      	cmp	r3, #112	; 0x70
 8005e4a:	d00d      	beq.n	8005e68 <HAL_TIM_ConfigClockSource+0x8c>
 8005e4c:	2b70      	cmp	r3, #112	; 0x70
 8005e4e:	d804      	bhi.n	8005e5a <HAL_TIM_ConfigClockSource+0x7e>
 8005e50:	2b50      	cmp	r3, #80	; 0x50
 8005e52:	d033      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0xe0>
 8005e54:	2b60      	cmp	r3, #96	; 0x60
 8005e56:	d041      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005e58:	e06a      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5e:	d066      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0x152>
 8005e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e64:	d017      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005e66:	e063      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	6899      	ldr	r1, [r3, #8]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f000 f95b 	bl	8006132 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	609a      	str	r2, [r3, #8]
      break;
 8005e94:	e04c      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6899      	ldr	r1, [r3, #8]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f000 f944 	bl	8006132 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eb8:	609a      	str	r2, [r3, #8]
      break;
 8005eba:	e039      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f000 f8bb 	bl	8006044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2150      	movs	r1, #80	; 0x50
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 f912 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005eda:	e029      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	6859      	ldr	r1, [r3, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f000 f8d9 	bl	80060a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2160      	movs	r1, #96	; 0x60
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f902 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005efa:	e019      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f000 f89b 	bl	8006044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2140      	movs	r1, #64	; 0x40
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 f8f2 	bl	80060fe <TIM_ITRx_SetConfig>
      break;
 8005f1a:	e009      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f000 f8e9 	bl	80060fe <TIM_ITRx_SetConfig>
        break;
 8005f2c:	e000      	b.n	8005f30 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bc80      	pop	{r7}
 8005f6c:	4770      	bx	lr

08005f6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr

08005f92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d007      	beq.n	8005fcc <TIM_Base_SetConfig+0x28>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a1f      	ldr	r2, [pc, #124]	; (800603c <TIM_Base_SetConfig+0x98>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d003      	beq.n	8005fcc <TIM_Base_SetConfig+0x28>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <TIM_Base_SetConfig+0x9c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d108      	bne.n	8005fde <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe4:	d007      	beq.n	8005ff6 <TIM_Base_SetConfig+0x52>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a14      	ldr	r2, [pc, #80]	; (800603c <TIM_Base_SetConfig+0x98>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d003      	beq.n	8005ff6 <TIM_Base_SetConfig+0x52>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a13      	ldr	r2, [pc, #76]	; (8006040 <TIM_Base_SetConfig+0x9c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d108      	bne.n	8006008 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	615a      	str	r2, [r3, #20]
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	bc80      	pop	{r7}
 800603a:	4770      	bx	lr
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800

08006044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f023 0201 	bic.w	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f023 030a 	bic.w	r3, r3, #10
 8006080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr

080060a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f023 0210 	bic.w	r2, r3, #16
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	031b      	lsls	r3, r3, #12
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	621a      	str	r2, [r3, #32]
}
 80060f4:	bf00      	nop
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	f043 0307 	orr.w	r3, r3, #7
 8006120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	609a      	str	r2, [r3, #8]
}
 8006128:	bf00      	nop
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	bc80      	pop	{r7}
 8006130:	4770      	bx	lr

08006132 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006132:	b480      	push	{r7}
 8006134:	b087      	sub	sp, #28
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800614c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	021a      	lsls	r2, r3, #8
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	431a      	orrs	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	4313      	orrs	r3, r2
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	609a      	str	r2, [r3, #8]
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	bc80      	pop	{r7}
 800616e:	4770      	bx	lr

08006170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006184:	2302      	movs	r3, #2
 8006186:	e041      	b.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ca:	d009      	beq.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a11      	ldr	r2, [pc, #68]	; (8006218 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a10      	ldr	r2, [pc, #64]	; (800621c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10c      	bne.n	80061fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40000400 	.word	0x40000400
 800621c:	40000800 	.word	0x40000800

08006220 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	bc80      	pop	{r7}
 8006230:	4770      	bx	lr

08006232 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr

08006244 <__errno>:
 8006244:	4b01      	ldr	r3, [pc, #4]	; (800624c <__errno+0x8>)
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	20000024 	.word	0x20000024

08006250 <__libc_init_array>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	2500      	movs	r5, #0
 8006254:	4e0c      	ldr	r6, [pc, #48]	; (8006288 <__libc_init_array+0x38>)
 8006256:	4c0d      	ldr	r4, [pc, #52]	; (800628c <__libc_init_array+0x3c>)
 8006258:	1ba4      	subs	r4, r4, r6
 800625a:	10a4      	asrs	r4, r4, #2
 800625c:	42a5      	cmp	r5, r4
 800625e:	d109      	bne.n	8006274 <__libc_init_array+0x24>
 8006260:	f001 f84a 	bl	80072f8 <_init>
 8006264:	2500      	movs	r5, #0
 8006266:	4e0a      	ldr	r6, [pc, #40]	; (8006290 <__libc_init_array+0x40>)
 8006268:	4c0a      	ldr	r4, [pc, #40]	; (8006294 <__libc_init_array+0x44>)
 800626a:	1ba4      	subs	r4, r4, r6
 800626c:	10a4      	asrs	r4, r4, #2
 800626e:	42a5      	cmp	r5, r4
 8006270:	d105      	bne.n	800627e <__libc_init_array+0x2e>
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006278:	4798      	blx	r3
 800627a:	3501      	adds	r5, #1
 800627c:	e7ee      	b.n	800625c <__libc_init_array+0xc>
 800627e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006282:	4798      	blx	r3
 8006284:	3501      	adds	r5, #1
 8006286:	e7f2      	b.n	800626e <__libc_init_array+0x1e>
 8006288:	08007380 	.word	0x08007380
 800628c:	08007380 	.word	0x08007380
 8006290:	08007380 	.word	0x08007380
 8006294:	08007384 	.word	0x08007384

08006298 <memset>:
 8006298:	4603      	mov	r3, r0
 800629a:	4402      	add	r2, r0
 800629c:	4293      	cmp	r3, r2
 800629e:	d100      	bne.n	80062a2 <memset+0xa>
 80062a0:	4770      	bx	lr
 80062a2:	f803 1b01 	strb.w	r1, [r3], #1
 80062a6:	e7f9      	b.n	800629c <memset+0x4>

080062a8 <pow>:
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	b08f      	sub	sp, #60	; 0x3c
 80062ae:	461d      	mov	r5, r3
 80062b0:	4680      	mov	r8, r0
 80062b2:	4689      	mov	r9, r1
 80062b4:	4614      	mov	r4, r2
 80062b6:	f000 f953 	bl	8006560 <__ieee754_pow>
 80062ba:	4fa1      	ldr	r7, [pc, #644]	; (8006540 <pow+0x298>)
 80062bc:	e9cd 0100 	strd	r0, r1, [sp]
 80062c0:	f997 3000 	ldrsb.w	r3, [r7]
 80062c4:	463e      	mov	r6, r7
 80062c6:	9302      	str	r3, [sp, #8]
 80062c8:	3301      	adds	r3, #1
 80062ca:	d05f      	beq.n	800638c <pow+0xe4>
 80062cc:	4622      	mov	r2, r4
 80062ce:	462b      	mov	r3, r5
 80062d0:	4620      	mov	r0, r4
 80062d2:	4629      	mov	r1, r5
 80062d4:	f7fa fb92 	bl	80009fc <__aeabi_dcmpun>
 80062d8:	4682      	mov	sl, r0
 80062da:	2800      	cmp	r0, #0
 80062dc:	d156      	bne.n	800638c <pow+0xe4>
 80062de:	4642      	mov	r2, r8
 80062e0:	464b      	mov	r3, r9
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7fa fb89 	bl	80009fc <__aeabi_dcmpun>
 80062ea:	9003      	str	r0, [sp, #12]
 80062ec:	b1e8      	cbz	r0, 800632a <pow+0x82>
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	4620      	mov	r0, r4
 80062f4:	4629      	mov	r1, r5
 80062f6:	f7fa fb4f 	bl	8000998 <__aeabi_dcmpeq>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	d046      	beq.n	800638c <pow+0xe4>
 80062fe:	2301      	movs	r3, #1
 8006300:	2200      	movs	r2, #0
 8006302:	9304      	str	r3, [sp, #16]
 8006304:	4b8f      	ldr	r3, [pc, #572]	; (8006544 <pow+0x29c>)
 8006306:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800630a:	9305      	str	r3, [sp, #20]
 800630c:	4b8e      	ldr	r3, [pc, #568]	; (8006548 <pow+0x2a0>)
 800630e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006312:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006316:	9b02      	ldr	r3, [sp, #8]
 8006318:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d031      	beq.n	8006384 <pow+0xdc>
 8006320:	a804      	add	r0, sp, #16
 8006322:	f000 fedd 	bl	80070e0 <matherr>
 8006326:	bb38      	cbnz	r0, 8006378 <pow+0xd0>
 8006328:	e058      	b.n	80063dc <pow+0x134>
 800632a:	f04f 0a00 	mov.w	sl, #0
 800632e:	f04f 0b00 	mov.w	fp, #0
 8006332:	4652      	mov	r2, sl
 8006334:	465b      	mov	r3, fp
 8006336:	4640      	mov	r0, r8
 8006338:	4649      	mov	r1, r9
 800633a:	f7fa fb2d 	bl	8000998 <__aeabi_dcmpeq>
 800633e:	2800      	cmp	r0, #0
 8006340:	d051      	beq.n	80063e6 <pow+0x13e>
 8006342:	4652      	mov	r2, sl
 8006344:	465b      	mov	r3, fp
 8006346:	4620      	mov	r0, r4
 8006348:	4629      	mov	r1, r5
 800634a:	f7fa fb25 	bl	8000998 <__aeabi_dcmpeq>
 800634e:	4606      	mov	r6, r0
 8006350:	b308      	cbz	r0, 8006396 <pow+0xee>
 8006352:	2301      	movs	r3, #1
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	4b7b      	ldr	r3, [pc, #492]	; (8006544 <pow+0x29c>)
 8006358:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800635c:	9305      	str	r3, [sp, #20]
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006364:	930c      	str	r3, [sp, #48]	; 0x30
 8006366:	9b02      	ldr	r3, [sp, #8]
 8006368:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0d7      	beq.n	8006320 <pow+0x78>
 8006370:	2200      	movs	r2, #0
 8006372:	4b75      	ldr	r3, [pc, #468]	; (8006548 <pow+0x2a0>)
 8006374:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800637a:	b11b      	cbz	r3, 8006384 <pow+0xdc>
 800637c:	f7ff ff62 	bl	8006244 <__errno>
 8006380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006382:	6003      	str	r3, [r0, #0]
 8006384:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8006388:	e9cd 3400 	strd	r3, r4, [sp]
 800638c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006390:	b00f      	add	sp, #60	; 0x3c
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006396:	4620      	mov	r0, r4
 8006398:	4629      	mov	r1, r5
 800639a:	f000 fe9b 	bl	80070d4 <finite>
 800639e:	2800      	cmp	r0, #0
 80063a0:	d0f4      	beq.n	800638c <pow+0xe4>
 80063a2:	4652      	mov	r2, sl
 80063a4:	465b      	mov	r3, fp
 80063a6:	4620      	mov	r0, r4
 80063a8:	4629      	mov	r1, r5
 80063aa:	f7fa faff 	bl	80009ac <__aeabi_dcmplt>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d0ec      	beq.n	800638c <pow+0xe4>
 80063b2:	2301      	movs	r3, #1
 80063b4:	9304      	str	r3, [sp, #16]
 80063b6:	4b63      	ldr	r3, [pc, #396]	; (8006544 <pow+0x29c>)
 80063b8:	960c      	str	r6, [sp, #48]	; 0x30
 80063ba:	9305      	str	r3, [sp, #20]
 80063bc:	f997 3000 	ldrsb.w	r3, [r7]
 80063c0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80063c4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80063c8:	b913      	cbnz	r3, 80063d0 <pow+0x128>
 80063ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80063ce:	e7a7      	b.n	8006320 <pow+0x78>
 80063d0:	2000      	movs	r0, #0
 80063d2:	495e      	ldr	r1, [pc, #376]	; (800654c <pow+0x2a4>)
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063da:	d1a1      	bne.n	8006320 <pow+0x78>
 80063dc:	f7ff ff32 	bl	8006244 <__errno>
 80063e0:	2321      	movs	r3, #33	; 0x21
 80063e2:	6003      	str	r3, [r0, #0]
 80063e4:	e7c8      	b.n	8006378 <pow+0xd0>
 80063e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063ea:	f000 fe73 	bl	80070d4 <finite>
 80063ee:	9002      	str	r0, [sp, #8]
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d177      	bne.n	80064e4 <pow+0x23c>
 80063f4:	4640      	mov	r0, r8
 80063f6:	4649      	mov	r1, r9
 80063f8:	f000 fe6c 	bl	80070d4 <finite>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d071      	beq.n	80064e4 <pow+0x23c>
 8006400:	4620      	mov	r0, r4
 8006402:	4629      	mov	r1, r5
 8006404:	f000 fe66 	bl	80070d4 <finite>
 8006408:	2800      	cmp	r0, #0
 800640a:	d06b      	beq.n	80064e4 <pow+0x23c>
 800640c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006410:	4619      	mov	r1, r3
 8006412:	4610      	mov	r0, r2
 8006414:	f7fa faf2 	bl	80009fc <__aeabi_dcmpun>
 8006418:	f997 7000 	ldrsb.w	r7, [r7]
 800641c:	4b49      	ldr	r3, [pc, #292]	; (8006544 <pow+0x29c>)
 800641e:	b1a0      	cbz	r0, 800644a <pow+0x1a2>
 8006420:	2201      	movs	r2, #1
 8006422:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006426:	9b02      	ldr	r3, [sp, #8]
 8006428:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800642c:	930c      	str	r3, [sp, #48]	; 0x30
 800642e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006432:	2f00      	cmp	r7, #0
 8006434:	d0c9      	beq.n	80063ca <pow+0x122>
 8006436:	4652      	mov	r2, sl
 8006438:	465b      	mov	r3, fp
 800643a:	4650      	mov	r0, sl
 800643c:	4659      	mov	r1, fp
 800643e:	f7fa f96d 	bl	800071c <__aeabi_ddiv>
 8006442:	2f02      	cmp	r7, #2
 8006444:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006448:	e7c7      	b.n	80063da <pow+0x132>
 800644a:	2203      	movs	r2, #3
 800644c:	900c      	str	r0, [sp, #48]	; 0x30
 800644e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006452:	4620      	mov	r0, r4
 8006454:	4629      	mov	r1, r5
 8006456:	2200      	movs	r2, #0
 8006458:	4b3d      	ldr	r3, [pc, #244]	; (8006550 <pow+0x2a8>)
 800645a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800645e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006462:	f7fa f831 	bl	80004c8 <__aeabi_dmul>
 8006466:	4604      	mov	r4, r0
 8006468:	460d      	mov	r5, r1
 800646a:	bb17      	cbnz	r7, 80064b2 <pow+0x20a>
 800646c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006470:	4b38      	ldr	r3, [pc, #224]	; (8006554 <pow+0x2ac>)
 8006472:	4640      	mov	r0, r8
 8006474:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006478:	4649      	mov	r1, r9
 800647a:	4652      	mov	r2, sl
 800647c:	465b      	mov	r3, fp
 800647e:	f7fa fa95 	bl	80009ac <__aeabi_dcmplt>
 8006482:	2800      	cmp	r0, #0
 8006484:	d054      	beq.n	8006530 <pow+0x288>
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	f000 fe31 	bl	80070f0 <rint>
 800648e:	4622      	mov	r2, r4
 8006490:	462b      	mov	r3, r5
 8006492:	f7fa fa81 	bl	8000998 <__aeabi_dcmpeq>
 8006496:	b920      	cbnz	r0, 80064a2 <pow+0x1fa>
 8006498:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800649c:	4b2e      	ldr	r3, [pc, #184]	; (8006558 <pow+0x2b0>)
 800649e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80064a2:	f996 3000 	ldrsb.w	r3, [r6]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d142      	bne.n	8006530 <pow+0x288>
 80064aa:	f7ff fecb 	bl	8006244 <__errno>
 80064ae:	2322      	movs	r3, #34	; 0x22
 80064b0:	e797      	b.n	80063e2 <pow+0x13a>
 80064b2:	2200      	movs	r2, #0
 80064b4:	4b29      	ldr	r3, [pc, #164]	; (800655c <pow+0x2b4>)
 80064b6:	4640      	mov	r0, r8
 80064b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80064bc:	4649      	mov	r1, r9
 80064be:	4652      	mov	r2, sl
 80064c0:	465b      	mov	r3, fp
 80064c2:	f7fa fa73 	bl	80009ac <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d0eb      	beq.n	80064a2 <pow+0x1fa>
 80064ca:	4620      	mov	r0, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	f000 fe0f 	bl	80070f0 <rint>
 80064d2:	4622      	mov	r2, r4
 80064d4:	462b      	mov	r3, r5
 80064d6:	f7fa fa5f 	bl	8000998 <__aeabi_dcmpeq>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d1e1      	bne.n	80064a2 <pow+0x1fa>
 80064de:	2200      	movs	r2, #0
 80064e0:	4b1a      	ldr	r3, [pc, #104]	; (800654c <pow+0x2a4>)
 80064e2:	e7dc      	b.n	800649e <pow+0x1f6>
 80064e4:	2200      	movs	r2, #0
 80064e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064ea:	2300      	movs	r3, #0
 80064ec:	f7fa fa54 	bl	8000998 <__aeabi_dcmpeq>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f43f af4b 	beq.w	800638c <pow+0xe4>
 80064f6:	4640      	mov	r0, r8
 80064f8:	4649      	mov	r1, r9
 80064fa:	f000 fdeb 	bl	80070d4 <finite>
 80064fe:	2800      	cmp	r0, #0
 8006500:	f43f af44 	beq.w	800638c <pow+0xe4>
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f000 fde4 	bl	80070d4 <finite>
 800650c:	2800      	cmp	r0, #0
 800650e:	f43f af3d 	beq.w	800638c <pow+0xe4>
 8006512:	2304      	movs	r3, #4
 8006514:	9304      	str	r3, [sp, #16]
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <pow+0x29c>)
 8006518:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800651c:	9305      	str	r3, [sp, #20]
 800651e:	2300      	movs	r3, #0
 8006520:	2400      	movs	r4, #0
 8006522:	930c      	str	r3, [sp, #48]	; 0x30
 8006524:	2300      	movs	r3, #0
 8006526:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800652a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800652e:	e7b8      	b.n	80064a2 <pow+0x1fa>
 8006530:	a804      	add	r0, sp, #16
 8006532:	f000 fdd5 	bl	80070e0 <matherr>
 8006536:	2800      	cmp	r0, #0
 8006538:	f47f af1e 	bne.w	8006378 <pow+0xd0>
 800653c:	e7b5      	b.n	80064aa <pow+0x202>
 800653e:	bf00      	nop
 8006540:	20000088 	.word	0x20000088
 8006544:	0800733c 	.word	0x0800733c
 8006548:	3ff00000 	.word	0x3ff00000
 800654c:	fff00000 	.word	0xfff00000
 8006550:	3fe00000 	.word	0x3fe00000
 8006554:	47efffff 	.word	0x47efffff
 8006558:	c7efffff 	.word	0xc7efffff
 800655c:	7ff00000 	.word	0x7ff00000

08006560 <__ieee754_pow>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	b091      	sub	sp, #68	; 0x44
 8006566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800656a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800656e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006572:	ea55 0302 	orrs.w	r3, r5, r2
 8006576:	4607      	mov	r7, r0
 8006578:	4688      	mov	r8, r1
 800657a:	f000 84b7 	beq.w	8006eec <__ieee754_pow+0x98c>
 800657e:	4b80      	ldr	r3, [pc, #512]	; (8006780 <__ieee754_pow+0x220>)
 8006580:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006584:	429c      	cmp	r4, r3
 8006586:	4689      	mov	r9, r1
 8006588:	4682      	mov	sl, r0
 800658a:	dc09      	bgt.n	80065a0 <__ieee754_pow+0x40>
 800658c:	d103      	bne.n	8006596 <__ieee754_pow+0x36>
 800658e:	b938      	cbnz	r0, 80065a0 <__ieee754_pow+0x40>
 8006590:	42a5      	cmp	r5, r4
 8006592:	dc0d      	bgt.n	80065b0 <__ieee754_pow+0x50>
 8006594:	e001      	b.n	800659a <__ieee754_pow+0x3a>
 8006596:	429d      	cmp	r5, r3
 8006598:	dc02      	bgt.n	80065a0 <__ieee754_pow+0x40>
 800659a:	429d      	cmp	r5, r3
 800659c:	d10e      	bne.n	80065bc <__ieee754_pow+0x5c>
 800659e:	b16a      	cbz	r2, 80065bc <__ieee754_pow+0x5c>
 80065a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80065a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80065a8:	ea54 030a 	orrs.w	r3, r4, sl
 80065ac:	f000 849e 	beq.w	8006eec <__ieee754_pow+0x98c>
 80065b0:	4874      	ldr	r0, [pc, #464]	; (8006784 <__ieee754_pow+0x224>)
 80065b2:	b011      	add	sp, #68	; 0x44
 80065b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	f000 bd94 	b.w	80070e4 <nan>
 80065bc:	f1b9 0f00 	cmp.w	r9, #0
 80065c0:	da53      	bge.n	800666a <__ieee754_pow+0x10a>
 80065c2:	4b71      	ldr	r3, [pc, #452]	; (8006788 <__ieee754_pow+0x228>)
 80065c4:	429d      	cmp	r5, r3
 80065c6:	dc4e      	bgt.n	8006666 <__ieee754_pow+0x106>
 80065c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80065cc:	429d      	cmp	r5, r3
 80065ce:	dd4c      	ble.n	800666a <__ieee754_pow+0x10a>
 80065d0:	152b      	asrs	r3, r5, #20
 80065d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80065d6:	2b14      	cmp	r3, #20
 80065d8:	dd28      	ble.n	800662c <__ieee754_pow+0xcc>
 80065da:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80065de:	fa22 f103 	lsr.w	r1, r2, r3
 80065e2:	fa01 f303 	lsl.w	r3, r1, r3
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d13f      	bne.n	800666a <__ieee754_pow+0x10a>
 80065ea:	f001 0101 	and.w	r1, r1, #1
 80065ee:	f1c1 0302 	rsb	r3, r1, #2
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2a00      	cmp	r2, #0
 80065f6:	d15c      	bne.n	80066b2 <__ieee754_pow+0x152>
 80065f8:	4b61      	ldr	r3, [pc, #388]	; (8006780 <__ieee754_pow+0x220>)
 80065fa:	429d      	cmp	r5, r3
 80065fc:	d126      	bne.n	800664c <__ieee754_pow+0xec>
 80065fe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006602:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006606:	ea53 030a 	orrs.w	r3, r3, sl
 800660a:	f000 846f 	beq.w	8006eec <__ieee754_pow+0x98c>
 800660e:	4b5f      	ldr	r3, [pc, #380]	; (800678c <__ieee754_pow+0x22c>)
 8006610:	429c      	cmp	r4, r3
 8006612:	dd2c      	ble.n	800666e <__ieee754_pow+0x10e>
 8006614:	2e00      	cmp	r6, #0
 8006616:	f280 846f 	bge.w	8006ef8 <__ieee754_pow+0x998>
 800661a:	f04f 0b00 	mov.w	fp, #0
 800661e:	f04f 0c00 	mov.w	ip, #0
 8006622:	4658      	mov	r0, fp
 8006624:	4661      	mov	r1, ip
 8006626:	b011      	add	sp, #68	; 0x44
 8006628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662c:	2a00      	cmp	r2, #0
 800662e:	d13e      	bne.n	80066ae <__ieee754_pow+0x14e>
 8006630:	f1c3 0314 	rsb	r3, r3, #20
 8006634:	fa45 f103 	asr.w	r1, r5, r3
 8006638:	fa01 f303 	lsl.w	r3, r1, r3
 800663c:	42ab      	cmp	r3, r5
 800663e:	f040 8463 	bne.w	8006f08 <__ieee754_pow+0x9a8>
 8006642:	f001 0101 	and.w	r1, r1, #1
 8006646:	f1c1 0302 	rsb	r3, r1, #2
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	4b50      	ldr	r3, [pc, #320]	; (8006790 <__ieee754_pow+0x230>)
 800664e:	429d      	cmp	r5, r3
 8006650:	d114      	bne.n	800667c <__ieee754_pow+0x11c>
 8006652:	2e00      	cmp	r6, #0
 8006654:	f280 8454 	bge.w	8006f00 <__ieee754_pow+0x9a0>
 8006658:	463a      	mov	r2, r7
 800665a:	4643      	mov	r3, r8
 800665c:	2000      	movs	r0, #0
 800665e:	494c      	ldr	r1, [pc, #304]	; (8006790 <__ieee754_pow+0x230>)
 8006660:	f7fa f85c 	bl	800071c <__aeabi_ddiv>
 8006664:	e013      	b.n	800668e <__ieee754_pow+0x12e>
 8006666:	2302      	movs	r3, #2
 8006668:	e7c3      	b.n	80065f2 <__ieee754_pow+0x92>
 800666a:	2300      	movs	r3, #0
 800666c:	e7c1      	b.n	80065f2 <__ieee754_pow+0x92>
 800666e:	2e00      	cmp	r6, #0
 8006670:	dad3      	bge.n	800661a <__ieee754_pow+0xba>
 8006672:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006676:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800667a:	e7d2      	b.n	8006622 <__ieee754_pow+0xc2>
 800667c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006680:	d108      	bne.n	8006694 <__ieee754_pow+0x134>
 8006682:	463a      	mov	r2, r7
 8006684:	4643      	mov	r3, r8
 8006686:	4638      	mov	r0, r7
 8006688:	4641      	mov	r1, r8
 800668a:	f7f9 ff1d 	bl	80004c8 <__aeabi_dmul>
 800668e:	4683      	mov	fp, r0
 8006690:	468c      	mov	ip, r1
 8006692:	e7c6      	b.n	8006622 <__ieee754_pow+0xc2>
 8006694:	4b3f      	ldr	r3, [pc, #252]	; (8006794 <__ieee754_pow+0x234>)
 8006696:	429e      	cmp	r6, r3
 8006698:	d10b      	bne.n	80066b2 <__ieee754_pow+0x152>
 800669a:	f1b9 0f00 	cmp.w	r9, #0
 800669e:	db08      	blt.n	80066b2 <__ieee754_pow+0x152>
 80066a0:	4638      	mov	r0, r7
 80066a2:	4641      	mov	r1, r8
 80066a4:	b011      	add	sp, #68	; 0x44
 80066a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066aa:	f000 bc63 	b.w	8006f74 <__ieee754_sqrt>
 80066ae:	2300      	movs	r3, #0
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	4638      	mov	r0, r7
 80066b4:	4641      	mov	r1, r8
 80066b6:	f000 fd09 	bl	80070cc <fabs>
 80066ba:	4683      	mov	fp, r0
 80066bc:	468c      	mov	ip, r1
 80066be:	f1ba 0f00 	cmp.w	sl, #0
 80066c2:	d12b      	bne.n	800671c <__ieee754_pow+0x1bc>
 80066c4:	b124      	cbz	r4, 80066d0 <__ieee754_pow+0x170>
 80066c6:	4b32      	ldr	r3, [pc, #200]	; (8006790 <__ieee754_pow+0x230>)
 80066c8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d125      	bne.n	800671c <__ieee754_pow+0x1bc>
 80066d0:	2e00      	cmp	r6, #0
 80066d2:	da07      	bge.n	80066e4 <__ieee754_pow+0x184>
 80066d4:	465a      	mov	r2, fp
 80066d6:	4663      	mov	r3, ip
 80066d8:	2000      	movs	r0, #0
 80066da:	492d      	ldr	r1, [pc, #180]	; (8006790 <__ieee754_pow+0x230>)
 80066dc:	f7fa f81e 	bl	800071c <__aeabi_ddiv>
 80066e0:	4683      	mov	fp, r0
 80066e2:	468c      	mov	ip, r1
 80066e4:	f1b9 0f00 	cmp.w	r9, #0
 80066e8:	da9b      	bge.n	8006622 <__ieee754_pow+0xc2>
 80066ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80066ee:	9b00      	ldr	r3, [sp, #0]
 80066f0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80066f4:	4323      	orrs	r3, r4
 80066f6:	d108      	bne.n	800670a <__ieee754_pow+0x1aa>
 80066f8:	465a      	mov	r2, fp
 80066fa:	4663      	mov	r3, ip
 80066fc:	4658      	mov	r0, fp
 80066fe:	4661      	mov	r1, ip
 8006700:	f7f9 fd2a 	bl	8000158 <__aeabi_dsub>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	e7aa      	b.n	8006660 <__ieee754_pow+0x100>
 800670a:	9b00      	ldr	r3, [sp, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d188      	bne.n	8006622 <__ieee754_pow+0xc2>
 8006710:	4658      	mov	r0, fp
 8006712:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006716:	4683      	mov	fp, r0
 8006718:	469c      	mov	ip, r3
 800671a:	e782      	b.n	8006622 <__ieee754_pow+0xc2>
 800671c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8006720:	f109 33ff 	add.w	r3, r9, #4294967295
 8006724:	930d      	str	r3, [sp, #52]	; 0x34
 8006726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006728:	9b00      	ldr	r3, [sp, #0]
 800672a:	4313      	orrs	r3, r2
 800672c:	d104      	bne.n	8006738 <__ieee754_pow+0x1d8>
 800672e:	463a      	mov	r2, r7
 8006730:	4643      	mov	r3, r8
 8006732:	4638      	mov	r0, r7
 8006734:	4641      	mov	r1, r8
 8006736:	e7e3      	b.n	8006700 <__ieee754_pow+0x1a0>
 8006738:	4b17      	ldr	r3, [pc, #92]	; (8006798 <__ieee754_pow+0x238>)
 800673a:	429d      	cmp	r5, r3
 800673c:	f340 80fe 	ble.w	800693c <__ieee754_pow+0x3dc>
 8006740:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006744:	429d      	cmp	r5, r3
 8006746:	dd0b      	ble.n	8006760 <__ieee754_pow+0x200>
 8006748:	4b10      	ldr	r3, [pc, #64]	; (800678c <__ieee754_pow+0x22c>)
 800674a:	429c      	cmp	r4, r3
 800674c:	dc0e      	bgt.n	800676c <__ieee754_pow+0x20c>
 800674e:	2e00      	cmp	r6, #0
 8006750:	f6bf af63 	bge.w	800661a <__ieee754_pow+0xba>
 8006754:	a308      	add	r3, pc, #32	; (adr r3, 8006778 <__ieee754_pow+0x218>)
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	4610      	mov	r0, r2
 800675c:	4619      	mov	r1, r3
 800675e:	e794      	b.n	800668a <__ieee754_pow+0x12a>
 8006760:	4b0e      	ldr	r3, [pc, #56]	; (800679c <__ieee754_pow+0x23c>)
 8006762:	429c      	cmp	r4, r3
 8006764:	ddf3      	ble.n	800674e <__ieee754_pow+0x1ee>
 8006766:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <__ieee754_pow+0x230>)
 8006768:	429c      	cmp	r4, r3
 800676a:	dd19      	ble.n	80067a0 <__ieee754_pow+0x240>
 800676c:	2e00      	cmp	r6, #0
 800676e:	dcf1      	bgt.n	8006754 <__ieee754_pow+0x1f4>
 8006770:	e753      	b.n	800661a <__ieee754_pow+0xba>
 8006772:	bf00      	nop
 8006774:	f3af 8000 	nop.w
 8006778:	8800759c 	.word	0x8800759c
 800677c:	7e37e43c 	.word	0x7e37e43c
 8006780:	7ff00000 	.word	0x7ff00000
 8006784:	0800733f 	.word	0x0800733f
 8006788:	433fffff 	.word	0x433fffff
 800678c:	3fefffff 	.word	0x3fefffff
 8006790:	3ff00000 	.word	0x3ff00000
 8006794:	3fe00000 	.word	0x3fe00000
 8006798:	41e00000 	.word	0x41e00000
 800679c:	3feffffe 	.word	0x3feffffe
 80067a0:	4661      	mov	r1, ip
 80067a2:	2200      	movs	r2, #0
 80067a4:	4b60      	ldr	r3, [pc, #384]	; (8006928 <__ieee754_pow+0x3c8>)
 80067a6:	4658      	mov	r0, fp
 80067a8:	f7f9 fcd6 	bl	8000158 <__aeabi_dsub>
 80067ac:	a354      	add	r3, pc, #336	; (adr r3, 8006900 <__ieee754_pow+0x3a0>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	4604      	mov	r4, r0
 80067b4:	460d      	mov	r5, r1
 80067b6:	f7f9 fe87 	bl	80004c8 <__aeabi_dmul>
 80067ba:	a353      	add	r3, pc, #332	; (adr r3, 8006908 <__ieee754_pow+0x3a8>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	4606      	mov	r6, r0
 80067c2:	460f      	mov	r7, r1
 80067c4:	4620      	mov	r0, r4
 80067c6:	4629      	mov	r1, r5
 80067c8:	f7f9 fe7e 	bl	80004c8 <__aeabi_dmul>
 80067cc:	2200      	movs	r2, #0
 80067ce:	4682      	mov	sl, r0
 80067d0:	468b      	mov	fp, r1
 80067d2:	4b56      	ldr	r3, [pc, #344]	; (800692c <__ieee754_pow+0x3cc>)
 80067d4:	4620      	mov	r0, r4
 80067d6:	4629      	mov	r1, r5
 80067d8:	f7f9 fe76 	bl	80004c8 <__aeabi_dmul>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	a14b      	add	r1, pc, #300	; (adr r1, 8006910 <__ieee754_pow+0x3b0>)
 80067e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067e6:	f7f9 fcb7 	bl	8000158 <__aeabi_dsub>
 80067ea:	4622      	mov	r2, r4
 80067ec:	462b      	mov	r3, r5
 80067ee:	f7f9 fe6b 	bl	80004c8 <__aeabi_dmul>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	2000      	movs	r0, #0
 80067f8:	494d      	ldr	r1, [pc, #308]	; (8006930 <__ieee754_pow+0x3d0>)
 80067fa:	f7f9 fcad 	bl	8000158 <__aeabi_dsub>
 80067fe:	4622      	mov	r2, r4
 8006800:	462b      	mov	r3, r5
 8006802:	4680      	mov	r8, r0
 8006804:	4689      	mov	r9, r1
 8006806:	4620      	mov	r0, r4
 8006808:	4629      	mov	r1, r5
 800680a:	f7f9 fe5d 	bl	80004c8 <__aeabi_dmul>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4640      	mov	r0, r8
 8006814:	4649      	mov	r1, r9
 8006816:	f7f9 fe57 	bl	80004c8 <__aeabi_dmul>
 800681a:	a33f      	add	r3, pc, #252	; (adr r3, 8006918 <__ieee754_pow+0x3b8>)
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f7f9 fe52 	bl	80004c8 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4650      	mov	r0, sl
 800682a:	4659      	mov	r1, fp
 800682c:	f7f9 fc94 	bl	8000158 <__aeabi_dsub>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4604      	mov	r4, r0
 8006836:	460d      	mov	r5, r1
 8006838:	4630      	mov	r0, r6
 800683a:	4639      	mov	r1, r7
 800683c:	f7f9 fc8e 	bl	800015c <__adddf3>
 8006840:	2000      	movs	r0, #0
 8006842:	468b      	mov	fp, r1
 8006844:	4682      	mov	sl, r0
 8006846:	4632      	mov	r2, r6
 8006848:	463b      	mov	r3, r7
 800684a:	f7f9 fc85 	bl	8000158 <__aeabi_dsub>
 800684e:	4602      	mov	r2, r0
 8006850:	460b      	mov	r3, r1
 8006852:	4620      	mov	r0, r4
 8006854:	4629      	mov	r1, r5
 8006856:	f7f9 fc7f 	bl	8000158 <__aeabi_dsub>
 800685a:	9b00      	ldr	r3, [sp, #0]
 800685c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800685e:	3b01      	subs	r3, #1
 8006860:	4313      	orrs	r3, r2
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	bf0c      	ite	eq
 8006868:	4c32      	ldreq	r4, [pc, #200]	; (8006934 <__ieee754_pow+0x3d4>)
 800686a:	4c2f      	ldrne	r4, [pc, #188]	; (8006928 <__ieee754_pow+0x3c8>)
 800686c:	4606      	mov	r6, r0
 800686e:	e9cd 3400 	strd	r3, r4, [sp]
 8006872:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006876:	2400      	movs	r4, #0
 8006878:	460f      	mov	r7, r1
 800687a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800687e:	4622      	mov	r2, r4
 8006880:	462b      	mov	r3, r5
 8006882:	f7f9 fc69 	bl	8000158 <__aeabi_dsub>
 8006886:	4652      	mov	r2, sl
 8006888:	465b      	mov	r3, fp
 800688a:	f7f9 fe1d 	bl	80004c8 <__aeabi_dmul>
 800688e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006892:	4680      	mov	r8, r0
 8006894:	4689      	mov	r9, r1
 8006896:	4630      	mov	r0, r6
 8006898:	4639      	mov	r1, r7
 800689a:	f7f9 fe15 	bl	80004c8 <__aeabi_dmul>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4640      	mov	r0, r8
 80068a4:	4649      	mov	r1, r9
 80068a6:	f7f9 fc59 	bl	800015c <__adddf3>
 80068aa:	4622      	mov	r2, r4
 80068ac:	462b      	mov	r3, r5
 80068ae:	4680      	mov	r8, r0
 80068b0:	4689      	mov	r9, r1
 80068b2:	4650      	mov	r0, sl
 80068b4:	4659      	mov	r1, fp
 80068b6:	f7f9 fe07 	bl	80004c8 <__aeabi_dmul>
 80068ba:	4604      	mov	r4, r0
 80068bc:	460d      	mov	r5, r1
 80068be:	460b      	mov	r3, r1
 80068c0:	4602      	mov	r2, r0
 80068c2:	4649      	mov	r1, r9
 80068c4:	4640      	mov	r0, r8
 80068c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80068ca:	f7f9 fc47 	bl	800015c <__adddf3>
 80068ce:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <__ieee754_pow+0x3d8>)
 80068d0:	4682      	mov	sl, r0
 80068d2:	4299      	cmp	r1, r3
 80068d4:	460f      	mov	r7, r1
 80068d6:	460e      	mov	r6, r1
 80068d8:	f340 82e1 	ble.w	8006e9e <__ieee754_pow+0x93e>
 80068dc:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80068e0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80068e4:	4303      	orrs	r3, r0
 80068e6:	f000 81db 	beq.w	8006ca0 <__ieee754_pow+0x740>
 80068ea:	a30d      	add	r3, pc, #52	; (adr r3, 8006920 <__ieee754_pow+0x3c0>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068f4:	f7f9 fde8 	bl	80004c8 <__aeabi_dmul>
 80068f8:	a309      	add	r3, pc, #36	; (adr r3, 8006920 <__ieee754_pow+0x3c0>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	e6c4      	b.n	800668a <__ieee754_pow+0x12a>
 8006900:	60000000 	.word	0x60000000
 8006904:	3ff71547 	.word	0x3ff71547
 8006908:	f85ddf44 	.word	0xf85ddf44
 800690c:	3e54ae0b 	.word	0x3e54ae0b
 8006910:	55555555 	.word	0x55555555
 8006914:	3fd55555 	.word	0x3fd55555
 8006918:	652b82fe 	.word	0x652b82fe
 800691c:	3ff71547 	.word	0x3ff71547
 8006920:	8800759c 	.word	0x8800759c
 8006924:	7e37e43c 	.word	0x7e37e43c
 8006928:	3ff00000 	.word	0x3ff00000
 800692c:	3fd00000 	.word	0x3fd00000
 8006930:	3fe00000 	.word	0x3fe00000
 8006934:	bff00000 	.word	0xbff00000
 8006938:	408fffff 	.word	0x408fffff
 800693c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	da08      	bge.n	8006958 <__ieee754_pow+0x3f8>
 8006946:	4658      	mov	r0, fp
 8006948:	4bcd      	ldr	r3, [pc, #820]	; (8006c80 <__ieee754_pow+0x720>)
 800694a:	4661      	mov	r1, ip
 800694c:	f7f9 fdbc 	bl	80004c8 <__aeabi_dmul>
 8006950:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006954:	4683      	mov	fp, r0
 8006956:	460c      	mov	r4, r1
 8006958:	1523      	asrs	r3, r4, #20
 800695a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800695e:	4413      	add	r3, r2
 8006960:	930c      	str	r3, [sp, #48]	; 0x30
 8006962:	4bc8      	ldr	r3, [pc, #800]	; (8006c84 <__ieee754_pow+0x724>)
 8006964:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006968:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800696c:	429c      	cmp	r4, r3
 800696e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006972:	dd08      	ble.n	8006986 <__ieee754_pow+0x426>
 8006974:	4bc4      	ldr	r3, [pc, #784]	; (8006c88 <__ieee754_pow+0x728>)
 8006976:	429c      	cmp	r4, r3
 8006978:	f340 815b 	ble.w	8006c32 <__ieee754_pow+0x6d2>
 800697c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800697e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006982:	3301      	adds	r3, #1
 8006984:	930c      	str	r3, [sp, #48]	; 0x30
 8006986:	f04f 0800 	mov.w	r8, #0
 800698a:	4658      	mov	r0, fp
 800698c:	4629      	mov	r1, r5
 800698e:	4bbf      	ldr	r3, [pc, #764]	; (8006c8c <__ieee754_pow+0x72c>)
 8006990:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006994:	444b      	add	r3, r9
 8006996:	e9d3 3400 	ldrd	r3, r4, [r3]
 800699a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800699e:	461a      	mov	r2, r3
 80069a0:	4623      	mov	r3, r4
 80069a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069a6:	f7f9 fbd7 	bl	8000158 <__aeabi_dsub>
 80069aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069ae:	4606      	mov	r6, r0
 80069b0:	460f      	mov	r7, r1
 80069b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069b6:	f7f9 fbd1 	bl	800015c <__adddf3>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	2000      	movs	r0, #0
 80069c0:	49b3      	ldr	r1, [pc, #716]	; (8006c90 <__ieee754_pow+0x730>)
 80069c2:	f7f9 feab 	bl	800071c <__aeabi_ddiv>
 80069c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4630      	mov	r0, r6
 80069d0:	4639      	mov	r1, r7
 80069d2:	f7f9 fd79 	bl	80004c8 <__aeabi_dmul>
 80069d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069da:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80069de:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80069e2:	2300      	movs	r3, #0
 80069e4:	2200      	movs	r2, #0
 80069e6:	106d      	asrs	r5, r5, #1
 80069e8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80069ec:	9304      	str	r3, [sp, #16]
 80069ee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80069f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80069f6:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80069fa:	4650      	mov	r0, sl
 80069fc:	4659      	mov	r1, fp
 80069fe:	4614      	mov	r4, r2
 8006a00:	461d      	mov	r5, r3
 8006a02:	f7f9 fd61 	bl	80004c8 <__aeabi_dmul>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	4639      	mov	r1, r7
 8006a0e:	f7f9 fba3 	bl	8000158 <__aeabi_dsub>
 8006a12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a16:	4606      	mov	r6, r0
 8006a18:	460f      	mov	r7, r1
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	f7f9 fb9b 	bl	8000158 <__aeabi_dsub>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a2a:	f7f9 fb95 	bl	8000158 <__aeabi_dsub>
 8006a2e:	4652      	mov	r2, sl
 8006a30:	465b      	mov	r3, fp
 8006a32:	f7f9 fd49 	bl	80004c8 <__aeabi_dmul>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	f7f9 fb8b 	bl	8000158 <__aeabi_dsub>
 8006a42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a46:	f7f9 fd3f 	bl	80004c8 <__aeabi_dmul>
 8006a4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a52:	4610      	mov	r0, r2
 8006a54:	4619      	mov	r1, r3
 8006a56:	f7f9 fd37 	bl	80004c8 <__aeabi_dmul>
 8006a5a:	a377      	add	r3, pc, #476	; (adr r3, 8006c38 <__ieee754_pow+0x6d8>)
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	4604      	mov	r4, r0
 8006a62:	460d      	mov	r5, r1
 8006a64:	f7f9 fd30 	bl	80004c8 <__aeabi_dmul>
 8006a68:	a375      	add	r3, pc, #468	; (adr r3, 8006c40 <__ieee754_pow+0x6e0>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f7f9 fb75 	bl	800015c <__adddf3>
 8006a72:	4622      	mov	r2, r4
 8006a74:	462b      	mov	r3, r5
 8006a76:	f7f9 fd27 	bl	80004c8 <__aeabi_dmul>
 8006a7a:	a373      	add	r3, pc, #460	; (adr r3, 8006c48 <__ieee754_pow+0x6e8>)
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	f7f9 fb6c 	bl	800015c <__adddf3>
 8006a84:	4622      	mov	r2, r4
 8006a86:	462b      	mov	r3, r5
 8006a88:	f7f9 fd1e 	bl	80004c8 <__aeabi_dmul>
 8006a8c:	a370      	add	r3, pc, #448	; (adr r3, 8006c50 <__ieee754_pow+0x6f0>)
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	f7f9 fb63 	bl	800015c <__adddf3>
 8006a96:	4622      	mov	r2, r4
 8006a98:	462b      	mov	r3, r5
 8006a9a:	f7f9 fd15 	bl	80004c8 <__aeabi_dmul>
 8006a9e:	a36e      	add	r3, pc, #440	; (adr r3, 8006c58 <__ieee754_pow+0x6f8>)
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7f9 fb5a 	bl	800015c <__adddf3>
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	462b      	mov	r3, r5
 8006aac:	f7f9 fd0c 	bl	80004c8 <__aeabi_dmul>
 8006ab0:	a36b      	add	r3, pc, #428	; (adr r3, 8006c60 <__ieee754_pow+0x700>)
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	f7f9 fb51 	bl	800015c <__adddf3>
 8006aba:	4622      	mov	r2, r4
 8006abc:	4606      	mov	r6, r0
 8006abe:	460f      	mov	r7, r1
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	f7f9 fcff 	bl	80004c8 <__aeabi_dmul>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4630      	mov	r0, r6
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	f7f9 fcf9 	bl	80004c8 <__aeabi_dmul>
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	460d      	mov	r5, r1
 8006ada:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ade:	4652      	mov	r2, sl
 8006ae0:	465b      	mov	r3, fp
 8006ae2:	f7f9 fb3b 	bl	800015c <__adddf3>
 8006ae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006aea:	f7f9 fced 	bl	80004c8 <__aeabi_dmul>
 8006aee:	4622      	mov	r2, r4
 8006af0:	462b      	mov	r3, r5
 8006af2:	f7f9 fb33 	bl	800015c <__adddf3>
 8006af6:	4652      	mov	r2, sl
 8006af8:	4606      	mov	r6, r0
 8006afa:	460f      	mov	r7, r1
 8006afc:	465b      	mov	r3, fp
 8006afe:	4650      	mov	r0, sl
 8006b00:	4659      	mov	r1, fp
 8006b02:	f7f9 fce1 	bl	80004c8 <__aeabi_dmul>
 8006b06:	2200      	movs	r2, #0
 8006b08:	4b62      	ldr	r3, [pc, #392]	; (8006c94 <__ieee754_pow+0x734>)
 8006b0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b0e:	f7f9 fb25 	bl	800015c <__adddf3>
 8006b12:	4632      	mov	r2, r6
 8006b14:	463b      	mov	r3, r7
 8006b16:	f7f9 fb21 	bl	800015c <__adddf3>
 8006b1a:	9804      	ldr	r0, [sp, #16]
 8006b1c:	460d      	mov	r5, r1
 8006b1e:	4604      	mov	r4, r0
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4650      	mov	r0, sl
 8006b26:	4659      	mov	r1, fp
 8006b28:	f7f9 fcce 	bl	80004c8 <__aeabi_dmul>
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4682      	mov	sl, r0
 8006b30:	468b      	mov	fp, r1
 8006b32:	4b58      	ldr	r3, [pc, #352]	; (8006c94 <__ieee754_pow+0x734>)
 8006b34:	4620      	mov	r0, r4
 8006b36:	4629      	mov	r1, r5
 8006b38:	f7f9 fb0e 	bl	8000158 <__aeabi_dsub>
 8006b3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b40:	f7f9 fb0a 	bl	8000158 <__aeabi_dsub>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4630      	mov	r0, r6
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	f7f9 fb04 	bl	8000158 <__aeabi_dsub>
 8006b50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b54:	f7f9 fcb8 	bl	80004c8 <__aeabi_dmul>
 8006b58:	4622      	mov	r2, r4
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	460f      	mov	r7, r1
 8006b5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b62:	462b      	mov	r3, r5
 8006b64:	f7f9 fcb0 	bl	80004c8 <__aeabi_dmul>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 faf4 	bl	800015c <__adddf3>
 8006b74:	4606      	mov	r6, r0
 8006b76:	460f      	mov	r7, r1
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4650      	mov	r0, sl
 8006b7e:	4659      	mov	r1, fp
 8006b80:	f7f9 faec 	bl	800015c <__adddf3>
 8006b84:	a338      	add	r3, pc, #224	; (adr r3, 8006c68 <__ieee754_pow+0x708>)
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	9804      	ldr	r0, [sp, #16]
 8006b8c:	460d      	mov	r5, r1
 8006b8e:	4604      	mov	r4, r0
 8006b90:	f7f9 fc9a 	bl	80004c8 <__aeabi_dmul>
 8006b94:	4652      	mov	r2, sl
 8006b96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b9a:	465b      	mov	r3, fp
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	f7f9 fada 	bl	8000158 <__aeabi_dsub>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4630      	mov	r0, r6
 8006baa:	4639      	mov	r1, r7
 8006bac:	f7f9 fad4 	bl	8000158 <__aeabi_dsub>
 8006bb0:	a32f      	add	r3, pc, #188	; (adr r3, 8006c70 <__ieee754_pow+0x710>)
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f7f9 fc87 	bl	80004c8 <__aeabi_dmul>
 8006bba:	a32f      	add	r3, pc, #188	; (adr r3, 8006c78 <__ieee754_pow+0x718>)
 8006bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	460f      	mov	r7, r1
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	f7f9 fc7e 	bl	80004c8 <__aeabi_dmul>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	f7f9 fac2 	bl	800015c <__adddf3>
 8006bd8:	4b2f      	ldr	r3, [pc, #188]	; (8006c98 <__ieee754_pow+0x738>)
 8006bda:	444b      	add	r3, r9
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f7f9 fabc 	bl	800015c <__adddf3>
 8006be4:	4604      	mov	r4, r0
 8006be6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006be8:	460d      	mov	r5, r1
 8006bea:	f7f9 fc03 	bl	80003f4 <__aeabi_i2d>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	460f      	mov	r7, r1
 8006bf2:	4b2a      	ldr	r3, [pc, #168]	; (8006c9c <__ieee754_pow+0x73c>)
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	444b      	add	r3, r9
 8006bf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bfc:	462b      	mov	r3, r5
 8006bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c02:	f7f9 faab 	bl	800015c <__adddf3>
 8006c06:	4642      	mov	r2, r8
 8006c08:	464b      	mov	r3, r9
 8006c0a:	f7f9 faa7 	bl	800015c <__adddf3>
 8006c0e:	4632      	mov	r2, r6
 8006c10:	463b      	mov	r3, r7
 8006c12:	f7f9 faa3 	bl	800015c <__adddf3>
 8006c16:	9804      	ldr	r0, [sp, #16]
 8006c18:	4632      	mov	r2, r6
 8006c1a:	463b      	mov	r3, r7
 8006c1c:	4682      	mov	sl, r0
 8006c1e:	468b      	mov	fp, r1
 8006c20:	f7f9 fa9a 	bl	8000158 <__aeabi_dsub>
 8006c24:	4642      	mov	r2, r8
 8006c26:	464b      	mov	r3, r9
 8006c28:	f7f9 fa96 	bl	8000158 <__aeabi_dsub>
 8006c2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c30:	e60b      	b.n	800684a <__ieee754_pow+0x2ea>
 8006c32:	f04f 0801 	mov.w	r8, #1
 8006c36:	e6a8      	b.n	800698a <__ieee754_pow+0x42a>
 8006c38:	4a454eef 	.word	0x4a454eef
 8006c3c:	3fca7e28 	.word	0x3fca7e28
 8006c40:	93c9db65 	.word	0x93c9db65
 8006c44:	3fcd864a 	.word	0x3fcd864a
 8006c48:	a91d4101 	.word	0xa91d4101
 8006c4c:	3fd17460 	.word	0x3fd17460
 8006c50:	518f264d 	.word	0x518f264d
 8006c54:	3fd55555 	.word	0x3fd55555
 8006c58:	db6fabff 	.word	0xdb6fabff
 8006c5c:	3fdb6db6 	.word	0x3fdb6db6
 8006c60:	33333303 	.word	0x33333303
 8006c64:	3fe33333 	.word	0x3fe33333
 8006c68:	e0000000 	.word	0xe0000000
 8006c6c:	3feec709 	.word	0x3feec709
 8006c70:	dc3a03fd 	.word	0xdc3a03fd
 8006c74:	3feec709 	.word	0x3feec709
 8006c78:	145b01f5 	.word	0x145b01f5
 8006c7c:	be3e2fe0 	.word	0xbe3e2fe0
 8006c80:	43400000 	.word	0x43400000
 8006c84:	0003988e 	.word	0x0003988e
 8006c88:	000bb679 	.word	0x000bb679
 8006c8c:	08007340 	.word	0x08007340
 8006c90:	3ff00000 	.word	0x3ff00000
 8006c94:	40080000 	.word	0x40080000
 8006c98:	08007360 	.word	0x08007360
 8006c9c:	08007350 	.word	0x08007350
 8006ca0:	a39b      	add	r3, pc, #620	; (adr r3, 8006f10 <__ieee754_pow+0x9b0>)
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	4649      	mov	r1, r9
 8006caa:	f7f9 fa57 	bl	800015c <__adddf3>
 8006cae:	4622      	mov	r2, r4
 8006cb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	4639      	mov	r1, r7
 8006cba:	f7f9 fa4d 	bl	8000158 <__aeabi_dsub>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cc6:	f7f9 fe8f 	bl	80009e8 <__aeabi_dcmpgt>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f47f ae0d 	bne.w	80068ea <__ieee754_pow+0x38a>
 8006cd0:	4aa3      	ldr	r2, [pc, #652]	; (8006f60 <__ieee754_pow+0xa00>)
 8006cd2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	f340 8103 	ble.w	8006ee2 <__ieee754_pow+0x982>
 8006cdc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	151b      	asrs	r3, r3, #20
 8006ce4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006ce8:	fa4a f303 	asr.w	r3, sl, r3
 8006cec:	4433      	add	r3, r6
 8006cee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006cf2:	4f9c      	ldr	r7, [pc, #624]	; (8006f64 <__ieee754_pow+0xa04>)
 8006cf4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006cf8:	4117      	asrs	r7, r2
 8006cfa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006cfe:	ea23 0107 	bic.w	r1, r3, r7
 8006d02:	f1c2 0214 	rsb	r2, r2, #20
 8006d06:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006d0a:	fa4a fa02 	asr.w	sl, sl, r2
 8006d0e:	2e00      	cmp	r6, #0
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4620      	mov	r0, r4
 8006d16:	4629      	mov	r1, r5
 8006d18:	bfb8      	it	lt
 8006d1a:	f1ca 0a00 	rsblt	sl, sl, #0
 8006d1e:	f7f9 fa1b 	bl	8000158 <__aeabi_dsub>
 8006d22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2a:	4642      	mov	r2, r8
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	f7f9 fa15 	bl	800015c <__adddf3>
 8006d32:	a379      	add	r3, pc, #484	; (adr r3, 8006f18 <__ieee754_pow+0x9b8>)
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	2000      	movs	r0, #0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	f7f9 fbc3 	bl	80004c8 <__aeabi_dmul>
 8006d42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d46:	4606      	mov	r6, r0
 8006d48:	460f      	mov	r7, r1
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	4629      	mov	r1, r5
 8006d4e:	f7f9 fa03 	bl	8000158 <__aeabi_dsub>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	4640      	mov	r0, r8
 8006d58:	4649      	mov	r1, r9
 8006d5a:	f7f9 f9fd 	bl	8000158 <__aeabi_dsub>
 8006d5e:	a370      	add	r3, pc, #448	; (adr r3, 8006f20 <__ieee754_pow+0x9c0>)
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	f7f9 fbb0 	bl	80004c8 <__aeabi_dmul>
 8006d68:	a36f      	add	r3, pc, #444	; (adr r3, 8006f28 <__ieee754_pow+0x9c8>)
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	4680      	mov	r8, r0
 8006d70:	4689      	mov	r9, r1
 8006d72:	4620      	mov	r0, r4
 8006d74:	4629      	mov	r1, r5
 8006d76:	f7f9 fba7 	bl	80004c8 <__aeabi_dmul>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 f9eb 	bl	800015c <__adddf3>
 8006d86:	4604      	mov	r4, r0
 8006d88:	460d      	mov	r5, r1
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4630      	mov	r0, r6
 8006d90:	4639      	mov	r1, r7
 8006d92:	f7f9 f9e3 	bl	800015c <__adddf3>
 8006d96:	4632      	mov	r2, r6
 8006d98:	463b      	mov	r3, r7
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4689      	mov	r9, r1
 8006d9e:	f7f9 f9db 	bl	8000158 <__aeabi_dsub>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4620      	mov	r0, r4
 8006da8:	4629      	mov	r1, r5
 8006daa:	f7f9 f9d5 	bl	8000158 <__aeabi_dsub>
 8006dae:	4642      	mov	r2, r8
 8006db0:	4606      	mov	r6, r0
 8006db2:	460f      	mov	r7, r1
 8006db4:	464b      	mov	r3, r9
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fb85 	bl	80004c8 <__aeabi_dmul>
 8006dbe:	a35c      	add	r3, pc, #368	; (adr r3, 8006f30 <__ieee754_pow+0x9d0>)
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	460d      	mov	r5, r1
 8006dc8:	f7f9 fb7e 	bl	80004c8 <__aeabi_dmul>
 8006dcc:	a35a      	add	r3, pc, #360	; (adr r3, 8006f38 <__ieee754_pow+0x9d8>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 f9c1 	bl	8000158 <__aeabi_dsub>
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	462b      	mov	r3, r5
 8006dda:	f7f9 fb75 	bl	80004c8 <__aeabi_dmul>
 8006dde:	a358      	add	r3, pc, #352	; (adr r3, 8006f40 <__ieee754_pow+0x9e0>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 f9ba 	bl	800015c <__adddf3>
 8006de8:	4622      	mov	r2, r4
 8006dea:	462b      	mov	r3, r5
 8006dec:	f7f9 fb6c 	bl	80004c8 <__aeabi_dmul>
 8006df0:	a355      	add	r3, pc, #340	; (adr r3, 8006f48 <__ieee754_pow+0x9e8>)
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 f9af 	bl	8000158 <__aeabi_dsub>
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	462b      	mov	r3, r5
 8006dfe:	f7f9 fb63 	bl	80004c8 <__aeabi_dmul>
 8006e02:	a353      	add	r3, pc, #332	; (adr r3, 8006f50 <__ieee754_pow+0x9f0>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f7f9 f9a8 	bl	800015c <__adddf3>
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	462b      	mov	r3, r5
 8006e10:	f7f9 fb5a 	bl	80004c8 <__aeabi_dmul>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4640      	mov	r0, r8
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	f7f9 f99c 	bl	8000158 <__aeabi_dsub>
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4640      	mov	r0, r8
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	f7f9 fb4c 	bl	80004c8 <__aeabi_dmul>
 8006e30:	2200      	movs	r2, #0
 8006e32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f7f9 f98b 	bl	8000158 <__aeabi_dsub>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e4a:	f7f9 fc67 	bl	800071c <__aeabi_ddiv>
 8006e4e:	4632      	mov	r2, r6
 8006e50:	4604      	mov	r4, r0
 8006e52:	460d      	mov	r5, r1
 8006e54:	463b      	mov	r3, r7
 8006e56:	4640      	mov	r0, r8
 8006e58:	4649      	mov	r1, r9
 8006e5a:	f7f9 fb35 	bl	80004c8 <__aeabi_dmul>
 8006e5e:	4632      	mov	r2, r6
 8006e60:	463b      	mov	r3, r7
 8006e62:	f7f9 f97b 	bl	800015c <__adddf3>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	f7f9 f973 	bl	8000158 <__aeabi_dsub>
 8006e72:	4642      	mov	r2, r8
 8006e74:	464b      	mov	r3, r9
 8006e76:	f7f9 f96f 	bl	8000158 <__aeabi_dsub>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	2000      	movs	r0, #0
 8006e80:	4939      	ldr	r1, [pc, #228]	; (8006f68 <__ieee754_pow+0xa08>)
 8006e82:	f7f9 f969 	bl	8000158 <__aeabi_dsub>
 8006e86:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006e8a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006e8e:	da2b      	bge.n	8006ee8 <__ieee754_pow+0x988>
 8006e90:	4652      	mov	r2, sl
 8006e92:	f000 f9b9 	bl	8007208 <scalbn>
 8006e96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e9a:	f7ff bbf6 	b.w	800668a <__ieee754_pow+0x12a>
 8006e9e:	4b33      	ldr	r3, [pc, #204]	; (8006f6c <__ieee754_pow+0xa0c>)
 8006ea0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006ea4:	429f      	cmp	r7, r3
 8006ea6:	f77f af13 	ble.w	8006cd0 <__ieee754_pow+0x770>
 8006eaa:	4b31      	ldr	r3, [pc, #196]	; (8006f70 <__ieee754_pow+0xa10>)
 8006eac:	440b      	add	r3, r1
 8006eae:	4303      	orrs	r3, r0
 8006eb0:	d00b      	beq.n	8006eca <__ieee754_pow+0x96a>
 8006eb2:	a329      	add	r3, pc, #164	; (adr r3, 8006f58 <__ieee754_pow+0x9f8>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ebc:	f7f9 fb04 	bl	80004c8 <__aeabi_dmul>
 8006ec0:	a325      	add	r3, pc, #148	; (adr r3, 8006f58 <__ieee754_pow+0x9f8>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7ff bbe0 	b.w	800668a <__ieee754_pow+0x12a>
 8006eca:	4622      	mov	r2, r4
 8006ecc:	462b      	mov	r3, r5
 8006ece:	f7f9 f943 	bl	8000158 <__aeabi_dsub>
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	464b      	mov	r3, r9
 8006ed6:	f7f9 fd7d 	bl	80009d4 <__aeabi_dcmpge>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f43f aef8 	beq.w	8006cd0 <__ieee754_pow+0x770>
 8006ee0:	e7e7      	b.n	8006eb2 <__ieee754_pow+0x952>
 8006ee2:	f04f 0a00 	mov.w	sl, #0
 8006ee6:	e71e      	b.n	8006d26 <__ieee754_pow+0x7c6>
 8006ee8:	4621      	mov	r1, r4
 8006eea:	e7d4      	b.n	8006e96 <__ieee754_pow+0x936>
 8006eec:	f04f 0b00 	mov.w	fp, #0
 8006ef0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006f68 <__ieee754_pow+0xa08>
 8006ef4:	f7ff bb95 	b.w	8006622 <__ieee754_pow+0xc2>
 8006ef8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006efc:	f7ff bb91 	b.w	8006622 <__ieee754_pow+0xc2>
 8006f00:	4638      	mov	r0, r7
 8006f02:	4641      	mov	r1, r8
 8006f04:	f7ff bbc3 	b.w	800668e <__ieee754_pow+0x12e>
 8006f08:	9200      	str	r2, [sp, #0]
 8006f0a:	f7ff bb9f 	b.w	800664c <__ieee754_pow+0xec>
 8006f0e:	bf00      	nop
 8006f10:	652b82fe 	.word	0x652b82fe
 8006f14:	3c971547 	.word	0x3c971547
 8006f18:	00000000 	.word	0x00000000
 8006f1c:	3fe62e43 	.word	0x3fe62e43
 8006f20:	fefa39ef 	.word	0xfefa39ef
 8006f24:	3fe62e42 	.word	0x3fe62e42
 8006f28:	0ca86c39 	.word	0x0ca86c39
 8006f2c:	be205c61 	.word	0xbe205c61
 8006f30:	72bea4d0 	.word	0x72bea4d0
 8006f34:	3e663769 	.word	0x3e663769
 8006f38:	c5d26bf1 	.word	0xc5d26bf1
 8006f3c:	3ebbbd41 	.word	0x3ebbbd41
 8006f40:	af25de2c 	.word	0xaf25de2c
 8006f44:	3f11566a 	.word	0x3f11566a
 8006f48:	16bebd93 	.word	0x16bebd93
 8006f4c:	3f66c16c 	.word	0x3f66c16c
 8006f50:	5555553e 	.word	0x5555553e
 8006f54:	3fc55555 	.word	0x3fc55555
 8006f58:	c2f8f359 	.word	0xc2f8f359
 8006f5c:	01a56e1f 	.word	0x01a56e1f
 8006f60:	3fe00000 	.word	0x3fe00000
 8006f64:	000fffff 	.word	0x000fffff
 8006f68:	3ff00000 	.word	0x3ff00000
 8006f6c:	4090cbff 	.word	0x4090cbff
 8006f70:	3f6f3400 	.word	0x3f6f3400

08006f74 <__ieee754_sqrt>:
 8006f74:	4b54      	ldr	r3, [pc, #336]	; (80070c8 <__ieee754_sqrt+0x154>)
 8006f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7a:	438b      	bics	r3, r1
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	460a      	mov	r2, r1
 8006f82:	460c      	mov	r4, r1
 8006f84:	d10f      	bne.n	8006fa6 <__ieee754_sqrt+0x32>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	f7f9 fa9d 	bl	80004c8 <__aeabi_dmul>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4630      	mov	r0, r6
 8006f94:	4629      	mov	r1, r5
 8006f96:	f7f9 f8e1 	bl	800015c <__adddf3>
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	4607      	mov	r7, r0
 8006faa:	4603      	mov	r3, r0
 8006fac:	dc0e      	bgt.n	8006fcc <__ieee754_sqrt+0x58>
 8006fae:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006fb2:	ea5c 0707 	orrs.w	r7, ip, r7
 8006fb6:	d0f2      	beq.n	8006f9e <__ieee754_sqrt+0x2a>
 8006fb8:	b141      	cbz	r1, 8006fcc <__ieee754_sqrt+0x58>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	f7f9 f8cb 	bl	8000158 <__aeabi_dsub>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	f7f9 fba9 	bl	800071c <__aeabi_ddiv>
 8006fca:	e7e6      	b.n	8006f9a <__ieee754_sqrt+0x26>
 8006fcc:	1512      	asrs	r2, r2, #20
 8006fce:	d074      	beq.n	80070ba <__ieee754_sqrt+0x146>
 8006fd0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006fd4:	07d5      	lsls	r5, r2, #31
 8006fd6:	f04f 0500 	mov.w	r5, #0
 8006fda:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006fde:	bf48      	it	mi
 8006fe0:	0fd9      	lsrmi	r1, r3, #31
 8006fe2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006fe6:	bf44      	itt	mi
 8006fe8:	005b      	lslmi	r3, r3, #1
 8006fea:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8006fee:	1051      	asrs	r1, r2, #1
 8006ff0:	0fda      	lsrs	r2, r3, #31
 8006ff2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	2216      	movs	r2, #22
 8006ffa:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	1987      	adds	r7, r0, r6
 8007002:	42a7      	cmp	r7, r4
 8007004:	bfde      	ittt	le
 8007006:	19b8      	addle	r0, r7, r6
 8007008:	1be4      	suble	r4, r4, r7
 800700a:	19ad      	addle	r5, r5, r6
 800700c:	0fdf      	lsrs	r7, r3, #31
 800700e:	3a01      	subs	r2, #1
 8007010:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8007014:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007018:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800701c:	d1f0      	bne.n	8007000 <__ieee754_sqrt+0x8c>
 800701e:	f04f 0c20 	mov.w	ip, #32
 8007022:	4696      	mov	lr, r2
 8007024:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007028:	4284      	cmp	r4, r0
 800702a:	eb06 070e 	add.w	r7, r6, lr
 800702e:	dc02      	bgt.n	8007036 <__ieee754_sqrt+0xc2>
 8007030:	d112      	bne.n	8007058 <__ieee754_sqrt+0xe4>
 8007032:	429f      	cmp	r7, r3
 8007034:	d810      	bhi.n	8007058 <__ieee754_sqrt+0xe4>
 8007036:	2f00      	cmp	r7, #0
 8007038:	eb07 0e06 	add.w	lr, r7, r6
 800703c:	da42      	bge.n	80070c4 <__ieee754_sqrt+0x150>
 800703e:	f1be 0f00 	cmp.w	lr, #0
 8007042:	db3f      	blt.n	80070c4 <__ieee754_sqrt+0x150>
 8007044:	f100 0801 	add.w	r8, r0, #1
 8007048:	1a24      	subs	r4, r4, r0
 800704a:	4640      	mov	r0, r8
 800704c:	429f      	cmp	r7, r3
 800704e:	bf88      	it	hi
 8007050:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8007054:	1bdb      	subs	r3, r3, r7
 8007056:	4432      	add	r2, r6
 8007058:	0064      	lsls	r4, r4, #1
 800705a:	f1bc 0c01 	subs.w	ip, ip, #1
 800705e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8007062:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007066:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800706a:	d1dd      	bne.n	8007028 <__ieee754_sqrt+0xb4>
 800706c:	4323      	orrs	r3, r4
 800706e:	d006      	beq.n	800707e <__ieee754_sqrt+0x10a>
 8007070:	1c54      	adds	r4, r2, #1
 8007072:	bf0b      	itete	eq
 8007074:	4662      	moveq	r2, ip
 8007076:	3201      	addne	r2, #1
 8007078:	3501      	addeq	r5, #1
 800707a:	f022 0201 	bicne.w	r2, r2, #1
 800707e:	106b      	asrs	r3, r5, #1
 8007080:	0852      	lsrs	r2, r2, #1
 8007082:	07e8      	lsls	r0, r5, #31
 8007084:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007088:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800708c:	bf48      	it	mi
 800708e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007092:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8007096:	4616      	mov	r6, r2
 8007098:	e781      	b.n	8006f9e <__ieee754_sqrt+0x2a>
 800709a:	0adc      	lsrs	r4, r3, #11
 800709c:	3915      	subs	r1, #21
 800709e:	055b      	lsls	r3, r3, #21
 80070a0:	2c00      	cmp	r4, #0
 80070a2:	d0fa      	beq.n	800709a <__ieee754_sqrt+0x126>
 80070a4:	02e6      	lsls	r6, r4, #11
 80070a6:	d50a      	bpl.n	80070be <__ieee754_sqrt+0x14a>
 80070a8:	f1c2 0020 	rsb	r0, r2, #32
 80070ac:	fa23 f000 	lsr.w	r0, r3, r0
 80070b0:	1e55      	subs	r5, r2, #1
 80070b2:	4093      	lsls	r3, r2
 80070b4:	4304      	orrs	r4, r0
 80070b6:	1b4a      	subs	r2, r1, r5
 80070b8:	e78a      	b.n	8006fd0 <__ieee754_sqrt+0x5c>
 80070ba:	4611      	mov	r1, r2
 80070bc:	e7f0      	b.n	80070a0 <__ieee754_sqrt+0x12c>
 80070be:	0064      	lsls	r4, r4, #1
 80070c0:	3201      	adds	r2, #1
 80070c2:	e7ef      	b.n	80070a4 <__ieee754_sqrt+0x130>
 80070c4:	4680      	mov	r8, r0
 80070c6:	e7bf      	b.n	8007048 <__ieee754_sqrt+0xd4>
 80070c8:	7ff00000 	.word	0x7ff00000

080070cc <fabs>:
 80070cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80070d0:	4619      	mov	r1, r3
 80070d2:	4770      	bx	lr

080070d4 <finite>:
 80070d4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80070d8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80070dc:	0fc0      	lsrs	r0, r0, #31
 80070de:	4770      	bx	lr

080070e0 <matherr>:
 80070e0:	2000      	movs	r0, #0
 80070e2:	4770      	bx	lr

080070e4 <nan>:
 80070e4:	2000      	movs	r0, #0
 80070e6:	4901      	ldr	r1, [pc, #4]	; (80070ec <nan+0x8>)
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	7ff80000 	.word	0x7ff80000

080070f0 <rint>:
 80070f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80070f6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 80070fa:	f1bc 0f13 	cmp.w	ip, #19
 80070fe:	4604      	mov	r4, r0
 8007100:	460d      	mov	r5, r1
 8007102:	460b      	mov	r3, r1
 8007104:	4606      	mov	r6, r0
 8007106:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800710a:	dc5a      	bgt.n	80071c2 <rint+0xd2>
 800710c:	f1bc 0f00 	cmp.w	ip, #0
 8007110:	da2b      	bge.n	800716a <rint+0x7a>
 8007112:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007116:	4302      	orrs	r2, r0
 8007118:	d023      	beq.n	8007162 <rint+0x72>
 800711a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800711e:	4302      	orrs	r2, r0
 8007120:	4256      	negs	r6, r2
 8007122:	4316      	orrs	r6, r2
 8007124:	0c4b      	lsrs	r3, r1, #17
 8007126:	0b36      	lsrs	r6, r6, #12
 8007128:	4934      	ldr	r1, [pc, #208]	; (80071fc <rint+0x10c>)
 800712a:	045b      	lsls	r3, r3, #17
 800712c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8007130:	ea46 0503 	orr.w	r5, r6, r3
 8007134:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8007138:	4602      	mov	r2, r0
 800713a:	462b      	mov	r3, r5
 800713c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8007140:	4620      	mov	r0, r4
 8007142:	4629      	mov	r1, r5
 8007144:	f7f9 f80a 	bl	800015c <__adddf3>
 8007148:	e9cd 0100 	strd	r0, r1, [sp]
 800714c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007150:	462b      	mov	r3, r5
 8007152:	4622      	mov	r2, r4
 8007154:	f7f9 f800 	bl	8000158 <__aeabi_dsub>
 8007158:	4604      	mov	r4, r0
 800715a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800715e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8007162:	4620      	mov	r0, r4
 8007164:	4629      	mov	r1, r5
 8007166:	b003      	add	sp, #12
 8007168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800716a:	4a25      	ldr	r2, [pc, #148]	; (8007200 <rint+0x110>)
 800716c:	fa42 f20c 	asr.w	r2, r2, ip
 8007170:	4011      	ands	r1, r2
 8007172:	4301      	orrs	r1, r0
 8007174:	d0f5      	beq.n	8007162 <rint+0x72>
 8007176:	0852      	lsrs	r2, r2, #1
 8007178:	ea05 0102 	and.w	r1, r5, r2
 800717c:	ea50 0601 	orrs.w	r6, r0, r1
 8007180:	d00c      	beq.n	800719c <rint+0xac>
 8007182:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007186:	f1bc 0f13 	cmp.w	ip, #19
 800718a:	bf0c      	ite	eq
 800718c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8007190:	2600      	movne	r6, #0
 8007192:	ea25 0202 	bic.w	r2, r5, r2
 8007196:	fa43 f30c 	asr.w	r3, r3, ip
 800719a:	4313      	orrs	r3, r2
 800719c:	4917      	ldr	r1, [pc, #92]	; (80071fc <rint+0x10c>)
 800719e:	4632      	mov	r2, r6
 80071a0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80071a4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071a8:	4620      	mov	r0, r4
 80071aa:	4629      	mov	r1, r5
 80071ac:	f7f8 ffd6 	bl	800015c <__adddf3>
 80071b0:	e9cd 0100 	strd	r0, r1, [sp]
 80071b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071b8:	4622      	mov	r2, r4
 80071ba:	462b      	mov	r3, r5
 80071bc:	f7f8 ffcc 	bl	8000158 <__aeabi_dsub>
 80071c0:	e008      	b.n	80071d4 <rint+0xe4>
 80071c2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80071c6:	dd08      	ble.n	80071da <rint+0xea>
 80071c8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80071cc:	d1c9      	bne.n	8007162 <rint+0x72>
 80071ce:	4602      	mov	r2, r0
 80071d0:	f7f8 ffc4 	bl	800015c <__adddf3>
 80071d4:	4604      	mov	r4, r0
 80071d6:	460d      	mov	r5, r1
 80071d8:	e7c3      	b.n	8007162 <rint+0x72>
 80071da:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 80071de:	f04f 32ff 	mov.w	r2, #4294967295
 80071e2:	40ca      	lsrs	r2, r1
 80071e4:	4210      	tst	r0, r2
 80071e6:	d0bc      	beq.n	8007162 <rint+0x72>
 80071e8:	0852      	lsrs	r2, r2, #1
 80071ea:	4210      	tst	r0, r2
 80071ec:	bf1f      	itttt	ne
 80071ee:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 80071f2:	ea20 0202 	bicne.w	r2, r0, r2
 80071f6:	410e      	asrne	r6, r1
 80071f8:	4316      	orrne	r6, r2
 80071fa:	e7cf      	b.n	800719c <rint+0xac>
 80071fc:	08007370 	.word	0x08007370
 8007200:	000fffff 	.word	0x000fffff
 8007204:	00000000 	.word	0x00000000

08007208 <scalbn>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	4616      	mov	r6, r2
 800720c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007210:	4604      	mov	r4, r0
 8007212:	460d      	mov	r5, r1
 8007214:	460b      	mov	r3, r1
 8007216:	b982      	cbnz	r2, 800723a <scalbn+0x32>
 8007218:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800721c:	4303      	orrs	r3, r0
 800721e:	d034      	beq.n	800728a <scalbn+0x82>
 8007220:	4b2d      	ldr	r3, [pc, #180]	; (80072d8 <scalbn+0xd0>)
 8007222:	2200      	movs	r2, #0
 8007224:	f7f9 f950 	bl	80004c8 <__aeabi_dmul>
 8007228:	4b2c      	ldr	r3, [pc, #176]	; (80072dc <scalbn+0xd4>)
 800722a:	4604      	mov	r4, r0
 800722c:	429e      	cmp	r6, r3
 800722e:	460d      	mov	r5, r1
 8007230:	da0d      	bge.n	800724e <scalbn+0x46>
 8007232:	a325      	add	r3, pc, #148	; (adr r3, 80072c8 <scalbn+0xc0>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	e01c      	b.n	8007274 <scalbn+0x6c>
 800723a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800723e:	42ba      	cmp	r2, r7
 8007240:	d109      	bne.n	8007256 <scalbn+0x4e>
 8007242:	4602      	mov	r2, r0
 8007244:	f7f8 ff8a 	bl	800015c <__adddf3>
 8007248:	4604      	mov	r4, r0
 800724a:	460d      	mov	r5, r1
 800724c:	e01d      	b.n	800728a <scalbn+0x82>
 800724e:	460b      	mov	r3, r1
 8007250:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007254:	3a36      	subs	r2, #54	; 0x36
 8007256:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800725a:	4432      	add	r2, r6
 800725c:	428a      	cmp	r2, r1
 800725e:	dd0c      	ble.n	800727a <scalbn+0x72>
 8007260:	4622      	mov	r2, r4
 8007262:	462b      	mov	r3, r5
 8007264:	a11a      	add	r1, pc, #104	; (adr r1, 80072d0 <scalbn+0xc8>)
 8007266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800726a:	f000 f83b 	bl	80072e4 <copysign>
 800726e:	a318      	add	r3, pc, #96	; (adr r3, 80072d0 <scalbn+0xc8>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f7f9 f928 	bl	80004c8 <__aeabi_dmul>
 8007278:	e7e6      	b.n	8007248 <scalbn+0x40>
 800727a:	2a00      	cmp	r2, #0
 800727c:	dd08      	ble.n	8007290 <scalbn+0x88>
 800727e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007282:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007286:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800728a:	4620      	mov	r0, r4
 800728c:	4629      	mov	r1, r5
 800728e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007290:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007294:	da0b      	bge.n	80072ae <scalbn+0xa6>
 8007296:	f24c 3350 	movw	r3, #50000	; 0xc350
 800729a:	429e      	cmp	r6, r3
 800729c:	4622      	mov	r2, r4
 800729e:	462b      	mov	r3, r5
 80072a0:	dce0      	bgt.n	8007264 <scalbn+0x5c>
 80072a2:	a109      	add	r1, pc, #36	; (adr r1, 80072c8 <scalbn+0xc0>)
 80072a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072a8:	f000 f81c 	bl	80072e4 <copysign>
 80072ac:	e7c1      	b.n	8007232 <scalbn+0x2a>
 80072ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80072b2:	3236      	adds	r2, #54	; 0x36
 80072b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072b8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80072bc:	4620      	mov	r0, r4
 80072be:	4629      	mov	r1, r5
 80072c0:	2200      	movs	r2, #0
 80072c2:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <scalbn+0xd8>)
 80072c4:	e7d6      	b.n	8007274 <scalbn+0x6c>
 80072c6:	bf00      	nop
 80072c8:	c2f8f359 	.word	0xc2f8f359
 80072cc:	01a56e1f 	.word	0x01a56e1f
 80072d0:	8800759c 	.word	0x8800759c
 80072d4:	7e37e43c 	.word	0x7e37e43c
 80072d8:	43500000 	.word	0x43500000
 80072dc:	ffff3cb0 	.word	0xffff3cb0
 80072e0:	3c900000 	.word	0x3c900000

080072e4 <copysign>:
 80072e4:	b530      	push	{r4, r5, lr}
 80072e6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80072ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ee:	ea42 0503 	orr.w	r5, r2, r3
 80072f2:	4629      	mov	r1, r5
 80072f4:	bd30      	pop	{r4, r5, pc}
	...

080072f8 <_init>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	bf00      	nop
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr

08007304 <_fini>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr
