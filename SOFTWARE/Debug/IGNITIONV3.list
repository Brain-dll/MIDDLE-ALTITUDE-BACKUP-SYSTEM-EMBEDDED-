
IGNITIONV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007248  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007358  08007358  00017358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073c8  080073c8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080073c8  080073c8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073c8  080073c8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073c8  080073c8  000173c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080073d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000090  0800745c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  0800745c  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcc9  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e06  00000000  00000000  0002dd7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  0002fb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  00030960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000127b8  00000000  00000000  00031668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b3dd  00000000  00000000  00043e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072070  00000000  00000000  0004f1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c126d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004024  00000000  00000000  000c12e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08007340 	.word	0x08007340

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08007340 	.word	0x08007340

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2lz>:
 80010c0:	b510      	push	{r4, lr}
 80010c2:	2100      	movs	r1, #0
 80010c4:	4604      	mov	r4, r0
 80010c6:	f7ff ffd3 	bl	8001070 <__aeabi_fcmplt>
 80010ca:	b920      	cbnz	r0, 80010d6 <__aeabi_f2lz+0x16>
 80010cc:	4620      	mov	r0, r4
 80010ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010d2:	f000 b809 	b.w	80010e8 <__aeabi_f2ulz>
 80010d6:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80010da:	f000 f805 	bl	80010e8 <__aeabi_f2ulz>
 80010de:	4240      	negs	r0, r0
 80010e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop

080010e8 <__aeabi_f2ulz>:
 80010e8:	b5d0      	push	{r4, r6, r7, lr}
 80010ea:	f7ff f995 	bl	8000418 <__aeabi_f2d>
 80010ee:	2200      	movs	r2, #0
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <__aeabi_f2ulz+0x40>)
 80010f2:	4606      	mov	r6, r0
 80010f4:	460f      	mov	r7, r1
 80010f6:	f7ff f9e7 	bl	80004c8 <__aeabi_dmul>
 80010fa:	f000 f819 	bl	8001130 <__aeabi_d2uiz>
 80010fe:	4604      	mov	r4, r0
 8001100:	f7ff f968 	bl	80003d4 <__aeabi_ui2d>
 8001104:	2200      	movs	r2, #0
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <__aeabi_f2ulz+0x44>)
 8001108:	f7ff f9de 	bl	80004c8 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4630      	mov	r0, r6
 8001112:	4639      	mov	r1, r7
 8001114:	f7ff f820 	bl	8000158 <__aeabi_dsub>
 8001118:	f000 f80a 	bl	8001130 <__aeabi_d2uiz>
 800111c:	2200      	movs	r2, #0
 800111e:	4623      	mov	r3, r4
 8001120:	4310      	orrs	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	bdd0      	pop	{r4, r6, r7, pc}
 8001126:	bf00      	nop
 8001128:	3df00000 	.word	0x3df00000
 800112c:	41f00000 	.word	0x41f00000

08001130 <__aeabi_d2uiz>:
 8001130:	004a      	lsls	r2, r1, #1
 8001132:	d211      	bcs.n	8001158 <__aeabi_d2uiz+0x28>
 8001134:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001138:	d211      	bcs.n	800115e <__aeabi_d2uiz+0x2e>
 800113a:	d50d      	bpl.n	8001158 <__aeabi_d2uiz+0x28>
 800113c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001140:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001144:	d40e      	bmi.n	8001164 <__aeabi_d2uiz+0x34>
 8001146:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800114a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001152:	fa23 f002 	lsr.w	r0, r3, r2
 8001156:	4770      	bx	lr
 8001158:	f04f 0000 	mov.w	r0, #0
 800115c:	4770      	bx	lr
 800115e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001162:	d102      	bne.n	800116a <__aeabi_d2uiz+0x3a>
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <ADXL345_Init>:
int16_t Ax, Ay, Az;

extern uint8_t ACC_FAIL;

void ADXL345_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, ADXL345_READ_ADRESS, ADXL345_ID, 1, &ID_RESPONS, 1, ADXL345_TIMEOUT);
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <ADXL345_Init+0x7c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b29a      	uxth	r2, r3
 800117c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	2301      	movs	r3, #1
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <ADXL345_Init+0x80>)
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	21a7      	movs	r1, #167	; 0xa7
 800118e:	4819      	ldr	r0, [pc, #100]	; (80011f4 <ADXL345_Init+0x84>)
 8001190:	f002 ff38 	bl	8004004 <HAL_I2C_Mem_Read>
	ACC_FAIL = 0;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <ADXL345_Init+0x88>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_IsDeviceReady(&hi2c1, ADXL345_WRITE_ADRESS, 1, ADXL345_TIMEOUT) != HAL_OK  && ID_RESPONS != 0xE5)
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	2201      	movs	r2, #1
 80011a0:	21a6      	movs	r1, #166	; 0xa6
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <ADXL345_Init+0x84>)
 80011a4:	f003 f990 	bl	80044c8 <HAL_I2C_IsDeviceReady>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d017      	beq.n	80011de <ADXL345_Init+0x6e>
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <ADXL345_Init+0x80>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2be5      	cmp	r3, #229	; 0xe5
 80011b4:	d013      	beq.n	80011de <ADXL345_Init+0x6e>
	{
		for (uint8_t i = 0 ; i < 4 ; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e00a      	b.n	80011d2 <ADXL345_Init+0x62>
		    {
		  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80011bc:	2108      	movs	r1, #8
 80011be:	480f      	ldr	r0, [pc, #60]	; (80011fc <ADXL345_Init+0x8c>)
 80011c0:	f002 f97c 	bl	80034bc <HAL_GPIO_TogglePin>
		  	  HAL_Delay(500);
 80011c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c8:	f001 fccc 	bl	8002b64 <HAL_Delay>
		for (uint8_t i = 0 ; i < 4 ; i++)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	3301      	adds	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d9f1      	bls.n	80011bc <ADXL345_Init+0x4c>
		    }
		ACC_FAIL = 1;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <ADXL345_Init+0x88>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
	}
	ADXL345_SetCalibration();
 80011de:	f000 f80f 	bl	8001200 <ADXL345_SetCalibration>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000ac 	.word	0x200000ac
 80011f0:	200000ad 	.word	0x200000ad
 80011f4:	200001e0 	.word	0x200001e0
 80011f8:	2000017c 	.word	0x2000017c
 80011fc:	40010800 	.word	0x40010800

08001200 <ADXL345_SetCalibration>:

void ADXL345_SetCalibration(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af04      	add	r7, sp, #16
	// RESET POWER CONTROL REGISTER
	HAL_I2C_Mem_Write(&hi2c1, ADXL345_WRITE_ADRESS, POWER_CTL, 1, &POWER_RESET, 1, ADXL345_TIMEOUT);
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <ADXL345_SetCalibration+0xc0>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b29a      	uxth	r2, r3
 800120c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <ADXL345_SetCalibration+0xc4>)
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	21a6      	movs	r1, #166	; 0xa6
 800121e:	482a      	ldr	r0, [pc, #168]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 8001220:	f002 fdf6 	bl	8003e10 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(&hi2c1, ADXL345_WRITE_ADRESS, POWER_CTL, 1, &control, 1, ADXL345_TIMEOUT);
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <ADXL345_SetCalibration+0xc0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b29a      	uxth	r2, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <ADXL345_SetCalibration+0xcc>)
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	21a6      	movs	r1, #166	; 0xa6
 800123c:	4822      	ldr	r0, [pc, #136]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 800123e:	f002 fee1 	bl	8004004 <HAL_I2C_Mem_Read>

	// MEASUREMENT MODE
	HAL_I2C_Mem_Write(&hi2c1, ADXL345_WRITE_ADRESS, POWER_CTL, 1, &POWER_SET, 1, ADXL345_TIMEOUT);
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <ADXL345_SetCalibration+0xc0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2301      	movs	r3, #1
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <ADXL345_SetCalibration+0xd0>)
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	21a6      	movs	r1, #166	; 0xa6
 800125a:	481b      	ldr	r0, [pc, #108]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 800125c:	f002 fdd8 	bl	8003e10 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(&hi2c1, ADXL345_WRITE_ADRESS, POWER_CTL, 1, &control, 1, ADXL345_TIMEOUT);
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <ADXL345_SetCalibration+0xc0>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b29a      	uxth	r2, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9302      	str	r3, [sp, #8]
 800126c:	2301      	movs	r3, #1
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <ADXL345_SetCalibration+0xcc>)
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	21a6      	movs	r1, #166	; 0xa6
 8001278:	4813      	ldr	r0, [pc, #76]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 800127a:	f002 fec3 	bl	8004004 <HAL_I2C_Mem_Read>

	// G RANGE SELECTION
	HAL_I2C_Mem_Write(&hi2c1, ADXL345_WRITE_ADRESS, DATA_FORMAT, 1, &DATA_FORMAT_RATE, 1, ADXL345_TIMEOUT);
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <ADXL345_SetCalibration+0xd4>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b29a      	uxth	r2, r3
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2301      	movs	r3, #1
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <ADXL345_SetCalibration+0xd8>)
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	21a6      	movs	r1, #166	; 0xa6
 8001296:	480c      	ldr	r0, [pc, #48]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 8001298:	f002 fdba 	bl	8003e10 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Read(&hi2c1, ADXL345_WRITE_ADRESS, DATA_FORMAT, 1, &control, 1, ADXL345_TIMEOUT);
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <ADXL345_SetCalibration+0xd4>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <ADXL345_SetCalibration+0xcc>)
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	21a6      	movs	r1, #166	; 0xa6
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <ADXL345_SetCalibration+0xc8>)
 80012b6:	f002 fea5 	bl	8004004 <HAL_I2C_Mem_Read>

	//HAL_I2C_Mem_Write(&hi2c1, ADXL345_WRITE_ADRESS, ADXL_OFFSET_ADD, 1, &ADXL_OFFSET, 1, ADXL345_TIMEOUT);
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000000 	.word	0x20000000
 80012c4:	200000ae 	.word	0x200000ae
 80012c8:	200001e0 	.word	0x200001e0
 80012cc:	200000b6 	.word	0x200000b6
 80012d0:	20000001 	.word	0x20000001
 80012d4:	20000002 	.word	0x20000002
 80012d8:	20000003 	.word	0x20000003

080012dc <ADXL345_GetUnCompanseted_Accelerations>:

void ADXL345_GetUnCompanseted_Accelerations(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, ADXL345_READ_ADRESS, ADXL_DATA_ADRESS, 1, ADXL_DATA, ADXL_DATA_ADRESS_LENGTH, ADXL345_TIMEOUT);
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <ADXL345_GetUnCompanseted_Accelerations+0x74>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b299      	uxth	r1, r3
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <ADXL345_GetUnCompanseted_Accelerations+0x78>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f2:	9202      	str	r2, [sp, #8]
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2301      	movs	r3, #1
 80012fc:	460a      	mov	r2, r1
 80012fe:	21a7      	movs	r1, #167	; 0xa7
 8001300:	4816      	ldr	r0, [pc, #88]	; (800135c <ADXL345_GetUnCompanseted_Accelerations+0x80>)
 8001302:	f002 fe7f 	bl	8004004 <HAL_I2C_Mem_Read>

	Ax = /*(int16_t)*/(ADXL_DATA[1] << 8) | ADXL_DATA[0];//  x values in Data[1] and Data[0]
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <ADXL345_GetUnCompanseted_Accelerations+0x84>)
 800131a:	801a      	strh	r2, [r3, #0]
	Ay = /*(int16_t)*/(ADXL_DATA[3] << 8) | ADXL_DATA[2];//  y values in Data[3] and Data[2]
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 8001326:	789b      	ldrb	r3, [r3, #2]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <ADXL345_GetUnCompanseted_Accelerations+0x88>)
 8001330:	801a      	strh	r2, [r3, #0]
	Az = /*(int16_t)*/(ADXL_DATA[5] << 8) | ADXL_DATA[4];//  z values in Data[5] and Data[4]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 8001334:	795b      	ldrb	r3, [r3, #5]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <ADXL345_GetUnCompanseted_Accelerations+0x7c>)
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <ADXL345_GetUnCompanseted_Accelerations+0x8c>)
 8001346:	801a      	strh	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000004 	.word	0x20000004
 8001354:	20000005 	.word	0x20000005
 8001358:	200000b0 	.word	0x200000b0
 800135c:	200001e0 	.word	0x200001e0
 8001360:	20000192 	.word	0x20000192
 8001364:	20000190 	.word	0x20000190
 8001368:	20000194 	.word	0x20000194
 800136c:	00000000 	.word	0x00000000

08001370 <ADXL345_GetZaxis>:
{
	ADXL345_GetUnCompanseted_Accelerations();
	return Ay * .0312;
}
float ADXL345_GetZaxis(void)
{
 8001370:	b598      	push	{r3, r4, r7, lr}
 8001372:	af00      	add	r7, sp, #0
	ADXL345_GetUnCompanseted_Accelerations();
 8001374:	f7ff ffb2 	bl	80012dc <ADXL345_GetUnCompanseted_Accelerations>
	return Az * .0312;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <ADXL345_GetZaxis+0x38>)
 800137a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f838 	bl	80003f4 <__aeabi_i2d>
 8001384:	a306      	add	r3, pc, #24	; (adr r3, 80013a0 <ADXL345_GetZaxis+0x30>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff f89d 	bl	80004c8 <__aeabi_dmul>
 800138e:	4603      	mov	r3, r0
 8001390:	460c      	mov	r4, r1
 8001392:	4618      	mov	r0, r3
 8001394:	4621      	mov	r1, r4
 8001396:	f7ff fb6f 	bl	8000a78 <__aeabi_d2f>
 800139a:	4603      	mov	r3, r0
}
 800139c:	4618      	mov	r0, r3
 800139e:	bd98      	pop	{r3, r4, r7, pc}
 80013a0:	8e8a71de 	.word	0x8e8a71de
 80013a4:	3f9ff2e4 	.word	0x3f9ff2e4
 80013a8:	20000194 	.word	0x20000194

080013ac <ADXL345_Zaxiss_filter>:
float ADXL345_Zaxiss_filter(void)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
	float Zf[5] = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
		for (uint8_t i = 0 ; i < 5 ; i++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]
 80013c4:	e00c      	b.n	80013e0 <ADXL345_Zaxiss_filter+0x34>
			Zf[i] = ADXL345_GetZaxis();
 80013c6:	7dfc      	ldrb	r4, [r7, #23]
 80013c8:	f7ff ffd2 	bl	8001370 <ADXL345_GetZaxis>
 80013cc:	4602      	mov	r2, r0
 80013ce:	00a3      	lsls	r3, r4, #2
 80013d0:	f107 0118 	add.w	r1, r7, #24
 80013d4:	440b      	add	r3, r1
 80013d6:	f843 2c18 	str.w	r2, [r3, #-24]
		for (uint8_t i = 0 ; i < 5 ; i++)
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	3301      	adds	r3, #1
 80013de:	75fb      	strb	r3, [r7, #23]
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d9ef      	bls.n	80013c6 <ADXL345_Zaxiss_filter+0x1a>
		return Array_sort_ADXL(Zf,5);
 80013e6:	463b      	mov	r3, r7
 80013e8:	2105      	movs	r1, #5
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f805 	bl	80013fa <Array_sort_ADXL>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}

080013fa <Array_sort_ADXL>:
float Array_sort_ADXL(float *array, int n) {
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	int i = 0, j = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
	float temp = 0.0;
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < n; i++) {
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e036      	b.n	8001486 <Array_sort_ADXL+0x8c>
		for (j = 0; j < n - 1; j++) {
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	e02b      	b.n	8001476 <Array_sort_ADXL+0x7c>
			if (array[j] > array[j + 1]) {
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	3301      	adds	r3, #1
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fe39 	bl	80010ac <__aeabi_fcmpgt>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d017      	beq.n	8001470 <Array_sort_ADXL+0x76>
				temp = array[j];
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]
				array[j] = array[j + 1];
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	3301      	adds	r3, #1
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	441a      	add	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	440b      	add	r3, r1
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	601a      	str	r2, [r3, #0]
				array[j + 1] = temp;
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	3301      	adds	r3, #1
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	601a      	str	r2, [r3, #0]
		for (j = 0; j < n - 1; j++) {
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	3301      	adds	r3, #1
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbce      	blt.n	800141e <Array_sort_ADXL+0x24>
	for (i = 0; i < n; i++) {
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	dbc4      	blt.n	8001418 <Array_sort_ADXL+0x1e>
			}
		}
	}
	//return array[2];
	return array[n / 2];
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	0fda      	lsrs	r2, r3, #31
 8001492:	4413      	add	r3, r2
 8001494:	105b      	asrs	r3, r3, #1
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	681b      	ldr	r3, [r3, #0]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <MS5611_Init>:
float P0 = 1013.25;		// sea level air pressure
//float P0 = 1012.0;	// ADANA air pressure
float T = 0;
float* pte = &T;

void MS5611_Init(void) {
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af02      	add	r7, sp, #8

	if (HAL_I2C_IsDeviceReady(&hi2c1, MS5611_WRITE_ADRESS, 1, 100) != HAL_OK) {
 80014ae:	2364      	movs	r3, #100	; 0x64
 80014b0:	2201      	movs	r2, #1
 80014b2:	21ee      	movs	r1, #238	; 0xee
 80014b4:	4871      	ldr	r0, [pc, #452]	; (800167c <MS5611_Init+0x1d4>)
 80014b6:	f003 f807 	bl	80044c8 <HAL_I2C_IsDeviceReady>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d010      	beq.n	80014e2 <MS5611_Init+0x3a>
		for (uint8_t i = 0; i < 6; i++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	e00a      	b.n	80014dc <MS5611_Init+0x34>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80014c6:	2108      	movs	r1, #8
 80014c8:	486d      	ldr	r0, [pc, #436]	; (8001680 <MS5611_Init+0x1d8>)
 80014ca:	f001 fff7 	bl	80034bc <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 80014ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d2:	f001 fb47 	bl	8002b64 <HAL_Delay>
		for (uint8_t i = 0; i < 6; i++) {
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	3301      	adds	r3, #1
 80014da:	71fb      	strb	r3, [r7, #7]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d9f1      	bls.n	80014c6 <MS5611_Init+0x1e>
		}
	}

	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMFAB, 1,
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2301      	movs	r3, #1
 80014ea:	4a66      	ldr	r2, [pc, #408]	; (8001684 <MS5611_Init+0x1dc>)
 80014ec:	21ee      	movs	r1, #238	; 0xee
 80014ee:	4863      	ldr	r0, [pc, #396]	; (800167c <MS5611_Init+0x1d4>)
 80014f0:	f002 f936 	bl	8003760 <HAL_I2C_Master_Transmit>
			1000);
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[0], 2, 1000);
 80014f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2302      	movs	r3, #2
 80014fc:	4a62      	ldr	r2, [pc, #392]	; (8001688 <MS5611_Init+0x1e0>)
 80014fe:	21ef      	movs	r1, #239	; 0xef
 8001500:	485e      	ldr	r0, [pc, #376]	; (800167c <MS5611_Init+0x1d4>)
 8001502:	f002 fa2b 	bl	800395c <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC1, 1, 1000);
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2301      	movs	r3, #1
 800150e:	4a5f      	ldr	r2, [pc, #380]	; (800168c <MS5611_Init+0x1e4>)
 8001510:	21ee      	movs	r1, #238	; 0xee
 8001512:	485a      	ldr	r0, [pc, #360]	; (800167c <MS5611_Init+0x1d4>)
 8001514:	f002 f924 	bl	8003760 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[2], 2, 1000);
 8001518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2302      	movs	r3, #2
 8001520:	4a5b      	ldr	r2, [pc, #364]	; (8001690 <MS5611_Init+0x1e8>)
 8001522:	21ef      	movs	r1, #239	; 0xef
 8001524:	4855      	ldr	r0, [pc, #340]	; (800167c <MS5611_Init+0x1d4>)
 8001526:	f002 fa19 	bl	800395c <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC2, 1, 1000);
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	4a58      	ldr	r2, [pc, #352]	; (8001694 <MS5611_Init+0x1ec>)
 8001534:	21ee      	movs	r1, #238	; 0xee
 8001536:	4851      	ldr	r0, [pc, #324]	; (800167c <MS5611_Init+0x1d4>)
 8001538:	f002 f912 	bl	8003760 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[4], 2, 1000);
 800153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2302      	movs	r3, #2
 8001544:	4a54      	ldr	r2, [pc, #336]	; (8001698 <MS5611_Init+0x1f0>)
 8001546:	21ef      	movs	r1, #239	; 0xef
 8001548:	484c      	ldr	r0, [pc, #304]	; (800167c <MS5611_Init+0x1d4>)
 800154a:	f002 fa07 	bl	800395c <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC3, 1, 1000);
 800154e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2301      	movs	r3, #1
 8001556:	4a51      	ldr	r2, [pc, #324]	; (800169c <MS5611_Init+0x1f4>)
 8001558:	21ee      	movs	r1, #238	; 0xee
 800155a:	4848      	ldr	r0, [pc, #288]	; (800167c <MS5611_Init+0x1d4>)
 800155c:	f002 f900 	bl	8003760 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[6], 2, 1000);
 8001560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	2302      	movs	r3, #2
 8001568:	4a4d      	ldr	r2, [pc, #308]	; (80016a0 <MS5611_Init+0x1f8>)
 800156a:	21ef      	movs	r1, #239	; 0xef
 800156c:	4843      	ldr	r0, [pc, #268]	; (800167c <MS5611_Init+0x1d4>)
 800156e:	f002 f9f5 	bl	800395c <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC4, 1, 1000);
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <MS5611_Init+0x1fc>)
 800157c:	21ee      	movs	r1, #238	; 0xee
 800157e:	483f      	ldr	r0, [pc, #252]	; (800167c <MS5611_Init+0x1d4>)
 8001580:	f002 f8ee 	bl	8003760 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[8], 2, 1000);
 8001584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2302      	movs	r3, #2
 800158c:	4a46      	ldr	r2, [pc, #280]	; (80016a8 <MS5611_Init+0x200>)
 800158e:	21ef      	movs	r1, #239	; 0xef
 8001590:	483a      	ldr	r0, [pc, #232]	; (800167c <MS5611_Init+0x1d4>)
 8001592:	f002 f9e3 	bl	800395c <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC5, 1, 1000);
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2301      	movs	r3, #1
 800159e:	4a43      	ldr	r2, [pc, #268]	; (80016ac <MS5611_Init+0x204>)
 80015a0:	21ee      	movs	r1, #238	; 0xee
 80015a2:	4836      	ldr	r0, [pc, #216]	; (800167c <MS5611_Init+0x1d4>)
 80015a4:	f002 f8dc 	bl	8003760 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[10], 2, 1000);
 80015a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2302      	movs	r3, #2
 80015b0:	4a3f      	ldr	r2, [pc, #252]	; (80016b0 <MS5611_Init+0x208>)
 80015b2:	21ef      	movs	r1, #239	; 0xef
 80015b4:	4831      	ldr	r0, [pc, #196]	; (800167c <MS5611_Init+0x1d4>)
 80015b6:	f002 f9d1 	bl	800395c <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC6, 1, 1000);
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	4a3c      	ldr	r2, [pc, #240]	; (80016b4 <MS5611_Init+0x20c>)
 80015c4:	21ee      	movs	r1, #238	; 0xee
 80015c6:	482d      	ldr	r0, [pc, #180]	; (800167c <MS5611_Init+0x1d4>)
 80015c8:	f002 f8ca 	bl	8003760 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[12], 2, 1000);
 80015cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2302      	movs	r3, #2
 80015d4:	4a38      	ldr	r2, [pc, #224]	; (80016b8 <MS5611_Init+0x210>)
 80015d6:	21ef      	movs	r1, #239	; 0xef
 80015d8:	4828      	ldr	r0, [pc, #160]	; (800167c <MS5611_Init+0x1d4>)
 80015da:	f002 f9bf 	bl	800395c <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMCRC, 1,
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2301      	movs	r3, #1
 80015e6:	4a35      	ldr	r2, [pc, #212]	; (80016bc <MS5611_Init+0x214>)
 80015e8:	21ee      	movs	r1, #238	; 0xee
 80015ea:	4824      	ldr	r0, [pc, #144]	; (800167c <MS5611_Init+0x1d4>)
 80015ec:	f002 f8b8 	bl	8003760 <HAL_I2C_Master_Transmit>
			1000);
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[14], 2, 1000);
 80015f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2302      	movs	r3, #2
 80015f8:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <MS5611_Init+0x218>)
 80015fa:	21ef      	movs	r1, #239	; 0xef
 80015fc:	481f      	ldr	r0, [pc, #124]	; (800167c <MS5611_Init+0x1d4>)
 80015fe:	f002 f9ad 	bl	800395c <HAL_I2C_Master_Receive>

	for (uint8_t x = 2; x < 14; x += 2) {
 8001602:	2302      	movs	r3, #2
 8001604:	71bb      	strb	r3, [r7, #6]
 8001606:	e016      	b.n	8001636 <MS5611_Init+0x18e>
		C[(x / 2) - 1] = fab_data[x] << 8 | fab_data[x + 1];
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <MS5611_Init+0x1e0>)
 800160c:	5cd3      	ldrb	r3, [r2, r3]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	79bb      	ldrb	r3, [r7, #6]
 8001614:	3301      	adds	r3, #1
 8001616:	491c      	ldr	r1, [pc, #112]	; (8001688 <MS5611_Init+0x1e0>)
 8001618:	5ccb      	ldrb	r3, [r1, r3]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21a      	sxth	r2, r3
 8001620:	79bb      	ldrb	r3, [r7, #6]
 8001622:	085b      	lsrs	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	b291      	uxth	r1, r2
 800162a:	4a26      	ldr	r2, [pc, #152]	; (80016c4 <MS5611_Init+0x21c>)
 800162c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t x = 2; x < 14; x += 2) {
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	3302      	adds	r3, #2
 8001634:	71bb      	strb	r3, [r7, #6]
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	2b0d      	cmp	r3, #13
 800163a:	d9e5      	bls.n	8001608 <MS5611_Init+0x160>
	}

	BASE = 0;
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <MS5611_Init+0x220>)
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0 ; i < sizeof(BASE_P) / sizeof(BASE_P[0]) ; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	717b      	strb	r3, [r7, #5]
 8001648:	e009      	b.n	800165e <MS5611_Init+0x1b6>
	{
		BASE_P[i] = MS5611_ReadMedian_Altitude();
 800164a:	797c      	ldrb	r4, [r7, #5]
 800164c:	f000 fa7a 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 8001650:	4602      	mov	r2, r0
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <MS5611_Init+0x224>)
 8001654:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(uint8_t i = 0 ; i < sizeof(BASE_P) / sizeof(BASE_P[0]) ; i++)
 8001658:	797b      	ldrb	r3, [r7, #5]
 800165a:	3301      	adds	r3, #1
 800165c:	717b      	strb	r3, [r7, #5]
 800165e:	797b      	ldrb	r3, [r7, #5]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d9f2      	bls.n	800164a <MS5611_Init+0x1a2>
	}
	BASE = Array_sort_MS(BASE_P, sizeof(BASE_P) / sizeof(BASE_P[0]));
 8001664:	2103      	movs	r1, #3
 8001666:	4819      	ldr	r0, [pc, #100]	; (80016cc <MS5611_Init+0x224>)
 8001668:	f000 fa93 	bl	8001b92 <Array_sort_MS>
 800166c:	4602      	mov	r2, r0
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MS5611_Init+0x220>)
 8001670:	601a      	str	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}
 800167a:	bf00      	nop
 800167c:	200001e0 	.word	0x200001e0
 8001680:	40010800 	.word	0x40010800
 8001684:	20000008 	.word	0x20000008
 8001688:	200000c8 	.word	0x200000c8
 800168c:	20000009 	.word	0x20000009
 8001690:	200000ca 	.word	0x200000ca
 8001694:	2000000a 	.word	0x2000000a
 8001698:	200000cc 	.word	0x200000cc
 800169c:	2000000b 	.word	0x2000000b
 80016a0:	200000ce 	.word	0x200000ce
 80016a4:	2000000c 	.word	0x2000000c
 80016a8:	200000d0 	.word	0x200000d0
 80016ac:	2000000d 	.word	0x2000000d
 80016b0:	200000d2 	.word	0x200000d2
 80016b4:	2000000e 	.word	0x2000000e
 80016b8:	200000d4 	.word	0x200000d4
 80016bc:	2000000f 	.word	0x2000000f
 80016c0:	200000d6 	.word	0x200000d6
 80016c4:	200000e0 	.word	0x200000e0
 80016c8:	200000c4 	.word	0x200000c4
 80016cc:	200000b8 	.word	0x200000b8

080016d0 <MS5611_ReadTemperature>:

float MS5611_ReadTemperature(void)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &D2_4096, 1, 1000);
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2301      	movs	r3, #1
 80016de:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <MS5611_ReadTemperature+0xfc>)
 80016e0:	21ee      	movs	r1, #238	; 0xee
 80016e2:	483b      	ldr	r0, [pc, #236]	; (80017d0 <MS5611_ReadTemperature+0x100>)
 80016e4:	f002 f83c 	bl	8003760 <HAL_I2C_Master_Transmit>
	HAL_Delay(9);
 80016e8:	2009      	movs	r0, #9
 80016ea:	f001 fa3b 	bl	8002b64 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_ADC, 1, 1000);
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	4a37      	ldr	r2, [pc, #220]	; (80017d4 <MS5611_ReadTemperature+0x104>)
 80016f8:	21ee      	movs	r1, #238	; 0xee
 80016fa:	4835      	ldr	r0, [pc, #212]	; (80017d0 <MS5611_ReadTemperature+0x100>)
 80016fc:	f002 f830 	bl	8003760 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, ADC, 3, 1000);
 8001700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2303      	movs	r3, #3
 8001708:	4a33      	ldr	r2, [pc, #204]	; (80017d8 <MS5611_ReadTemperature+0x108>)
 800170a:	21ef      	movs	r1, #239	; 0xef
 800170c:	4830      	ldr	r0, [pc, #192]	; (80017d0 <MS5611_ReadTemperature+0x100>)
 800170e:	f002 f925 	bl	800395c <HAL_I2C_Master_Receive>
	D2 = ADC[0] << 16 | ADC[1] << 8 | ADC[2];
 8001712:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <MS5611_ReadTemperature+0x108>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	041a      	lsls	r2, r3, #16
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <MS5611_ReadTemperature+0x108>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	4313      	orrs	r3, r2
 8001720:	4a2d      	ldr	r2, [pc, #180]	; (80017d8 <MS5611_ReadTemperature+0x108>)
 8001722:	7892      	ldrb	r2, [r2, #2]
 8001724:	4313      	orrs	r3, r2
 8001726:	461a      	mov	r2, r3
 8001728:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <MS5611_ReadTemperature+0x10c>)
 800172a:	601a      	str	r2, [r3, #0]

	dT = D2 - C[4] * pow(2, 8);
 800172c:	4b2b      	ldr	r3, [pc, #172]	; (80017dc <MS5611_ReadTemperature+0x10c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fe4f 	bl	80003d4 <__aeabi_ui2d>
 8001736:	4604      	mov	r4, r0
 8001738:	460d      	mov	r5, r1
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MS5611_ReadTemperature+0x110>)
 800173c:	891b      	ldrh	r3, [r3, #8]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fe58 	bl	80003f4 <__aeabi_i2d>
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <MS5611_ReadTemperature+0x114>)
 800174a:	f7fe febd 	bl	80004c8 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe fcff 	bl	8000158 <__aeabi_dsub>
 800175a:	4603      	mov	r3, r0
 800175c:	460c      	mov	r4, r1
 800175e:	4618      	mov	r0, r3
 8001760:	4621      	mov	r1, r4
 8001762:	f7ff f961 	bl	8000a28 <__aeabi_d2iz>
 8001766:	4602      	mov	r2, r0
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MS5611_ReadTemperature+0x118>)
 800176a:	601a      	str	r2, [r3, #0]
	TEMP = (2000 + dT * C[5] / pow(2, 23)) / 100.0;
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MS5611_ReadTemperature+0x110>)
 800176e:	895b      	ldrh	r3, [r3, #10]
 8001770:	461a      	mov	r2, r3
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MS5611_ReadTemperature+0x118>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fb03 f302 	mul.w	r3, r3, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fe3a 	bl	80003f4 <__aeabi_i2d>
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <MS5611_ReadTemperature+0x11c>)
 8001786:	f7fe ffc9 	bl	800071c <__aeabi_ddiv>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MS5611_ReadTemperature+0x120>)
 8001798:	f7fe fce0 	bl	800015c <__adddf3>
 800179c:	4603      	mov	r3, r0
 800179e:	460c      	mov	r4, r1
 80017a0:	4618      	mov	r0, r3
 80017a2:	4621      	mov	r1, r4
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MS5611_ReadTemperature+0x124>)
 80017aa:	f7fe ffb7 	bl	800071c <__aeabi_ddiv>
 80017ae:	4603      	mov	r3, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	4618      	mov	r0, r3
 80017b4:	4621      	mov	r1, r4
 80017b6:	f7ff f95f 	bl	8000a78 <__aeabi_d2f>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MS5611_ReadTemperature+0x128>)
 80017be:	601a      	str	r2, [r3, #0]
	return TEMP;
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <MS5611_ReadTemperature+0x128>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000007 	.word	0x20000007
 80017d0:	200001e0 	.word	0x200001e0
 80017d4:	200000f4 	.word	0x200000f4
 80017d8:	200000d8 	.word	0x200000d8
 80017dc:	200000f0 	.word	0x200000f0
 80017e0:	200000e0 	.word	0x200000e0
 80017e4:	40700000 	.word	0x40700000
 80017e8:	200000f8 	.word	0x200000f8
 80017ec:	41600000 	.word	0x41600000
 80017f0:	409f4000 	.word	0x409f4000
 80017f4:	40590000 	.word	0x40590000
 80017f8:	20000120 	.word	0x20000120

080017fc <MS5611_ReadPressure>:

float MS5611_ReadPressure(void) {
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	b083      	sub	sp, #12
 8001800:	af02      	add	r7, sp, #8

	 dT = D2 - ((int32_t) C[4] << 8);
	 float T = (2000 + ((int32_t) (dT * C[5]) >> 23)) / 100.0;
	 */

	T = MS5611_ReadTemperature();
 8001802:	f7ff ff65 	bl	80016d0 <MS5611_ReadTemperature>
 8001806:	4602      	mov	r2, r0
 8001808:	4b86      	ldr	r3, [pc, #536]	; (8001a24 <MS5611_ReadPressure+0x228>)
 800180a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &D1_4096, 1, 1000);
 800180c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	4a84      	ldr	r2, [pc, #528]	; (8001a28 <MS5611_ReadPressure+0x22c>)
 8001816:	21ee      	movs	r1, #238	; 0xee
 8001818:	4884      	ldr	r0, [pc, #528]	; (8001a2c <MS5611_ReadPressure+0x230>)
 800181a:	f001 ffa1 	bl	8003760 <HAL_I2C_Master_Transmit>
	HAL_Delay(9);
 800181e:	2009      	movs	r0, #9
 8001820:	f001 f9a0 	bl	8002b64 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_ADC, 1, 1000);
 8001824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2301      	movs	r3, #1
 800182c:	4a80      	ldr	r2, [pc, #512]	; (8001a30 <MS5611_ReadPressure+0x234>)
 800182e:	21ee      	movs	r1, #238	; 0xee
 8001830:	487e      	ldr	r0, [pc, #504]	; (8001a2c <MS5611_ReadPressure+0x230>)
 8001832:	f001 ff95 	bl	8003760 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &ADC[3], 3, 1000);
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2303      	movs	r3, #3
 800183e:	4a7d      	ldr	r2, [pc, #500]	; (8001a34 <MS5611_ReadPressure+0x238>)
 8001840:	21ef      	movs	r1, #239	; 0xef
 8001842:	487a      	ldr	r0, [pc, #488]	; (8001a2c <MS5611_ReadPressure+0x230>)
 8001844:	f002 f88a 	bl	800395c <HAL_I2C_Master_Receive>
	D1 = ADC[3] << 16 | ADC[4] << 8 | ADC[5];
 8001848:	4b7b      	ldr	r3, [pc, #492]	; (8001a38 <MS5611_ReadPressure+0x23c>)
 800184a:	78db      	ldrb	r3, [r3, #3]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	4b7a      	ldr	r3, [pc, #488]	; (8001a38 <MS5611_ReadPressure+0x23c>)
 8001850:	791b      	ldrb	r3, [r3, #4]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	4313      	orrs	r3, r2
 8001856:	4a78      	ldr	r2, [pc, #480]	; (8001a38 <MS5611_ReadPressure+0x23c>)
 8001858:	7952      	ldrb	r2, [r2, #5]
 800185a:	4313      	orrs	r3, r2
 800185c:	461a      	mov	r2, r3
 800185e:	4b77      	ldr	r3, [pc, #476]	; (8001a3c <MS5611_ReadPressure+0x240>)
 8001860:	601a      	str	r2, [r3, #0]

	if (T < 20 && T > -15) {
 8001862:	4b70      	ldr	r3, [pc, #448]	; (8001a24 <MS5611_ReadPressure+0x228>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4976      	ldr	r1, [pc, #472]	; (8001a40 <MS5611_ReadPressure+0x244>)
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fc01 	bl	8001070 <__aeabi_fcmplt>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d05f      	beq.n	8001934 <MS5611_ReadPressure+0x138>
 8001874:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <MS5611_ReadPressure+0x228>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4972      	ldr	r1, [pc, #456]	; (8001a44 <MS5611_ReadPressure+0x248>)
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fc16 	bl	80010ac <__aeabi_fcmpgt>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d056      	beq.n	8001934 <MS5611_ReadPressure+0x138>
		dT2 = (dT * dT) >> 31;
 8001886:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <MS5611_ReadPressure+0x24c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a6f      	ldr	r2, [pc, #444]	; (8001a48 <MS5611_ReadPressure+0x24c>)
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	17db      	asrs	r3, r3, #31
 8001894:	4a6d      	ldr	r2, [pc, #436]	; (8001a4c <MS5611_ReadPressure+0x250>)
 8001896:	6013      	str	r3, [r2, #0]
		OFF2 = 5 * (T - 2000) * (T - 2000) / 2;
 8001898:	4b62      	ldr	r3, [pc, #392]	; (8001a24 <MS5611_ReadPressure+0x228>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	496c      	ldr	r1, [pc, #432]	; (8001a50 <MS5611_ReadPressure+0x254>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f93e 	bl	8000b20 <__aeabi_fsub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	496b      	ldr	r1, [pc, #428]	; (8001a54 <MS5611_ReadPressure+0x258>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fa43 	bl	8000d34 <__aeabi_fmul>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461e      	mov	r6, r3
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <MS5611_ReadPressure+0x228>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4966      	ldr	r1, [pc, #408]	; (8001a50 <MS5611_ReadPressure+0x254>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f931 	bl	8000b20 <__aeabi_fsub>
 80018be:	4603      	mov	r3, r0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4630      	mov	r0, r6
 80018c4:	f7ff fa36 	bl	8000d34 <__aeabi_fmul>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fae4 	bl	8000e9c <__aeabi_fdiv>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fbf2 	bl	80010c0 <__aeabi_f2lz>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	495d      	ldr	r1, [pc, #372]	; (8001a58 <MS5611_ReadPressure+0x25c>)
 80018e2:	e9c1 2300 	strd	r2, r3, [r1]
		SENS2 = 5 * (T - 2000) * (T - 2000) / 4;
 80018e6:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <MS5611_ReadPressure+0x228>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4959      	ldr	r1, [pc, #356]	; (8001a50 <MS5611_ReadPressure+0x254>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f917 	bl	8000b20 <__aeabi_fsub>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4957      	ldr	r1, [pc, #348]	; (8001a54 <MS5611_ReadPressure+0x258>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa1c 	bl	8000d34 <__aeabi_fmul>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461e      	mov	r6, r3
 8001900:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <MS5611_ReadPressure+0x228>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4952      	ldr	r1, [pc, #328]	; (8001a50 <MS5611_ReadPressure+0x254>)
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff f90a 	bl	8000b20 <__aeabi_fsub>
 800190c:	4603      	mov	r3, r0
 800190e:	4619      	mov	r1, r3
 8001910:	4630      	mov	r0, r6
 8001912:	f7ff fa0f 	bl	8000d34 <__aeabi_fmul>
 8001916:	4603      	mov	r3, r0
 8001918:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fabd 	bl	8000e9c <__aeabi_fdiv>
 8001922:	4603      	mov	r3, r0
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fbcb 	bl	80010c0 <__aeabi_f2lz>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	494b      	ldr	r1, [pc, #300]	; (8001a5c <MS5611_ReadPressure+0x260>)
 8001930:	e9c1 2300 	strd	r2, r3, [r1]
	}
	OFF = (((int64_t) (C[1])) << 16) + ((C[3] * dT) >> 7);
 8001934:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <MS5611_ReadPressure+0x264>)
 8001936:	885b      	ldrh	r3, [r3, #2]
 8001938:	b29a      	uxth	r2, r3
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	0c15      	lsrs	r5, r2, #16
 8001940:	0414      	lsls	r4, r2, #16
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <MS5611_ReadPressure+0x264>)
 8001944:	88db      	ldrh	r3, [r3, #6]
 8001946:	461a      	mov	r2, r3
 8001948:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <MS5611_ReadPressure+0x24c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fb03 f302 	mul.w	r3, r3, r2
 8001950:	11db      	asrs	r3, r3, #7
 8001952:	461a      	mov	r2, r3
 8001954:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001958:	18a0      	adds	r0, r4, r2
 800195a:	eb45 0103 	adc.w	r1, r5, r3
 800195e:	4603      	mov	r3, r0
 8001960:	460c      	mov	r4, r1
 8001962:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <MS5611_ReadPressure+0x268>)
 8001964:	e9c2 3400 	strd	r3, r4, [r2]
	SENS = (((int64_t) (C[0])) << 15) + ((C[2] * dT) >> 8);
 8001968:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <MS5611_ReadPressure+0x264>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b299      	uxth	r1, r3
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0500 	mov.w	r5, #0
 8001976:	f04f 0600 	mov.w	r6, #0
 800197a:	03d6      	lsls	r6, r2, #15
 800197c:	ea46 4651 	orr.w	r6, r6, r1, lsr #17
 8001980:	03cd      	lsls	r5, r1, #15
 8001982:	4a37      	ldr	r2, [pc, #220]	; (8001a60 <MS5611_ReadPressure+0x264>)
 8001984:	8892      	ldrh	r2, [r2, #4]
 8001986:	4611      	mov	r1, r2
 8001988:	4a2f      	ldr	r2, [pc, #188]	; (8001a48 <MS5611_ReadPressure+0x24c>)
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	fb02 f201 	mul.w	r2, r2, r1
 8001990:	1212      	asrs	r2, r2, #8
 8001992:	4611      	mov	r1, r2
 8001994:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001998:	186b      	adds	r3, r5, r1
 800199a:	eb46 0402 	adc.w	r4, r6, r2
 800199e:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <MS5611_ReadPressure+0x26c>)
 80019a0:	e9c2 3400 	strd	r3, r4, [r2]
	PRESS = ((((D1 * SENS) >> 21) - OFF) >> 15) / 100.0;
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <MS5611_ReadPressure+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <MS5611_ReadPressure+0x26c>)
 80019b0:	cb18      	ldmia	r3, {r3, r4}
 80019b2:	fb03 f502 	mul.w	r5, r3, r2
 80019b6:	fb01 f004 	mul.w	r0, r1, r4
 80019ba:	4428      	add	r0, r5
 80019bc:	fba1 1203 	umull	r1, r2, r1, r3
 80019c0:	1883      	adds	r3, r0, r2
 80019c2:	461a      	mov	r2, r3
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	f04f 0400 	mov.w	r4, #0
 80019cc:	0d4b      	lsrs	r3, r1, #21
 80019ce:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80019d2:	1554      	asrs	r4, r2, #21
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <MS5611_ReadPressure+0x268>)
 80019d6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	eb64 0402 	sbc.w	r4, r4, r2
 80019e0:	461d      	mov	r5, r3
 80019e2:	4626      	mov	r6, r4
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	f04f 0400 	mov.w	r4, #0
 80019ec:	0beb      	lsrs	r3, r5, #15
 80019ee:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80019f2:	13f4      	asrs	r4, r6, #15
 80019f4:	4618      	mov	r0, r3
 80019f6:	4621      	mov	r1, r4
 80019f8:	f7fe fd38 	bl	800046c <__aeabi_l2d>
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MS5611_ReadPressure+0x270>)
 8001a02:	f7fe fe8b 	bl	800071c <__aeabi_ddiv>
 8001a06:	4603      	mov	r3, r0
 8001a08:	460c      	mov	r4, r1
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	f7ff f833 	bl	8000a78 <__aeabi_d2f>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MS5611_ReadPressure+0x274>)
 8001a16:	601a      	str	r2, [r3, #0]
	 SENS = SENS - SENS2;


	 PRESS = ((D1 * SENS / pow(2, 21) - OFF) / pow(2, 15)) / 100.0;
	 */
	return PRESS;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <MS5611_ReadPressure+0x274>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3704      	adds	r7, #4
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a24:	2000012c 	.word	0x2000012c
 8001a28:	20000006 	.word	0x20000006
 8001a2c:	200001e0 	.word	0x200001e0
 8001a30:	200000f4 	.word	0x200000f4
 8001a34:	200000db 	.word	0x200000db
 8001a38:	200000d8 	.word	0x200000d8
 8001a3c:	200000ec 	.word	0x200000ec
 8001a40:	41a00000 	.word	0x41a00000
 8001a44:	c1700000 	.word	0xc1700000
 8001a48:	200000f8 	.word	0x200000f8
 8001a4c:	200000fc 	.word	0x200000fc
 8001a50:	44fa0000 	.word	0x44fa0000
 8001a54:	40a00000 	.word	0x40a00000
 8001a58:	20000110 	.word	0x20000110
 8001a5c:	20000118 	.word	0x20000118
 8001a60:	200000e0 	.word	0x200000e0
 8001a64:	20000100 	.word	0x20000100
 8001a68:	20000108 	.word	0x20000108
 8001a6c:	40590000 	.word	0x40590000
 8001a70:	20000124 	.word	0x20000124
 8001a74:	00000000 	.word	0x00000000

08001a78 <MS5611_ReadAltitude>:

float MS5611_ReadAltitude(void)
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
	float P = MS5611_ReadPressure();
 8001a7e:	f7ff febd 	bl	80017fc <MS5611_ReadPressure>
 8001a82:	6078      	str	r0, [r7, #4]
	//float T0 = MS5611_ReadTemperature();
	//ALT = (float) (44330.0 * (1 - pow((PRESS / P0), (1 / 5.255))));
	ALT = ((pow((P0/P), (1/5.257))-1) * (*pte + 273.15)) / 0.0065;  // Altitude with temperature and pressure
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <MS5611_ReadAltitude+0xb8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fa06 	bl	8000e9c <__aeabi_fdiv>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fcc0 	bl	8000418 <__aeabi_f2d>
 8001a98:	a31f      	add	r3, pc, #124	; (adr r3, 8001b18 <MS5611_ReadAltitude+0xa0>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f004 fc25 	bl	80062ec <pow>
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <MS5611_ReadAltitude+0xbc>)
 8001aa8:	f7fe fb56 	bl	8000158 <__aeabi_dsub>
 8001aac:	4603      	mov	r3, r0
 8001aae:	460c      	mov	r4, r1
 8001ab0:	4625      	mov	r5, r4
 8001ab2:	461c      	mov	r4, r3
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MS5611_ReadAltitude+0xc0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fcac 	bl	8000418 <__aeabi_f2d>
 8001ac0:	a317      	add	r3, pc, #92	; (adr r3, 8001b20 <MS5611_ReadAltitude+0xa8>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fb49 	bl	800015c <__adddf3>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fcf9 	bl	80004c8 <__aeabi_dmul>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460c      	mov	r4, r1
 8001ada:	4618      	mov	r0, r3
 8001adc:	4621      	mov	r1, r4
 8001ade:	a312      	add	r3, pc, #72	; (adr r3, 8001b28 <MS5611_ReadAltitude+0xb0>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fe1a 	bl	800071c <__aeabi_ddiv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	4618      	mov	r0, r3
 8001aee:	4621      	mov	r1, r4
 8001af0:	f7fe ffc2 	bl	8000a78 <__aeabi_d2f>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MS5611_ReadAltitude+0xc4>)
 8001af8:	601a      	str	r2, [r3, #0]
	//ALT = (pow(10,log(PRESS/P0)/5.2558797)-1) / (-6.8755856 * pow(10,-6));
	return (ALT - BASE);
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MS5611_ReadAltitude+0xc4>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MS5611_ReadAltitude+0xc8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f7ff f80b 	bl	8000b20 <__aeabi_fsub>
 8001b0a:	4603      	mov	r3, r0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bdb0      	pop	{r4, r5, r7, pc}
 8001b14:	f3af 8000 	nop.w
 8001b18:	7dee2d4a 	.word	0x7dee2d4a
 8001b1c:	3fc85936 	.word	0x3fc85936
 8001b20:	66666666 	.word	0x66666666
 8001b24:	40711266 	.word	0x40711266
 8001b28:	76c8b439 	.word	0x76c8b439
 8001b2c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001b30:	20000010 	.word	0x20000010
 8001b34:	3ff00000 	.word	0x3ff00000
 8001b38:	20000014 	.word	0x20000014
 8001b3c:	20000128 	.word	0x20000128
 8001b40:	200000c4 	.word	0x200000c4

08001b44 <MS5611_ReadMedian_Altitude>:

float MS5611_ReadMedian_Altitude(void)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
	float H[5] = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
	for (uint8_t i = 0 ; i < 5 ; i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	75fb      	strb	r3, [r7, #23]
 8001b5c:	e00c      	b.n	8001b78 <MS5611_ReadMedian_Altitude+0x34>
		H[i] = MS5611_ReadAltitude();
 8001b5e:	7dfc      	ldrb	r4, [r7, #23]
 8001b60:	f7ff ff8a 	bl	8001a78 <MS5611_ReadAltitude>
 8001b64:	4602      	mov	r2, r0
 8001b66:	00a3      	lsls	r3, r4, #2
 8001b68:	f107 0118 	add.w	r1, r7, #24
 8001b6c:	440b      	add	r3, r1
 8001b6e:	f843 2c18 	str.w	r2, [r3, #-24]
	for (uint8_t i = 0 ; i < 5 ; i++)
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3301      	adds	r3, #1
 8001b76:	75fb      	strb	r3, [r7, #23]
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d9ef      	bls.n	8001b5e <MS5611_ReadMedian_Altitude+0x1a>
	return Array_sort_MS(H,5);
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2105      	movs	r1, #5
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f805 	bl	8001b92 <Array_sort_MS>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}

08001b92 <Array_sort_MS>:

float Array_sort_MS(float *array, int n) {
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
	int i = 0, j = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
	float temp = 0.0;
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < n; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e036      	b.n	8001c1e <Array_sort_MS+0x8c>
		for (j = 0; j < n - 1; j++) {
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	e02b      	b.n	8001c0e <Array_sort_MS+0x7c>
			if (array[j] > array[j + 1]) {
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7ff fa6d 	bl	80010ac <__aeabi_fcmpgt>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d017      	beq.n	8001c08 <Array_sort_MS+0x76>
				temp = array[j];
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]
				array[j] = array[j + 1];
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	3301      	adds	r3, #1
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	441a      	add	r2, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	601a      	str	r2, [r3, #0]
				array[j + 1] = temp;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	601a      	str	r2, [r3, #0]
		for (j = 0; j < n - 1; j++) {
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbce      	blt.n	8001bb6 <Array_sort_MS+0x24>
	for (i = 0; i < n; i++) {
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbc4      	blt.n	8001bb0 <Array_sort_MS+0x1e>
			}
		}
	}
	//return array[2];
	return array[n / 2];
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	0fda      	lsrs	r2, r3, #31
 8001c2a:	4413      	add	r3, r2
 8001c2c:	105b      	asrs	r3, r3, #1
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	681b      	ldr	r3, [r3, #0]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c46:	f000 ff2b 	bl	8002aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c4a:	f000 fb81 	bl	8002350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c4e:	f000 fd2b 	bl	80026a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c52:	f000 fc13 	bl	800247c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001c56:	f000 fc3f 	bl	80024d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c5a:	f000 fc89 	bl	8002570 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c5e:	f000 fcd5 	bl	800260c <MX_TIM4_Init>
  MX_ADC1_Init();
 8001c62:	f000 fbcd 	bl	8002400 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  Scan_I2C();
 8001c66:	f000 fd7f 	bl	8002768 <Scan_I2C>
  ADXL345_Init();
 8001c6a:	f7ff fa81 	bl	8001170 <ADXL345_Init>
  MS5611_Init();
 8001c6e:	f7ff fc1b 	bl	80014a8 <MS5611_Init>
  //HAL_TIM_Base_Start(&htim3);
  enum rocket {Rail, Launch, Burnout, Apogee, Descent, Main, Recovery};
  enum rocket EPHEMERISH;


  for (uint8_t i = 0 ; i < 12 ; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	75bb      	strb	r3, [r7, #22]
 8001c76:	e011      	b.n	8001c9c <main+0x5c>
    {
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001c78:	2140      	movs	r1, #64	; 0x40
 8001c7a:	48a9      	ldr	r0, [pc, #676]	; (8001f20 <main+0x2e0>)
 8001c7c:	f001 fc1e 	bl	80034bc <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001c80:	2108      	movs	r1, #8
 8001c82:	48a7      	ldr	r0, [pc, #668]	; (8001f20 <main+0x2e0>)
 8001c84:	f001 fc1a 	bl	80034bc <HAL_GPIO_TogglePin>
  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001c88:	2110      	movs	r1, #16
 8001c8a:	48a6      	ldr	r0, [pc, #664]	; (8001f24 <main+0x2e4>)
 8001c8c:	f001 fc16 	bl	80034bc <HAL_GPIO_TogglePin>
  	  HAL_Delay(50);
 8001c90:	2032      	movs	r0, #50	; 0x32
 8001c92:	f000 ff67 	bl	8002b64 <HAL_Delay>
  for (uint8_t i = 0 ; i < 12 ; i++)
 8001c96:	7dbb      	ldrb	r3, [r7, #22]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	75bb      	strb	r3, [r7, #22]
 8001c9c:	7dbb      	ldrb	r3, [r7, #22]
 8001c9e:	2b0b      	cmp	r3, #11
 8001ca0:	d9ea      	bls.n	8001c78 <main+0x38>
    }

	if (ACC_FAIL == 0) {
 8001ca2:	4ba1      	ldr	r3, [pc, #644]	; (8001f28 <main+0x2e8>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <main+0x76>
		EPHEMERISH = Rail;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]
		HAL_TIM_Base_Start_IT(&htim2);
 8001cae:	489f      	ldr	r0, [pc, #636]	; (8001f2c <main+0x2ec>)
 8001cb0:	f003 ff34 	bl	8005b1c <HAL_TIM_Base_Start_IT>
 8001cb4:	e00e      	b.n	8001cd4 <main+0x94>
		//EPHEMERISH = Burnout;
	} else if (ACC_FAIL == 1) {
 8001cb6:	4b9c      	ldr	r3, [pc, #624]	; (8001f28 <main+0x2e8>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10a      	bne.n	8001cd4 <main+0x94>
		EPHEMERISH = Launch;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	75fb      	strb	r3, [r7, #23]
		HAL_TIM_Base_Stop_IT(&htim2);
 8001cc2:	489a      	ldr	r0, [pc, #616]	; (8001f2c <main+0x2ec>)
 8001cc4:	f003 ff76 	bl	8005bb4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim3);
 8001cc8:	4899      	ldr	r0, [pc, #612]	; (8001f30 <main+0x2f0>)
 8001cca:	f003 ff27 	bl	8005b1c <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start(&htim4);
 8001cce:	4899      	ldr	r0, [pc, #612]	; (8001f34 <main+0x2f4>)
 8001cd0:	f003 fee0 	bl	8005a94 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (EPHEMERISH) {
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d8fc      	bhi.n	8001cd4 <main+0x94>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <main+0xa0>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001cfd 	.word	0x08001cfd
 8001ce4:	08001dc7 	.word	0x08001dc7
 8001ce8:	08001fa9 	.word	0x08001fa9
 8001cec:	08002139 	.word	0x08002139
 8001cf0:	08002199 	.word	0x08002199
 8001cf4:	0800229b 	.word	0x0800229b
 8001cf8:	080022f5 	.word	0x080022f5
		case Rail:
			if (ADXL == 1) {
 8001cfc:	4b8e      	ldr	r3, [pc, #568]	; (8001f38 <main+0x2f8>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	f040 8311 	bne.w	8002328 <main+0x6e8>
				ADXL_Z[ADXL_S] = ADXL345_Zaxiss_filter();
 8001d06:	4b8d      	ldr	r3, [pc, #564]	; (8001f3c <main+0x2fc>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461c      	mov	r4, r3
 8001d0c:	f7ff fb4e 	bl	80013ac <ADXL345_Zaxiss_filter>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b8b      	ldr	r3, [pc, #556]	; (8001f40 <main+0x300>)
 8001d14:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				if (ADXL_S == 5) {
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <main+0x2fc>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d148      	bne.n	8001db2 <main+0x172>
					uint8_t C2 = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	757b      	strb	r3, [r7, #21]
					for (uint8_t i = 0; i <= ADXL_S; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	753b      	strb	r3, [r7, #20]
 8001d28:	e01b      	b.n	8001d62 <main+0x122>
						if (ADXL_Z[i] < (-1 * ACC_l) || ADXL_Z[i] > ACC_l)
 8001d2a:	7d3b      	ldrb	r3, [r7, #20]
 8001d2c:	4a84      	ldr	r2, [pc, #528]	; (8001f40 <main+0x300>)
 8001d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d32:	4984      	ldr	r1, [pc, #528]	; (8001f44 <main+0x304>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff f99b 	bl	8001070 <__aeabi_fcmplt>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <main+0x116>
 8001d40:	7d3b      	ldrb	r3, [r7, #20]
 8001d42:	4a7f      	ldr	r2, [pc, #508]	; (8001f40 <main+0x300>)
 8001d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d48:	497f      	ldr	r1, [pc, #508]	; (8001f48 <main+0x308>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f9ae 	bl	80010ac <__aeabi_fcmpgt>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <main+0x11c>
							C2++;
 8001d56:	7d7b      	ldrb	r3, [r7, #21]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	757b      	strb	r3, [r7, #21]
					for (uint8_t i = 0; i <= ADXL_S; i++) {
 8001d5c:	7d3b      	ldrb	r3, [r7, #20]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	753b      	strb	r3, [r7, #20]
 8001d62:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <main+0x2fc>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	7d3a      	ldrb	r2, [r7, #20]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d9de      	bls.n	8001d2a <main+0xea>
					}
					if (C2 >= 3) {
 8001d6c:	7d7b      	ldrb	r3, [r7, #21]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d91c      	bls.n	8001dac <main+0x16c>
						EPHEMERISH = Launch;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
						//EPHEMERISH = Apogee;
						HAL_TIM_Base_Stop_IT(&htim2);
 8001d76:	486d      	ldr	r0, [pc, #436]	; (8001f2c <main+0x2ec>)
 8001d78:	f003 ff1c 	bl	8005bb4 <HAL_TIM_Base_Stop_IT>
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	74fb      	strb	r3, [r7, #19]
 8001d80:	e009      	b.n	8001d96 <main+0x156>
							HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001d82:	2108      	movs	r1, #8
 8001d84:	4866      	ldr	r0, [pc, #408]	; (8001f20 <main+0x2e0>)
 8001d86:	f001 fb99 	bl	80034bc <HAL_GPIO_TogglePin>
							HAL_Delay(50);
 8001d8a:	2032      	movs	r0, #50	; 0x32
 8001d8c:	f000 feea 	bl	8002b64 <HAL_Delay>
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8001d90:	7cfb      	ldrb	r3, [r7, #19]
 8001d92:	3301      	adds	r3, #1
 8001d94:	74fb      	strb	r3, [r7, #19]
 8001d96:	7cfa      	ldrb	r2, [r7, #19]
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dbf0      	blt.n	8001d82 <main+0x142>
						}
						HAL_TIM_Base_Start_IT(&htim3);
 8001da0:	4863      	ldr	r0, [pc, #396]	; (8001f30 <main+0x2f0>)
 8001da2:	f003 febb 	bl	8005b1c <HAL_TIM_Base_Start_IT>
						HAL_TIM_Base_Start(&htim4);
 8001da6:	4863      	ldr	r0, [pc, #396]	; (8001f34 <main+0x2f4>)
 8001da8:	f003 fe74 	bl	8005a94 <HAL_TIM_Base_Start>
					}
					ADXL_S = 0;
 8001dac:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <main+0x2fc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
				}
				ADXL_S++;
 8001db2:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <main+0x2fc>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <main+0x2fc>)
 8001dbc:	701a      	strb	r2, [r3, #0]
				ADXL = 0;
 8001dbe:	4b5e      	ldr	r3, [pc, #376]	; (8001f38 <main+0x2f8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001dc4:	e2b0      	b.n	8002328 <main+0x6e8>
		case Launch:
			if (MS5611 == 1) {
 8001dc6:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <main+0x30c>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	f040 82ae 	bne.w	800232c <main+0x6ec>
				if (alt_l == 0) {
 8001dd0:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <main+0x310>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <main+0x1b4>
					tim1 = __HAL_TIM_GET_COUNTER(&htim4);
 8001dd8:	4b56      	ldr	r3, [pc, #344]	; (8001f34 <main+0x2f4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	4a5d      	ldr	r2, [pc, #372]	; (8001f54 <main+0x314>)
 8001de0:	6013      	str	r3, [r2, #0]
					MS[0] = MS5611_ReadMedian_Altitude();
 8001de2:	f7ff feaf 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 8001de6:	4602      	mov	r2, r0
 8001de8:	4b5b      	ldr	r3, [pc, #364]	; (8001f58 <main+0x318>)
 8001dea:	601a      	str	r2, [r3, #0]
					alt_l = 1;
 8001dec:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <main+0x310>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e0d5      	b.n	8001fa0 <main+0x360>
				} else if (alt_l == 1) {
 8001df4:	4b56      	ldr	r3, [pc, #344]	; (8001f50 <main+0x310>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	f040 80d1 	bne.w	8001fa0 <main+0x360>
					tim2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001dfe:	4b4d      	ldr	r3, [pc, #308]	; (8001f34 <main+0x2f4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	4a55      	ldr	r2, [pc, #340]	; (8001f5c <main+0x31c>)
 8001e06:	6013      	str	r3, [r2, #0]
					MS[1] = MS5611_ReadMedian_Altitude();
 8001e08:	f7ff fe9c 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b52      	ldr	r3, [pc, #328]	; (8001f58 <main+0x318>)
 8001e10:	605a      	str	r2, [r3, #4]
					if (tim2 < tim1) {
 8001e12:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <main+0x31c>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <main+0x314>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d20e      	bcs.n	8001e3c <main+0x1fc>
						tim2 = tim2 + 65535;
 8001e1e:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <main+0x31c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001e26:	33ff      	adds	r3, #255	; 0xff
 8001e28:	4a4c      	ldr	r2, [pc, #304]	; (8001f5c <main+0x31c>)
 8001e2a:	6013      	str	r3, [r2, #0]
						dif = tim2 - tim1;
 8001e2c:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <main+0x31c>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b48      	ldr	r3, [pc, #288]	; (8001f54 <main+0x314>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	4a4a      	ldr	r2, [pc, #296]	; (8001f60 <main+0x320>)
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e006      	b.n	8001e4a <main+0x20a>
					} else
						dif = tim2 - tim1;
 8001e3c:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <main+0x31c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <main+0x314>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	4a46      	ldr	r2, [pc, #280]	; (8001f60 <main+0x320>)
 8001e48:	6013      	str	r3, [r2, #0]
					MS_V[MS_S] = (MS[1] - MS[0]) / (0.001 * dif);
 8001e4a:	4b43      	ldr	r3, [pc, #268]	; (8001f58 <main+0x318>)
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <main+0x318>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4619      	mov	r1, r3
 8001e54:	4610      	mov	r0, r2
 8001e56:	f7fe fe63 	bl	8000b20 <__aeabi_fsub>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fadb 	bl	8000418 <__aeabi_f2d>
 8001e62:	4604      	mov	r4, r0
 8001e64:	460d      	mov	r5, r1
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <main+0x320>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fab2 	bl	80003d4 <__aeabi_ui2d>
 8001e70:	a329      	add	r3, pc, #164	; (adr r3, 8001f18 <main+0x2d8>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fb27 	bl	80004c8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fc4b 	bl	800071c <__aeabi_ddiv>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <main+0x324>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461c      	mov	r4, r3
 8001e94:	4608      	mov	r0, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	f7fe fdee 	bl	8000a78 <__aeabi_d2f>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <main+0x328>)
 8001ea0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					if (MS_S == 5) {
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <main+0x324>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d170      	bne.n	8001f8e <main+0x34e>
						uint8_t M = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	74bb      	strb	r3, [r7, #18]
						for (uint8_t i = 0; i <= MS_S; i++) {
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	747b      	strb	r3, [r7, #17]
 8001eb4:	e010      	b.n	8001ed8 <main+0x298>
							if (MS_V[i] > 15)  // TEST BURNOUT VALUE = 15 REAL BURNOUT VALUE = 100
 8001eb6:	7c7b      	ldrb	r3, [r7, #17]
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <main+0x328>)
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	492b      	ldr	r1, [pc, #172]	; (8001f6c <main+0x32c>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f8f3 	bl	80010ac <__aeabi_fcmpgt>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <main+0x292>
								M++;
 8001ecc:	7cbb      	ldrb	r3, [r7, #18]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	74bb      	strb	r3, [r7, #18]
						for (uint8_t i = 0; i <= MS_S; i++) {
 8001ed2:	7c7b      	ldrb	r3, [r7, #17]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	747b      	strb	r3, [r7, #17]
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <main+0x324>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	7c7a      	ldrb	r2, [r7, #17]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d9e9      	bls.n	8001eb6 <main+0x276>
						}
						if (M >= 3) {
 8001ee2:	7cbb      	ldrb	r3, [r7, #18]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d913      	bls.n	8001f10 <main+0x2d0>
							//**********************
							EPHEMERISH = Burnout;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	75fb      	strb	r3, [r7, #23]
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8001eec:	2300      	movs	r3, #0
 8001eee:	743b      	strb	r3, [r7, #16]
 8001ef0:	e009      	b.n	8001f06 <main+0x2c6>
								HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001ef2:	2108      	movs	r1, #8
 8001ef4:	480a      	ldr	r0, [pc, #40]	; (8001f20 <main+0x2e0>)
 8001ef6:	f001 fae1 	bl	80034bc <HAL_GPIO_TogglePin>
								HAL_Delay(50);
 8001efa:	2032      	movs	r0, #50	; 0x32
 8001efc:	f000 fe32 	bl	8002b64 <HAL_Delay>
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8001f00:	7c3b      	ldrb	r3, [r7, #16]
 8001f02:	3301      	adds	r3, #1
 8001f04:	743b      	strb	r3, [r7, #16]
 8001f06:	7c3a      	ldrb	r2, [r7, #16]
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbf0      	blt.n	8001ef2 <main+0x2b2>
							}
						}
						for (uint8_t k = 0; k <= 5; k++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	e035      	b.n	8001f82 <main+0x342>
 8001f16:	bf00      	nop
 8001f18:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f1c:	3f50624d 	.word	0x3f50624d
 8001f20:	40010800 	.word	0x40010800
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	2000017c 	.word	0x2000017c
 8001f2c:	200002bc 	.word	0x200002bc
 8001f30:	20000240 	.word	0x20000240
 8001f34:	20000198 	.word	0x20000198
 8001f38:	20000178 	.word	0x20000178
 8001f3c:	20000179 	.word	0x20000179
 8001f40:	20000130 	.word	0x20000130
 8001f44:	c0200000 	.word	0xc0200000
 8001f48:	40200000 	.word	0x40200000
 8001f4c:	2000017a 	.word	0x2000017a
 8001f50:	2000018c 	.word	0x2000018c
 8001f54:	20000180 	.word	0x20000180
 8001f58:	20000234 	.word	0x20000234
 8001f5c:	20000184 	.word	0x20000184
 8001f60:	20000188 	.word	0x20000188
 8001f64:	2000017b 	.word	0x2000017b
 8001f68:	20000148 	.word	0x20000148
 8001f6c:	41700000 	.word	0x41700000
							MS_V[k] = 0;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	4aa7      	ldr	r2, [pc, #668]	; (8002210 <main+0x5d0>)
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for (uint8_t k = 0; k <= 5; k++)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b05      	cmp	r3, #5
 8001f86:	d9f3      	bls.n	8001f70 <main+0x330>
						MS_S = 0;
 8001f88:	4ba2      	ldr	r3, [pc, #648]	; (8002214 <main+0x5d4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
					}
					MS_S++;
 8001f8e:	4ba1      	ldr	r3, [pc, #644]	; (8002214 <main+0x5d4>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b9f      	ldr	r3, [pc, #636]	; (8002214 <main+0x5d4>)
 8001f98:	701a      	strb	r2, [r3, #0]
					alt_l = 0;
 8001f9a:	4b9f      	ldr	r3, [pc, #636]	; (8002218 <main+0x5d8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
				}
				MS5611 = 0;
 8001fa0:	4b9e      	ldr	r3, [pc, #632]	; (800221c <main+0x5dc>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001fa6:	e1c1      	b.n	800232c <main+0x6ec>
		case Burnout:
			if (MS5611 == 1) {
 8001fa8:	4b9c      	ldr	r3, [pc, #624]	; (800221c <main+0x5dc>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	f040 81bf 	bne.w	8002330 <main+0x6f0>
				if (alt_l == 0) {
 8001fb2:	4b99      	ldr	r3, [pc, #612]	; (8002218 <main+0x5d8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <main+0x396>
					tim1 = __HAL_TIM_GET_COUNTER(&htim4);
 8001fba:	4b99      	ldr	r3, [pc, #612]	; (8002220 <main+0x5e0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	4a98      	ldr	r2, [pc, #608]	; (8002224 <main+0x5e4>)
 8001fc2:	6013      	str	r3, [r2, #0]
					MS[0] = MS5611_ReadMedian_Altitude();
 8001fc4:	f7ff fdbe 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b97      	ldr	r3, [pc, #604]	; (8002228 <main+0x5e8>)
 8001fcc:	601a      	str	r2, [r3, #0]
					alt_l = 1;
 8001fce:	4b92      	ldr	r3, [pc, #584]	; (8002218 <main+0x5d8>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e0ac      	b.n	8002130 <main+0x4f0>
				} else if (alt_l == 1) {
 8001fd6:	4b90      	ldr	r3, [pc, #576]	; (8002218 <main+0x5d8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	f040 80a8 	bne.w	8002130 <main+0x4f0>
					tim2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001fe0:	4b8f      	ldr	r3, [pc, #572]	; (8002220 <main+0x5e0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	4a91      	ldr	r2, [pc, #580]	; (800222c <main+0x5ec>)
 8001fe8:	6013      	str	r3, [r2, #0]
					MS[1] = MS5611_ReadMedian_Altitude();
 8001fea:	f7ff fdab 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4b8d      	ldr	r3, [pc, #564]	; (8002228 <main+0x5e8>)
 8001ff2:	605a      	str	r2, [r3, #4]
					if (tim2 < tim1) {
 8001ff4:	4b8d      	ldr	r3, [pc, #564]	; (800222c <main+0x5ec>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b8a      	ldr	r3, [pc, #552]	; (8002224 <main+0x5e4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d20e      	bcs.n	800201e <main+0x3de>
						tim2 = tim2 + 65535;
 8002000:	4b8a      	ldr	r3, [pc, #552]	; (800222c <main+0x5ec>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002008:	33ff      	adds	r3, #255	; 0xff
 800200a:	4a88      	ldr	r2, [pc, #544]	; (800222c <main+0x5ec>)
 800200c:	6013      	str	r3, [r2, #0]
						dif = tim2 - tim1;
 800200e:	4b87      	ldr	r3, [pc, #540]	; (800222c <main+0x5ec>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b84      	ldr	r3, [pc, #528]	; (8002224 <main+0x5e4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	4a85      	ldr	r2, [pc, #532]	; (8002230 <main+0x5f0>)
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e006      	b.n	800202c <main+0x3ec>
					} else
						dif = tim2 - tim1;
 800201e:	4b83      	ldr	r3, [pc, #524]	; (800222c <main+0x5ec>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	4b80      	ldr	r3, [pc, #512]	; (8002224 <main+0x5e4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	4a81      	ldr	r2, [pc, #516]	; (8002230 <main+0x5f0>)
 800202a:	6013      	str	r3, [r2, #0]
					MS_V[MS_S] = (MS[1] - MS[0]) / (0.001 * dif);
 800202c:	4b7e      	ldr	r3, [pc, #504]	; (8002228 <main+0x5e8>)
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	4b7d      	ldr	r3, [pc, #500]	; (8002228 <main+0x5e8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f7fe fd72 	bl	8000b20 <__aeabi_fsub>
 800203c:	4603      	mov	r3, r0
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe f9ea 	bl	8000418 <__aeabi_f2d>
 8002044:	4604      	mov	r4, r0
 8002046:	460d      	mov	r5, r1
 8002048:	4b79      	ldr	r3, [pc, #484]	; (8002230 <main+0x5f0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe f9c1 	bl	80003d4 <__aeabi_ui2d>
 8002052:	a36d      	add	r3, pc, #436	; (adr r3, 8002208 <main+0x5c8>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	f7fe fa36 	bl	80004c8 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4620      	mov	r0, r4
 8002062:	4629      	mov	r1, r5
 8002064:	f7fe fb5a 	bl	800071c <__aeabi_ddiv>
 8002068:	4603      	mov	r3, r0
 800206a:	460c      	mov	r4, r1
 800206c:	4619      	mov	r1, r3
 800206e:	4622      	mov	r2, r4
 8002070:	4b68      	ldr	r3, [pc, #416]	; (8002214 <main+0x5d4>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461c      	mov	r4, r3
 8002076:	4608      	mov	r0, r1
 8002078:	4611      	mov	r1, r2
 800207a:	f7fe fcfd 	bl	8000a78 <__aeabi_d2f>
 800207e:	4602      	mov	r2, r0
 8002080:	4b63      	ldr	r3, [pc, #396]	; (8002210 <main+0x5d0>)
 8002082:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
					if (MS_S == 5) {
 8002086:	4b63      	ldr	r3, [pc, #396]	; (8002214 <main+0x5d4>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b05      	cmp	r3, #5
 800208c:	d147      	bne.n	800211e <main+0x4de>
						uint8_t M = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	73bb      	strb	r3, [r7, #14]
						for (uint8_t i = 0; i <= MS_S; i++) {
 8002092:	2300      	movs	r3, #0
 8002094:	737b      	strb	r3, [r7, #13]
 8002096:	e011      	b.n	80020bc <main+0x47c>
							if (MS_V[i] < 0)   // APOGEE velocity limit
 8002098:	7b7b      	ldrb	r3, [r7, #13]
 800209a:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <main+0x5d0>)
 800209c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe ffe3 	bl	8001070 <__aeabi_fcmplt>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <main+0x476>
								M++;
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73bb      	strb	r3, [r7, #14]
						for (uint8_t i = 0; i <= MS_S; i++) {
 80020b6:	7b7b      	ldrb	r3, [r7, #13]
 80020b8:	3301      	adds	r3, #1
 80020ba:	737b      	strb	r3, [r7, #13]
 80020bc:	4b55      	ldr	r3, [pc, #340]	; (8002214 <main+0x5d4>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	7b7a      	ldrb	r2, [r7, #13]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d9e8      	bls.n	8002098 <main+0x458>
						}
						if (M >= 3) {
 80020c6:	7bbb      	ldrb	r3, [r7, #14]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d916      	bls.n	80020fa <main+0x4ba>
							EPHEMERISH = Apogee;
 80020cc:	2303      	movs	r3, #3
 80020ce:	75fb      	strb	r3, [r7, #23]
							HAL_TIM_Base_Stop_IT(&htim3);
 80020d0:	4858      	ldr	r0, [pc, #352]	; (8002234 <main+0x5f4>)
 80020d2:	f003 fd6f 	bl	8005bb4 <HAL_TIM_Base_Stop_IT>
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 80020d6:	2300      	movs	r3, #0
 80020d8:	733b      	strb	r3, [r7, #12]
 80020da:	e009      	b.n	80020f0 <main+0x4b0>
								HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80020dc:	2108      	movs	r1, #8
 80020de:	4856      	ldr	r0, [pc, #344]	; (8002238 <main+0x5f8>)
 80020e0:	f001 f9ec 	bl	80034bc <HAL_GPIO_TogglePin>
								HAL_Delay(50);
 80020e4:	2032      	movs	r0, #50	; 0x32
 80020e6:	f000 fd3d 	bl	8002b64 <HAL_Delay>
							for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 80020ea:	7b3b      	ldrb	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	733b      	strb	r3, [r7, #12]
 80020f0:	7b3a      	ldrb	r2, [r7, #12]
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dbf0      	blt.n	80020dc <main+0x49c>
							}
						}
						for (uint8_t k = 0 ; k <= 5 ; k++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	72fb      	strb	r3, [r7, #11]
 80020fe:	e008      	b.n	8002112 <main+0x4d2>
							MS_V[k] = 0;
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	4a43      	ldr	r2, [pc, #268]	; (8002210 <main+0x5d0>)
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						for (uint8_t k = 0 ; k <= 5 ; k++)
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	3301      	adds	r3, #1
 8002110:	72fb      	strb	r3, [r7, #11]
 8002112:	7afb      	ldrb	r3, [r7, #11]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d9f3      	bls.n	8002100 <main+0x4c0>
						MS_S = 0;
 8002118:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <main+0x5d4>)
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
					}
					MS_S++;
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <main+0x5d4>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <main+0x5d4>)
 8002128:	701a      	strb	r2, [r3, #0]
					alt_l = 0;
 800212a:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <main+0x5d8>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
				}
				MS5611 = 0;
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <main+0x5dc>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002136:	e0fb      	b.n	8002330 <main+0x6f0>
		case Apogee:
			//EPHEMERISH = Recovery;
			EPHEMERISH = Descent;
 8002138:	2304      	movs	r3, #4
 800213a:	75fb      	strb	r3, [r7, #23]
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 800213c:	2300      	movs	r3, #0
 800213e:	72bb      	strb	r3, [r7, #10]
 8002140:	e009      	b.n	8002156 <main+0x516>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8002142:	2108      	movs	r1, #8
 8002144:	483c      	ldr	r0, [pc, #240]	; (8002238 <main+0x5f8>)
 8002146:	f001 f9b9 	bl	80034bc <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 800214a:	2032      	movs	r0, #50	; 0x32
 800214c:	f000 fd0a 	bl	8002b64 <HAL_Delay>
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002150:	7abb      	ldrb	r3, [r7, #10]
 8002152:	3301      	adds	r3, #1
 8002154:	72bb      	strb	r3, [r7, #10]
 8002156:	7aba      	ldrb	r2, [r7, #10]
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	429a      	cmp	r2, r3
 800215e:	dbf0      	blt.n	8002142 <main+0x502>
			}
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8002160:	2108      	movs	r1, #8
 8002162:	4835      	ldr	r0, [pc, #212]	; (8002238 <main+0x5f8>)
 8002164:	f001 f9aa 	bl	80034bc <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8002168:	2201      	movs	r2, #1
 800216a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800216e:	4832      	ldr	r0, [pc, #200]	; (8002238 <main+0x5f8>)
 8002170:	f001 f98c 	bl	800348c <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);  // ***************
			HAL_Delay(600);
 8002174:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002178:	f000 fcf4 	bl	8002b64 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002182:	482d      	ldr	r0, [pc, #180]	; (8002238 <main+0x5f8>)
 8002184:	f001 f982 	bl	800348c <HAL_GPIO_WritePin>
			//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);  // **************
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8002188:	2108      	movs	r1, #8
 800218a:	482b      	ldr	r0, [pc, #172]	; (8002238 <main+0x5f8>)
 800218c:	f001 f996 	bl	80034bc <HAL_GPIO_TogglePin>
			HAL_TIM_Base_Start_IT(&htim3);
 8002190:	4828      	ldr	r0, [pc, #160]	; (8002234 <main+0x5f4>)
 8002192:	f003 fcc3 	bl	8005b1c <HAL_TIM_Base_Start_IT>
			break;
 8002196:	e0ce      	b.n	8002336 <main+0x6f6>
		case Descent:
			if (MS5611 == 1) {
 8002198:	4b20      	ldr	r3, [pc, #128]	; (800221c <main+0x5dc>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b01      	cmp	r3, #1
 800219e:	f040 80c9 	bne.w	8002334 <main+0x6f4>
				MS_A[MS_S] = MS5611_ReadMedian_Altitude();
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <main+0x5d4>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461c      	mov	r4, r3
 80021a8:	f7ff fccc 	bl	8001b44 <MS5611_ReadMedian_Altitude>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b23      	ldr	r3, [pc, #140]	; (800223c <main+0x5fc>)
 80021b0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				if (MS_S == 5) {
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <main+0x5d4>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d164      	bne.n	8002286 <main+0x646>
					uint8_t M = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	727b      	strb	r3, [r7, #9]
					for (uint8_t i = 0; i <= MS_S; i++) {
 80021c0:	2300      	movs	r3, #0
 80021c2:	723b      	strb	r3, [r7, #8]
 80021c4:	e010      	b.n	80021e8 <main+0x5a8>
						if (MS_A[i] < 500)
 80021c6:	7a3b      	ldrb	r3, [r7, #8]
 80021c8:	4a1c      	ldr	r2, [pc, #112]	; (800223c <main+0x5fc>)
 80021ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ce:	491c      	ldr	r1, [pc, #112]	; (8002240 <main+0x600>)
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ff4d 	bl	8001070 <__aeabi_fcmplt>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <main+0x5a2>
							M++;
 80021dc:	7a7b      	ldrb	r3, [r7, #9]
 80021de:	3301      	adds	r3, #1
 80021e0:	727b      	strb	r3, [r7, #9]
					for (uint8_t i = 0; i <= MS_S; i++) {
 80021e2:	7a3b      	ldrb	r3, [r7, #8]
 80021e4:	3301      	adds	r3, #1
 80021e6:	723b      	strb	r3, [r7, #8]
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <main+0x5d4>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	7a3a      	ldrb	r2, [r7, #8]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d9e9      	bls.n	80021c6 <main+0x586>
					}
					if (M >= 3) {
 80021f2:	7a7b      	ldrb	r3, [r7, #9]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d934      	bls.n	8002262 <main+0x622>
						// MAIN FIRE
						EPHEMERISH = Main;
 80021f8:	2305      	movs	r3, #5
 80021fa:	75fb      	strb	r3, [r7, #23]
						HAL_TIM_Base_Stop_IT(&htim3);
 80021fc:	480d      	ldr	r0, [pc, #52]	; (8002234 <main+0x5f4>)
 80021fe:	f003 fcd9 	bl	8005bb4 <HAL_TIM_Base_Stop_IT>
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002202:	2300      	movs	r3, #0
 8002204:	71fb      	strb	r3, [r7, #7]
 8002206:	e027      	b.n	8002258 <main+0x618>
 8002208:	d2f1a9fc 	.word	0xd2f1a9fc
 800220c:	3f50624d 	.word	0x3f50624d
 8002210:	20000148 	.word	0x20000148
 8002214:	2000017b 	.word	0x2000017b
 8002218:	2000018c 	.word	0x2000018c
 800221c:	2000017a 	.word	0x2000017a
 8002220:	20000198 	.word	0x20000198
 8002224:	20000180 	.word	0x20000180
 8002228:	20000234 	.word	0x20000234
 800222c:	20000184 	.word	0x20000184
 8002230:	20000188 	.word	0x20000188
 8002234:	20000240 	.word	0x20000240
 8002238:	40010800 	.word	0x40010800
 800223c:	20000160 	.word	0x20000160
 8002240:	43fa0000 	.word	0x43fa0000
							HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8002244:	2108      	movs	r1, #8
 8002246:	483c      	ldr	r0, [pc, #240]	; (8002338 <main+0x6f8>)
 8002248:	f001 f938 	bl	80034bc <HAL_GPIO_TogglePin>
							HAL_Delay(50);
 800224c:	2032      	movs	r0, #50	; 0x32
 800224e:	f000 fc89 	bl	8002b64 <HAL_Delay>
						for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	3301      	adds	r3, #1
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	79fa      	ldrb	r2, [r7, #7]
 800225a:	7dfb      	ldrb	r3, [r7, #23]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	429a      	cmp	r2, r3
 8002260:	dbf0      	blt.n	8002244 <main+0x604>
						}
					}
					for (uint8_t k = 0 ; k <= 5 ; k++)
 8002262:	2300      	movs	r3, #0
 8002264:	71bb      	strb	r3, [r7, #6]
 8002266:	e008      	b.n	800227a <main+0x63a>
						MS_A[k] = 0;
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	4a34      	ldr	r2, [pc, #208]	; (800233c <main+0x6fc>)
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					for (uint8_t k = 0 ; k <= 5 ; k++)
 8002274:	79bb      	ldrb	r3, [r7, #6]
 8002276:	3301      	adds	r3, #1
 8002278:	71bb      	strb	r3, [r7, #6]
 800227a:	79bb      	ldrb	r3, [r7, #6]
 800227c:	2b05      	cmp	r3, #5
 800227e:	d9f3      	bls.n	8002268 <main+0x628>
					MS_S = 0;
 8002280:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <main+0x700>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
				}
				MS_S++;
 8002286:	4b2e      	ldr	r3, [pc, #184]	; (8002340 <main+0x700>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <main+0x700>)
 8002290:	701a      	strb	r2, [r3, #0]
				MS5611 = 0;
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <main+0x704>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002298:	e04c      	b.n	8002334 <main+0x6f4>
		case Main:
			EPHEMERISH = Recovery;
 800229a:	2306      	movs	r3, #6
 800229c:	75fb      	strb	r3, [r7, #23]
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 800229e:	2300      	movs	r3, #0
 80022a0:	717b      	strb	r3, [r7, #5]
 80022a2:	e009      	b.n	80022b8 <main+0x678>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80022a4:	2108      	movs	r1, #8
 80022a6:	4824      	ldr	r0, [pc, #144]	; (8002338 <main+0x6f8>)
 80022a8:	f001 f908 	bl	80034bc <HAL_GPIO_TogglePin>
				HAL_Delay(50);
 80022ac:	2032      	movs	r0, #50	; 0x32
 80022ae:	f000 fc59 	bl	8002b64 <HAL_Delay>
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 80022b2:	797b      	ldrb	r3, [r7, #5]
 80022b4:	3301      	adds	r3, #1
 80022b6:	717b      	strb	r3, [r7, #5]
 80022b8:	797a      	ldrb	r2, [r7, #5]
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	429a      	cmp	r2, r3
 80022c0:	dbf0      	blt.n	80022a4 <main+0x664>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2108      	movs	r1, #8
 80022c6:	481c      	ldr	r0, [pc, #112]	; (8002338 <main+0x6f8>)
 80022c8:	f001 f8e0 	bl	800348c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, SET);
 80022cc:	2201      	movs	r2, #1
 80022ce:	2108      	movs	r1, #8
 80022d0:	481d      	ldr	r0, [pc, #116]	; (8002348 <main+0x708>)
 80022d2:	f001 f8db 	bl	800348c <HAL_GPIO_WritePin>
			HAL_Delay(600);
 80022d6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022da:	f000 fc43 	bl	8002b64 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, RESET);
 80022de:	2200      	movs	r2, #0
 80022e0:	2108      	movs	r1, #8
 80022e2:	4819      	ldr	r0, [pc, #100]	; (8002348 <main+0x708>)
 80022e4:	f001 f8d2 	bl	800348c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2108      	movs	r1, #8
 80022ec:	4812      	ldr	r0, [pc, #72]	; (8002338 <main+0x6f8>)
 80022ee:	f001 f8cd 	bl	800348c <HAL_GPIO_WritePin>
			break;
 80022f2:	e020      	b.n	8002336 <main+0x6f6>
		case Recovery:
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 80022f4:	2300      	movs	r3, #0
 80022f6:	713b      	strb	r3, [r7, #4]
 80022f8:	e010      	b.n	800231c <main+0x6dc>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80022fa:	2110      	movs	r1, #16
 80022fc:	4812      	ldr	r0, [pc, #72]	; (8002348 <main+0x708>)
 80022fe:	f001 f8dd 	bl	80034bc <HAL_GPIO_TogglePin>
				HAL_Delay(500);
 8002302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002306:	f000 fc2d 	bl	8002b64 <HAL_Delay>
				final++;
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <main+0x70c>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <main+0x70c>)
 8002314:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < (EPHEMERISH * 2); i++) {
 8002316:	793b      	ldrb	r3, [r7, #4]
 8002318:	3301      	adds	r3, #1
 800231a:	713b      	strb	r3, [r7, #4]
 800231c:	793a      	ldrb	r2, [r7, #4]
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	429a      	cmp	r2, r3
 8002324:	dbe9      	blt.n	80022fa <main+0x6ba>
			}
			break;
 8002326:	e006      	b.n	8002336 <main+0x6f6>
			break;
 8002328:	bf00      	nop
 800232a:	e4d3      	b.n	8001cd4 <main+0x94>
			break;
 800232c:	bf00      	nop
 800232e:	e4d1      	b.n	8001cd4 <main+0x94>
			break;
 8002330:	bf00      	nop
 8002332:	e4cf      	b.n	8001cd4 <main+0x94>
			break;
 8002334:	bf00      	nop
		switch (EPHEMERISH) {
 8002336:	e4cd      	b.n	8001cd4 <main+0x94>
 8002338:	40010800 	.word	0x40010800
 800233c:	20000160 	.word	0x20000160
 8002340:	2000017b 	.word	0x2000017b
 8002344:	2000017a 	.word	0x2000017a
 8002348:	40010c00 	.word	0x40010c00
 800234c:	2000017d 	.word	0x2000017d

08002350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b094      	sub	sp, #80	; 0x50
 8002354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800235a:	2228      	movs	r2, #40	; 0x28
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f003 ffbc 	bl	80062dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002380:	2302      	movs	r3, #2
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002384:	2301      	movs	r3, #1
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002388:	2310      	movs	r3, #16
 800238a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800238c:	2302      	movs	r3, #2
 800238e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002390:	2300      	movs	r3, #0
 8002392:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002394:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8002398:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800239a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fe6a 	bl	8005078 <HAL_RCC_OscConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80023aa:	f000 fa01 	bl	80027b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ae:	230f      	movs	r3, #15
 80023b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b2:	2302      	movs	r3, #2
 80023b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 f8d4 	bl	8005578 <HAL_RCC_ClockConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80023d6:	f000 f9eb 	bl	80027b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023da:	2302      	movs	r3, #2
 80023dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80023de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 fa4e 	bl	8005888 <HAL_RCCEx_PeriphCLKConfig>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80023f2:	f000 f9dd 	bl	80027b0 <Error_Handler>
  }
}
 80023f6:	bf00      	nop
 80023f8:	3750      	adds	r7, #80	; 0x50
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002410:	4b18      	ldr	r3, [pc, #96]	; (8002474 <MX_ADC1_Init+0x74>)
 8002412:	4a19      	ldr	r2, [pc, #100]	; (8002478 <MX_ADC1_Init+0x78>)
 8002414:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <MX_ADC1_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <MX_ADC1_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <MX_ADC1_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <MX_ADC1_Init+0x74>)
 800242a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800242e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <MX_ADC1_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_ADC1_Init+0x74>)
 8002438:	2201      	movs	r2, #1
 800243a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800243c:	480d      	ldr	r0, [pc, #52]	; (8002474 <MX_ADC1_Init+0x74>)
 800243e:	f000 fbb3 	bl	8002ba8 <HAL_ADC_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002448:	f000 f9b2 	bl	80027b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800244c:	2309      	movs	r3, #9
 800244e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002450:	2301      	movs	r3, #1
 8002452:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	4619      	mov	r1, r3
 800245c:	4805      	ldr	r0, [pc, #20]	; (8002474 <MX_ADC1_Init+0x74>)
 800245e:	f000 fc7b 	bl	8002d58 <HAL_ADC_ConfigChannel>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002468:	f000 f9a2 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000288 	.word	0x20000288
 8002478:	40012400 	.word	0x40012400

0800247c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <MX_I2C1_Init+0x50>)
 8002482:	4a13      	ldr	r2, [pc, #76]	; (80024d0 <MX_I2C1_Init+0x54>)
 8002484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_I2C1_Init+0x50>)
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <MX_I2C1_Init+0x58>)
 800248a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_I2C1_Init+0x50>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_I2C1_Init+0x50>)
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_I2C1_Init+0x50>)
 800249a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800249e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <MX_I2C1_Init+0x50>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_I2C1_Init+0x50>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <MX_I2C1_Init+0x50>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_I2C1_Init+0x50>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024b8:	4804      	ldr	r0, [pc, #16]	; (80024cc <MX_I2C1_Init+0x50>)
 80024ba:	f001 f819 	bl	80034f0 <HAL_I2C_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024c4:	f000 f974 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200001e0 	.word	0x200001e0
 80024d0:	40005400 	.word	0x40005400
 80024d4:	000186a0 	.word	0x000186a0

080024d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ec:	463b      	mov	r3, r7
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f4:	4b1d      	ldr	r3, [pc, #116]	; (800256c <MX_TIM2_Init+0x94>)
 80024f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <MX_TIM2_Init+0x94>)
 80024fe:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <MX_TIM2_Init+0x94>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <MX_TIM2_Init+0x94>)
 800250c:	2204      	movs	r2, #4
 800250e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b16      	ldr	r3, [pc, #88]	; (800256c <MX_TIM2_Init+0x94>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <MX_TIM2_Init+0x94>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800251c:	4813      	ldr	r0, [pc, #76]	; (800256c <MX_TIM2_Init+0x94>)
 800251e:	f003 fa69 	bl	80059f4 <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002528:	f000 f942 	bl	80027b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002532:	f107 0308 	add.w	r3, r7, #8
 8002536:	4619      	mov	r1, r3
 8002538:	480c      	ldr	r0, [pc, #48]	; (800256c <MX_TIM2_Init+0x94>)
 800253a:	f003 fc71 	bl	8005e20 <HAL_TIM_ConfigClockSource>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002544:	f000 f934 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002550:	463b      	mov	r3, r7
 8002552:	4619      	mov	r1, r3
 8002554:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_TIM2_Init+0x94>)
 8002556:	f003 fe2d 	bl	80061b4 <HAL_TIMEx_MasterConfigSynchronization>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002560:	f000 f926 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200002bc 	.word	0x200002bc

08002570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	463b      	mov	r3, r7
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <MX_TIM3_Init+0x94>)
 800258e:	4a1e      	ldr	r2, [pc, #120]	; (8002608 <MX_TIM3_Init+0x98>)
 8002590:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8002592:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <MX_TIM3_Init+0x94>)
 8002594:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002598:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <MX_TIM3_Init+0x94>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 108;
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <MX_TIM3_Init+0x94>)
 80025a2:	226c      	movs	r2, #108	; 0x6c
 80025a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a6:	4b17      	ldr	r3, [pc, #92]	; (8002604 <MX_TIM3_Init+0x94>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <MX_TIM3_Init+0x94>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025b2:	4814      	ldr	r0, [pc, #80]	; (8002604 <MX_TIM3_Init+0x94>)
 80025b4:	f003 fa1e 	bl	80059f4 <HAL_TIM_Base_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025be:	f000 f8f7 	bl	80027b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025c8:	f107 0308 	add.w	r3, r7, #8
 80025cc:	4619      	mov	r1, r3
 80025ce:	480d      	ldr	r0, [pc, #52]	; (8002604 <MX_TIM3_Init+0x94>)
 80025d0:	f003 fc26 	bl	8005e20 <HAL_TIM_ConfigClockSource>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80025da:	f000 f8e9 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025e6:	463b      	mov	r3, r7
 80025e8:	4619      	mov	r1, r3
 80025ea:	4806      	ldr	r0, [pc, #24]	; (8002604 <MX_TIM3_Init+0x94>)
 80025ec:	f003 fde2 	bl	80061b4 <HAL_TIMEx_MasterConfigSynchronization>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80025f6:	f000 f8db 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000240 	.word	0x20000240
 8002608:	40000400 	.word	0x40000400

0800260c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002620:	463b      	mov	r3, r7
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <MX_TIM4_Init+0x94>)
 800262a:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <MX_TIM4_Init+0x98>)
 800262c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47999;
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <MX_TIM4_Init+0x94>)
 8002630:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002634:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <MX_TIM4_Init+0x94>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <MX_TIM4_Init+0x94>)
 800263e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002642:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <MX_TIM4_Init+0x94>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <MX_TIM4_Init+0x94>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002650:	4813      	ldr	r0, [pc, #76]	; (80026a0 <MX_TIM4_Init+0x94>)
 8002652:	f003 f9cf 	bl	80059f4 <HAL_TIM_Base_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800265c:	f000 f8a8 	bl	80027b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002664:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002666:	f107 0308 	add.w	r3, r7, #8
 800266a:	4619      	mov	r1, r3
 800266c:	480c      	ldr	r0, [pc, #48]	; (80026a0 <MX_TIM4_Init+0x94>)
 800266e:	f003 fbd7 	bl	8005e20 <HAL_TIM_ConfigClockSource>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002678:	f000 f89a 	bl	80027b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002684:	463b      	mov	r3, r7
 8002686:	4619      	mov	r1, r3
 8002688:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_TIM4_Init+0x94>)
 800268a:	f003 fd93 	bl	80061b4 <HAL_TIMEx_MasterConfigSynchronization>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002694:	f000 f88c 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000198 	.word	0x20000198
 80026a4:	40000800 	.word	0x40000800

080026a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	f107 0310 	add.w	r3, r7, #16
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <MX_GPIO_Init+0xb4>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a26      	ldr	r2, [pc, #152]	; (800275c <MX_GPIO_Init+0xb4>)
 80026c2:	f043 0320 	orr.w	r3, r3, #32
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <MX_GPIO_Init+0xb4>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <MX_GPIO_Init+0xb4>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a20      	ldr	r2, [pc, #128]	; (800275c <MX_GPIO_Init+0xb4>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <MX_GPIO_Init+0xb4>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <MX_GPIO_Init+0xb4>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a1a      	ldr	r2, [pc, #104]	; (800275c <MX_GPIO_Init+0xb4>)
 80026f2:	f043 0308 	orr.w	r3, r3, #8
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <MX_GPIO_Init+0xb4>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|BOTTOM_LED_Pin|APOGEE_Pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	f248 0148 	movw	r1, #32840	; 0x8048
 800270a:	4815      	ldr	r0, [pc, #84]	; (8002760 <MX_GPIO_Init+0xb8>)
 800270c:	f000 febe 	bl	800348c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAIN_Pin|TOP_LED_Pin, GPIO_PIN_RESET);
 8002710:	2200      	movs	r2, #0
 8002712:	2118      	movs	r1, #24
 8002714:	4813      	ldr	r0, [pc, #76]	; (8002764 <MX_GPIO_Init+0xbc>)
 8002716:	f000 feb9 	bl	800348c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZER_Pin BOTTOM_LED_Pin APOGEE_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BOTTOM_LED_Pin|APOGEE_Pin;
 800271a:	f248 0348 	movw	r3, #32840	; 0x8048
 800271e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002720:	2301      	movs	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2302      	movs	r3, #2
 800272a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0310 	add.w	r3, r7, #16
 8002730:	4619      	mov	r1, r3
 8002732:	480b      	ldr	r0, [pc, #44]	; (8002760 <MX_GPIO_Init+0xb8>)
 8002734:	f000 fd58 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_Pin TOP_LED_Pin */
  GPIO_InitStruct.Pin = MAIN_Pin|TOP_LED_Pin;
 8002738:	2318      	movs	r3, #24
 800273a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2302      	movs	r3, #2
 8002746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	4619      	mov	r1, r3
 800274e:	4805      	ldr	r0, [pc, #20]	; (8002764 <MX_GPIO_Init+0xbc>)
 8002750:	f000 fd4a 	bl	80031e8 <HAL_GPIO_Init>

}
 8002754:	bf00      	nop
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	40010800 	.word	0x40010800
 8002764:	40010c00 	.word	0x40010c00

08002768 <Scan_I2C>:

/* USER CODE BEGIN 4 */
void Scan_I2C(void){
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 255 ; i++){
 800276e:	2300      	movs	r3, #0
 8002770:	71fb      	strb	r3, [r7, #7]
 8002772:	e012      	b.n	800279a <Scan_I2C+0x32>
		if(HAL_I2C_IsDeviceReady(&hi2c1, i, 1, 10) == HAL_OK){
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	b299      	uxth	r1, r3
 8002778:	230a      	movs	r3, #10
 800277a:	2201      	movs	r2, #1
 800277c:	480a      	ldr	r0, [pc, #40]	; (80027a8 <Scan_I2C+0x40>)
 800277e:	f001 fea3 	bl	80044c8 <HAL_I2C_IsDeviceReady>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d105      	bne.n	8002794 <Scan_I2C+0x2c>
			k++;
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <Scan_I2C+0x44>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <Scan_I2C+0x44>)
 8002792:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 255 ; i++){
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	3301      	adds	r3, #1
 8002798:	71fb      	strb	r3, [r7, #7]
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2bff      	cmp	r3, #255	; 0xff
 800279e:	d1e9      	bne.n	8002774 <Scan_I2C+0xc>
		}
	}
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200001e0 	.word	0x200001e0
 80027ac:	2000017e 	.word	0x2000017e

080027b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_MspInit+0x5c>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_MspInit+0x5c>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6193      	str	r3, [r2, #24]
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_MspInit+0x5c>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_MspInit+0x5c>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4a0e      	ldr	r2, [pc, #56]	; (8002818 <HAL_MspInit+0x5c>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	61d3      	str	r3, [r2, #28]
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <HAL_MspInit+0x5c>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_MspInit+0x60>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_MspInit+0x60>)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	40021000 	.word	0x40021000
 800281c:	40010000 	.word	0x40010000

08002820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a14      	ldr	r2, [pc, #80]	; (800288c <HAL_ADC_MspInit+0x6c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d121      	bne.n	8002884 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_ADC_MspInit+0x70>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4a12      	ldr	r2, [pc, #72]	; (8002890 <HAL_ADC_MspInit+0x70>)
 8002846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284a:	6193      	str	r3, [r2, #24]
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_ADC_MspInit+0x70>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002858:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <HAL_ADC_MspInit+0x70>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <HAL_ADC_MspInit+0x70>)
 800285e:	f043 0308 	orr.w	r3, r3, #8
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_ADC_MspInit+0x70>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VSENS_Pin;
 8002870:	2302      	movs	r3, #2
 8002872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002874:	2303      	movs	r3, #3
 8002876:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VSENS_GPIO_Port, &GPIO_InitStruct);
 8002878:	f107 0310 	add.w	r3, r7, #16
 800287c:	4619      	mov	r1, r3
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <HAL_ADC_MspInit+0x74>)
 8002880:	f000 fcb2 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002884:	bf00      	nop
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40012400 	.word	0x40012400
 8002890:	40021000 	.word	0x40021000
 8002894:	40010c00 	.word	0x40010c00

08002898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0310 	add.w	r3, r7, #16
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a15      	ldr	r2, [pc, #84]	; (8002908 <HAL_I2C_MspInit+0x70>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d123      	bne.n	8002900 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <HAL_I2C_MspInit+0x74>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4a13      	ldr	r2, [pc, #76]	; (800290c <HAL_I2C_MspInit+0x74>)
 80028be:	f043 0308 	orr.w	r3, r3, #8
 80028c2:	6193      	str	r3, [r2, #24]
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <HAL_I2C_MspInit+0x74>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028d0:	23c0      	movs	r3, #192	; 0xc0
 80028d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d4:	2312      	movs	r3, #18
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	4619      	mov	r1, r3
 80028e2:	480b      	ldr	r0, [pc, #44]	; (8002910 <HAL_I2C_MspInit+0x78>)
 80028e4:	f000 fc80 	bl	80031e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_I2C_MspInit+0x74>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	4a07      	ldr	r2, [pc, #28]	; (800290c <HAL_I2C_MspInit+0x74>)
 80028ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028f2:	61d3      	str	r3, [r2, #28]
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_I2C_MspInit+0x74>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002900:	bf00      	nop
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40005400 	.word	0x40005400
 800290c:	40021000 	.word	0x40021000
 8002910:	40010c00 	.word	0x40010c00

08002914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d114      	bne.n	8002950 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <HAL_TIM_Base_MspInit+0x9c>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a21      	ldr	r2, [pc, #132]	; (80029b0 <HAL_TIM_Base_MspInit+0x9c>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	61d3      	str	r3, [r2, #28]
 8002932:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_TIM_Base_MspInit+0x9c>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	201c      	movs	r0, #28
 8002944:	f000 fc19 	bl	800317a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002948:	201c      	movs	r0, #28
 800294a:	f000 fc32 	bl	80031b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800294e:	e02a      	b.n	80029a6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_TIM_Base_MspInit+0xa0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d114      	bne.n	8002984 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_TIM_Base_MspInit+0x9c>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_TIM_Base_MspInit+0x9c>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	61d3      	str	r3, [r2, #28]
 8002966:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_TIM_Base_MspInit+0x9c>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	201d      	movs	r0, #29
 8002978:	f000 fbff 	bl	800317a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800297c:	201d      	movs	r0, #29
 800297e:	f000 fc18 	bl	80031b2 <HAL_NVIC_EnableIRQ>
}
 8002982:	e010      	b.n	80029a6 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <HAL_TIM_Base_MspInit+0xa4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d10b      	bne.n	80029a6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_TIM_Base_MspInit+0x9c>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_TIM_Base_MspInit+0x9c>)
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	61d3      	str	r3, [r2, #28]
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_TIM_Base_MspInit+0x9c>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40000800 	.word	0x40000800

080029bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <HardFault_Handler+0x4>

080029ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <MemManage_Handler+0x4>

080029d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <BusFault_Handler+0x4>

080029da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029de:	e7fe      	b.n	80029de <UsageFault_Handler+0x4>

080029e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a08:	f000 f890 	bl	8002b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a14:	4803      	ldr	r0, [pc, #12]	; (8002a24 <TIM2_IRQHandler+0x14>)
 8002a16:	f003 f8fb 	bl	8005c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  ADXL = 1;
 8002a1a:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <TIM2_IRQHandler+0x18>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200002bc 	.word	0x200002bc
 8002a28:	20000178 	.word	0x20000178

08002a2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a30:	4803      	ldr	r0, [pc, #12]	; (8002a40 <TIM3_IRQHandler+0x14>)
 8002a32:	f003 f8ed 	bl	8005c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  MS5611 = 1;
 8002a36:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <TIM3_IRQHandler+0x18>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000240 	.word	0x20000240
 8002a44:	2000017a 	.word	0x2000017a

08002a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a54:	480c      	ldr	r0, [pc, #48]	; (8002a88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a56:	490d      	ldr	r1, [pc, #52]	; (8002a8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a5c:	e002      	b.n	8002a64 <LoopCopyDataInit>

08002a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a62:	3304      	adds	r3, #4

08002a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a68:	d3f9      	bcc.n	8002a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a6c:	4c0a      	ldr	r4, [pc, #40]	; (8002a98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a70:	e001      	b.n	8002a76 <LoopFillZerobss>

08002a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a74:	3204      	adds	r2, #4

08002a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a78:	d3fb      	bcc.n	8002a72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a7a:	f7ff ffe5 	bl	8002a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7e:	f003 fc09 	bl	8006294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a82:	f7ff f8dd 	bl	8001c40 <main>
  bx lr
 8002a86:	4770      	bx	lr
  ldr r0, =_sdata
 8002a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a8c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002a90:	080073d0 	.word	0x080073d0
  ldr r2, =_sbss
 8002a94:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002a98:	20000308 	.word	0x20000308

08002a9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC1_IRQHandler>
	...

08002aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <HAL_Init+0x28>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <HAL_Init+0x28>)
 8002aaa:	f043 0310 	orr.w	r3, r3, #16
 8002aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab0:	2003      	movs	r0, #3
 8002ab2:	f000 fb57 	bl	8003164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f000 f808 	bl	8002acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002abc:	f7ff fe7e 	bl	80027bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40022000 	.word	0x40022000

08002acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_InitTick+0x54>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_InitTick+0x58>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fb6f 	bl	80031ce <HAL_SYSTICK_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00e      	b.n	8002b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b0f      	cmp	r3, #15
 8002afe:	d80a      	bhi.n	8002b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b00:	2200      	movs	r2, #0
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	f000 fb37 	bl	800317a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b0c:	4a06      	ldr	r2, [pc, #24]	; (8002b28 <HAL_InitTick+0x5c>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e000      	b.n	8002b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000018 	.word	0x20000018
 8002b24:	20000020 	.word	0x20000020
 8002b28:	2000001c 	.word	0x2000001c

08002b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_IncTick+0x1c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_IncTick+0x20>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	4a03      	ldr	r2, [pc, #12]	; (8002b4c <HAL_IncTick+0x20>)
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	20000020 	.word	0x20000020
 8002b4c:	20000304 	.word	0x20000304

08002b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return uwTick;
 8002b54:	4b02      	ldr	r3, [pc, #8]	; (8002b60 <HAL_GetTick+0x10>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	20000304 	.word	0x20000304

08002b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b6c:	f7ff fff0 	bl	8002b50 <HAL_GetTick>
 8002b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d005      	beq.n	8002b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_Delay+0x40>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4413      	add	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b8a:	bf00      	nop
 8002b8c:	f7ff ffe0 	bl	8002b50 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d8f7      	bhi.n	8002b8c <HAL_Delay+0x28>
  {
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000020 	.word	0x20000020

08002ba8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0be      	b.n	8002d48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fe1a 	bl	8002820 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f9ab 	bl	8002f48 <ADC_ConversionStop_Disable>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 8099 	bne.w	8002d36 <HAL_ADC_Init+0x18e>
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f040 8095 	bne.w	8002d36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c14:	f023 0302 	bic.w	r3, r3, #2
 8002c18:	f043 0202 	orr.w	r2, r3, #2
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7b1b      	ldrb	r3, [r3, #12]
 8002c2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c40:	d003      	beq.n	8002c4a <HAL_ADC_Init+0xa2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d102      	bne.n	8002c50 <HAL_ADC_Init+0xa8>
 8002c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c4e:	e000      	b.n	8002c52 <HAL_ADC_Init+0xaa>
 8002c50:	2300      	movs	r3, #0
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7d1b      	ldrb	r3, [r3, #20]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d119      	bne.n	8002c94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7b1b      	ldrb	r3, [r3, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	035a      	lsls	r2, r3, #13
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	e00b      	b.n	8002c94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	f043 0220 	orr.w	r2, r3, #32
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	f043 0201 	orr.w	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_ADC_Init+0x1a8>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc4:	d003      	beq.n	8002cce <HAL_ADC_Init+0x126>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d104      	bne.n	8002cd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	051b      	lsls	r3, r3, #20
 8002cd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_ADC_Init+0x1ac>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d10b      	bne.n	8002d14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d12:	e018      	b.n	8002d46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	f023 0312 	bic.w	r3, r3, #18
 8002d1c:	f043 0210 	orr.w	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d34:	e007      	b.n	8002d46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	f043 0210 	orr.w	r2, r3, #16
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	ffe1f7fd 	.word	0xffe1f7fd
 8002d54:	ff1f0efe 	.word	0xff1f0efe

08002d58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x20>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e0dc      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x1da>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b06      	cmp	r3, #6
 8002d86:	d81c      	bhi.n	8002dc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	3b05      	subs	r3, #5
 8002d9a:	221f      	movs	r2, #31
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	4019      	ands	r1, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	3b05      	subs	r3, #5
 8002db4:	fa00 f203 	lsl.w	r2, r0, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc0:	e03c      	b.n	8002e3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b0c      	cmp	r3, #12
 8002dc8:	d81c      	bhi.n	8002e04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b23      	subs	r3, #35	; 0x23
 8002ddc:	221f      	movs	r2, #31
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	4019      	ands	r1, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	3b23      	subs	r3, #35	; 0x23
 8002df6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
 8002e02:	e01b      	b.n	8002e3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	3b41      	subs	r3, #65	; 0x41
 8002e16:	221f      	movs	r2, #31
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	4019      	ands	r1, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b41      	subs	r3, #65	; 0x41
 8002e30:	fa00 f203 	lsl.w	r2, r0, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b09      	cmp	r3, #9
 8002e42:	d91c      	bls.n	8002e7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68d9      	ldr	r1, [r3, #12]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	3b1e      	subs	r3, #30
 8002e56:	2207      	movs	r2, #7
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	4019      	ands	r1, r3
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6898      	ldr	r0, [r3, #8]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3b1e      	subs	r3, #30
 8002e70:	fa00 f203 	lsl.w	r2, r0, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	e019      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6919      	ldr	r1, [r3, #16]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	2207      	movs	r2, #7
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	4019      	ands	r1, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6898      	ldr	r0, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d003      	beq.n	8002ec2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ebe:	2b11      	cmp	r3, #17
 8002ec0:	d132      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_ADC_ConfigChannel+0x1e4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d125      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d126      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ee8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d11a      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	0c9a      	lsrs	r2, r3, #18
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f08:	e002      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f9      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x1b2>
 8002f16:	e007      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	f043 0220 	orr.w	r2, r3, #32
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	40012400 	.word	0x40012400
 8002f40:	20000018 	.word	0x20000018
 8002f44:	431bde83 	.word	0x431bde83

08002f48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d12e      	bne.n	8002fc0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0201 	bic.w	r2, r2, #1
 8002f70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f72:	f7ff fded 	bl	8002b50 <HAL_GetTick>
 8002f76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f78:	e01b      	b.n	8002fb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f7a:	f7ff fde9 	bl	8002b50 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d914      	bls.n	8002fb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10d      	bne.n	8002fb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	f043 0210 	orr.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	f043 0201 	orr.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e007      	b.n	8002fc2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d0dc      	beq.n	8002f7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	; (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60d3      	str	r3, [r2, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <__NVIC_GetPriorityGrouping+0x18>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 0307 	and.w	r3, r3, #7
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	2b00      	cmp	r3, #0
 8003040:	db0b      	blt.n	800305a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	f003 021f 	and.w	r2, r3, #31
 8003048:	4906      	ldr	r1, [pc, #24]	; (8003064 <__NVIC_EnableIRQ+0x34>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	2001      	movs	r0, #1
 8003052:	fa00 f202 	lsl.w	r2, r0, r2
 8003056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100

08003068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	6039      	str	r1, [r7, #0]
 8003072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003078:	2b00      	cmp	r3, #0
 800307a:	db0a      	blt.n	8003092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	490c      	ldr	r1, [pc, #48]	; (80030b4 <__NVIC_SetPriority+0x4c>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	0112      	lsls	r2, r2, #4
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	440b      	add	r3, r1
 800308c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003090:	e00a      	b.n	80030a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	4908      	ldr	r1, [pc, #32]	; (80030b8 <__NVIC_SetPriority+0x50>)
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	3b04      	subs	r3, #4
 80030a0:	0112      	lsls	r2, r2, #4
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	440b      	add	r3, r1
 80030a6:	761a      	strb	r2, [r3, #24]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000e100 	.word	0xe000e100
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f1c3 0307 	rsb	r3, r3, #7
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	bf28      	it	cs
 80030da:	2304      	movcs	r3, #4
 80030dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d902      	bls.n	80030ec <NVIC_EncodePriority+0x30>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3b03      	subs	r3, #3
 80030ea:	e000      	b.n	80030ee <NVIC_EncodePriority+0x32>
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	401a      	ands	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003104:	f04f 31ff 	mov.w	r1, #4294967295
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43d9      	mvns	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	4313      	orrs	r3, r2
         );
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	; 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003130:	d301      	bcc.n	8003136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003132:	2301      	movs	r3, #1
 8003134:	e00f      	b.n	8003156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <SysTick_Config+0x40>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800313e:	210f      	movs	r1, #15
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	f7ff ff90 	bl	8003068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <SysTick_Config+0x40>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <SysTick_Config+0x40>)
 8003150:	2207      	movs	r2, #7
 8003152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	e000e010 	.word	0xe000e010

08003164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff2d 	bl	8002fcc <__NVIC_SetPriorityGrouping>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800318c:	f7ff ff42 	bl	8003014 <__NVIC_GetPriorityGrouping>
 8003190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	6978      	ldr	r0, [r7, #20]
 8003198:	f7ff ff90 	bl	80030bc <NVIC_EncodePriority>
 800319c:	4602      	mov	r2, r0
 800319e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff5f 	bl	8003068 <__NVIC_SetPriority>
}
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff35 	bl	8003030 <__NVIC_EnableIRQ>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ffa2 	bl	8003120 <SysTick_Config>
 80031dc:	4603      	mov	r3, r0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b08b      	sub	sp, #44	; 0x2c
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031f6:	2300      	movs	r3, #0
 80031f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031fa:	e121      	b.n	8003440 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031fc:	2201      	movs	r2, #1
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	429a      	cmp	r2, r3
 8003216:	f040 8110 	bne.w	800343a <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b12      	cmp	r3, #18
 8003220:	d034      	beq.n	800328c <HAL_GPIO_Init+0xa4>
 8003222:	2b12      	cmp	r3, #18
 8003224:	d80d      	bhi.n	8003242 <HAL_GPIO_Init+0x5a>
 8003226:	2b02      	cmp	r3, #2
 8003228:	d02b      	beq.n	8003282 <HAL_GPIO_Init+0x9a>
 800322a:	2b02      	cmp	r3, #2
 800322c:	d804      	bhi.n	8003238 <HAL_GPIO_Init+0x50>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d031      	beq.n	8003296 <HAL_GPIO_Init+0xae>
 8003232:	2b01      	cmp	r3, #1
 8003234:	d01c      	beq.n	8003270 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003236:	e048      	b.n	80032ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003238:	2b03      	cmp	r3, #3
 800323a:	d043      	beq.n	80032c4 <HAL_GPIO_Init+0xdc>
 800323c:	2b11      	cmp	r3, #17
 800323e:	d01b      	beq.n	8003278 <HAL_GPIO_Init+0x90>
          break;
 8003240:	e043      	b.n	80032ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003242:	4a86      	ldr	r2, [pc, #536]	; (800345c <HAL_GPIO_Init+0x274>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d026      	beq.n	8003296 <HAL_GPIO_Init+0xae>
 8003248:	4a84      	ldr	r2, [pc, #528]	; (800345c <HAL_GPIO_Init+0x274>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d806      	bhi.n	800325c <HAL_GPIO_Init+0x74>
 800324e:	4a84      	ldr	r2, [pc, #528]	; (8003460 <HAL_GPIO_Init+0x278>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d020      	beq.n	8003296 <HAL_GPIO_Init+0xae>
 8003254:	4a83      	ldr	r2, [pc, #524]	; (8003464 <HAL_GPIO_Init+0x27c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01d      	beq.n	8003296 <HAL_GPIO_Init+0xae>
          break;
 800325a:	e036      	b.n	80032ca <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800325c:	4a82      	ldr	r2, [pc, #520]	; (8003468 <HAL_GPIO_Init+0x280>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d019      	beq.n	8003296 <HAL_GPIO_Init+0xae>
 8003262:	4a82      	ldr	r2, [pc, #520]	; (800346c <HAL_GPIO_Init+0x284>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d016      	beq.n	8003296 <HAL_GPIO_Init+0xae>
 8003268:	4a81      	ldr	r2, [pc, #516]	; (8003470 <HAL_GPIO_Init+0x288>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_Init+0xae>
          break;
 800326e:	e02c      	b.n	80032ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	623b      	str	r3, [r7, #32]
          break;
 8003276:	e028      	b.n	80032ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	3304      	adds	r3, #4
 800327e:	623b      	str	r3, [r7, #32]
          break;
 8003280:	e023      	b.n	80032ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	3308      	adds	r3, #8
 8003288:	623b      	str	r3, [r7, #32]
          break;
 800328a:	e01e      	b.n	80032ca <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	330c      	adds	r3, #12
 8003292:	623b      	str	r3, [r7, #32]
          break;
 8003294:	e019      	b.n	80032ca <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800329e:	2304      	movs	r3, #4
 80032a0:	623b      	str	r3, [r7, #32]
          break;
 80032a2:	e012      	b.n	80032ca <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032ac:	2308      	movs	r3, #8
 80032ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	611a      	str	r2, [r3, #16]
          break;
 80032b6:	e008      	b.n	80032ca <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032b8:	2308      	movs	r3, #8
 80032ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	615a      	str	r2, [r3, #20]
          break;
 80032c2:	e002      	b.n	80032ca <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032c4:	2300      	movs	r3, #0
 80032c6:	623b      	str	r3, [r7, #32]
          break;
 80032c8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2bff      	cmp	r3, #255	; 0xff
 80032ce:	d801      	bhi.n	80032d4 <HAL_GPIO_Init+0xec>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	e001      	b.n	80032d8 <HAL_GPIO_Init+0xf0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2bff      	cmp	r3, #255	; 0xff
 80032de:	d802      	bhi.n	80032e6 <HAL_GPIO_Init+0xfe>
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	e002      	b.n	80032ec <HAL_GPIO_Init+0x104>
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	3b08      	subs	r3, #8
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	210f      	movs	r1, #15
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	401a      	ands	r2, r3
 80032fe:	6a39      	ldr	r1, [r7, #32]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	431a      	orrs	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8090 	beq.w	800343a <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800331a:	4b56      	ldr	r3, [pc, #344]	; (8003474 <HAL_GPIO_Init+0x28c>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	4a55      	ldr	r2, [pc, #340]	; (8003474 <HAL_GPIO_Init+0x28c>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6193      	str	r3, [r2, #24]
 8003326:	4b53      	ldr	r3, [pc, #332]	; (8003474 <HAL_GPIO_Init+0x28c>)
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003332:	4a51      	ldr	r2, [pc, #324]	; (8003478 <HAL_GPIO_Init+0x290>)
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	3302      	adds	r3, #2
 800333a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	220f      	movs	r2, #15
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4013      	ands	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a48      	ldr	r2, [pc, #288]	; (800347c <HAL_GPIO_Init+0x294>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00d      	beq.n	800337a <HAL_GPIO_Init+0x192>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a47      	ldr	r2, [pc, #284]	; (8003480 <HAL_GPIO_Init+0x298>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d007      	beq.n	8003376 <HAL_GPIO_Init+0x18e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a46      	ldr	r2, [pc, #280]	; (8003484 <HAL_GPIO_Init+0x29c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_GPIO_Init+0x18a>
 800336e:	2302      	movs	r3, #2
 8003370:	e004      	b.n	800337c <HAL_GPIO_Init+0x194>
 8003372:	2303      	movs	r3, #3
 8003374:	e002      	b.n	800337c <HAL_GPIO_Init+0x194>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_GPIO_Init+0x194>
 800337a:	2300      	movs	r3, #0
 800337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337e:	f002 0203 	and.w	r2, r2, #3
 8003382:	0092      	lsls	r2, r2, #2
 8003384:	4093      	lsls	r3, r2
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800338c:	493a      	ldr	r1, [pc, #232]	; (8003478 <HAL_GPIO_Init+0x290>)
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	089b      	lsrs	r3, r3, #2
 8003392:	3302      	adds	r3, #2
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d006      	beq.n	80033b4 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033a6:	4b38      	ldr	r3, [pc, #224]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4937      	ldr	r1, [pc, #220]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
 80033b2:	e006      	b.n	80033c2 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033b4:	4b34      	ldr	r3, [pc, #208]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	4932      	ldr	r1, [pc, #200]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 80033be:	4013      	ands	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d006      	beq.n	80033dc <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033ce:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	492d      	ldr	r1, [pc, #180]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]
 80033da:	e006      	b.n	80033ea <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	4928      	ldr	r1, [pc, #160]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	4923      	ldr	r1, [pc, #140]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
 8003402:	e006      	b.n	8003412 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	43db      	mvns	r3, r3
 800340c:	491e      	ldr	r1, [pc, #120]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 800340e:	4013      	ands	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d006      	beq.n	800342c <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	4919      	ldr	r1, [pc, #100]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	60cb      	str	r3, [r1, #12]
 800342a:	e006      	b.n	800343a <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	43db      	mvns	r3, r3
 8003434:	4914      	ldr	r1, [pc, #80]	; (8003488 <HAL_GPIO_Init+0x2a0>)
 8003436:	4013      	ands	r3, r2
 8003438:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	3301      	adds	r3, #1
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	fa22 f303 	lsr.w	r3, r2, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	f47f aed6 	bne.w	80031fc <HAL_GPIO_Init+0x14>
  }
}
 8003450:	bf00      	nop
 8003452:	372c      	adds	r7, #44	; 0x2c
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	10210000 	.word	0x10210000
 8003460:	10110000 	.word	0x10110000
 8003464:	10120000 	.word	0x10120000
 8003468:	10310000 	.word	0x10310000
 800346c:	10320000 	.word	0x10320000
 8003470:	10220000 	.word	0x10220000
 8003474:	40021000 	.word	0x40021000
 8003478:	40010000 	.word	0x40010000
 800347c:	40010800 	.word	0x40010800
 8003480:	40010c00 	.word	0x40010c00
 8003484:	40011000 	.word	0x40011000
 8003488:	40010400 	.word	0x40010400

0800348c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	807b      	strh	r3, [r7, #2]
 8003498:	4613      	mov	r3, r2
 800349a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800349c:	787b      	ldrb	r3, [r7, #1]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034a2:	887a      	ldrh	r2, [r7, #2]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034a8:	e003      	b.n	80034b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034aa:	887b      	ldrh	r3, [r7, #2]
 80034ac:	041a      	lsls	r2, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	611a      	str	r2, [r3, #16]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	041a      	lsls	r2, r3, #16
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43d9      	mvns	r1, r3
 80034da:	887b      	ldrh	r3, [r7, #2]
 80034dc:	400b      	ands	r3, r1
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	611a      	str	r2, [r3, #16]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e11f      	b.n	8003742 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff f9be 	bl	8002898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2224      	movs	r2, #36	; 0x24
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003554:	f002 f966 	bl	8005824 <HAL_RCC_GetPCLK1Freq>
 8003558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4a7b      	ldr	r2, [pc, #492]	; (800374c <HAL_I2C_Init+0x25c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d807      	bhi.n	8003574 <HAL_I2C_Init+0x84>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a7a      	ldr	r2, [pc, #488]	; (8003750 <HAL_I2C_Init+0x260>)
 8003568:	4293      	cmp	r3, r2
 800356a:	bf94      	ite	ls
 800356c:	2301      	movls	r3, #1
 800356e:	2300      	movhi	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e006      	b.n	8003582 <HAL_I2C_Init+0x92>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a77      	ldr	r2, [pc, #476]	; (8003754 <HAL_I2C_Init+0x264>)
 8003578:	4293      	cmp	r3, r2
 800357a:	bf94      	ite	ls
 800357c:	2301      	movls	r3, #1
 800357e:	2300      	movhi	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0db      	b.n	8003742 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a72      	ldr	r2, [pc, #456]	; (8003758 <HAL_I2C_Init+0x268>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0c9b      	lsrs	r3, r3, #18
 8003594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a64      	ldr	r2, [pc, #400]	; (800374c <HAL_I2C_Init+0x25c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d802      	bhi.n	80035c4 <HAL_I2C_Init+0xd4>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3301      	adds	r3, #1
 80035c2:	e009      	b.n	80035d8 <HAL_I2C_Init+0xe8>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	4a63      	ldr	r2, [pc, #396]	; (800375c <HAL_I2C_Init+0x26c>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	3301      	adds	r3, #1
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4956      	ldr	r1, [pc, #344]	; (800374c <HAL_I2C_Init+0x25c>)
 80035f4:	428b      	cmp	r3, r1
 80035f6:	d80d      	bhi.n	8003614 <HAL_I2C_Init+0x124>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e59      	subs	r1, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fbb1 f3f3 	udiv	r3, r1, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360c:	2b04      	cmp	r3, #4
 800360e:	bf38      	it	cc
 8003610:	2304      	movcc	r3, #4
 8003612:	e04f      	b.n	80036b4 <HAL_I2C_Init+0x1c4>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d111      	bne.n	8003640 <HAL_I2C_Init+0x150>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1e58      	subs	r0, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	440b      	add	r3, r1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e012      	b.n	8003666 <HAL_I2C_Init+0x176>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1e58      	subs	r0, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	0099      	lsls	r1, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	fbb0 f3f3 	udiv	r3, r0, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Init+0x17e>
 800366a:	2301      	movs	r3, #1
 800366c:	e022      	b.n	80036b4 <HAL_I2C_Init+0x1c4>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10e      	bne.n	8003694 <HAL_I2C_Init+0x1a4>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1e58      	subs	r0, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	440b      	add	r3, r1
 8003684:	fbb0 f3f3 	udiv	r3, r0, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003692:	e00f      	b.n	80036b4 <HAL_I2C_Init+0x1c4>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1e58      	subs	r0, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	0099      	lsls	r1, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036aa:	3301      	adds	r3, #1
 80036ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	6809      	ldr	r1, [r1, #0]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6911      	ldr	r1, [r2, #16]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68d2      	ldr	r2, [r2, #12]
 80036ee:	4311      	orrs	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	000186a0 	.word	0x000186a0
 8003750:	001e847f 	.word	0x001e847f
 8003754:	003d08ff 	.word	0x003d08ff
 8003758:	431bde83 	.word	0x431bde83
 800375c:	10624dd3 	.word	0x10624dd3

08003760 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	461a      	mov	r2, r3
 800376c:	460b      	mov	r3, r1
 800376e:	817b      	strh	r3, [r7, #10]
 8003770:	4613      	mov	r3, r2
 8003772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003774:	f7ff f9ec 	bl	8002b50 <HAL_GetTick>
 8003778:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b20      	cmp	r3, #32
 8003784:	f040 80e0 	bne.w	8003948 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2319      	movs	r3, #25
 800378e:	2201      	movs	r2, #1
 8003790:	4970      	ldr	r1, [pc, #448]	; (8003954 <HAL_I2C_Master_Transmit+0x1f4>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f001 fa94 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	e0d3      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_I2C_Master_Transmit+0x50>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e0cc      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d007      	beq.n	80037d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2221      	movs	r2, #33	; 0x21
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2210      	movs	r2, #16
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	893a      	ldrh	r2, [r7, #8]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4a50      	ldr	r2, [pc, #320]	; (8003958 <HAL_I2C_Master_Transmit+0x1f8>)
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003818:	8979      	ldrh	r1, [r7, #10]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	6a3a      	ldr	r2, [r7, #32]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 ff80 	bl	8004724 <I2C_MasterRequestWrite>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e08d      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003844:	e066      	b.n	8003914 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	6a39      	ldr	r1, [r7, #32]
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f001 fb0e 	bl	8004e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b04      	cmp	r3, #4
 800385c:	d107      	bne.n	800386e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e06b      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d11b      	bne.n	80038e8 <HAL_I2C_Master_Transmit+0x188>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d017      	beq.n	80038e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	6a39      	ldr	r1, [r7, #32]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f001 fafe 	bl	8004eee <I2C_WaitOnBTFFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00d      	beq.n	8003914 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d107      	bne.n	8003910 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e01a      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d194      	bne.n	8003846 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e000      	b.n	800394a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
  }
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	00100002 	.word	0x00100002
 8003958:	ffff0000 	.word	0xffff0000

0800395c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08c      	sub	sp, #48	; 0x30
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	461a      	mov	r2, r3
 8003968:	460b      	mov	r3, r1
 800396a:	817b      	strh	r3, [r7, #10]
 800396c:	4613      	mov	r3, r2
 800396e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003974:	f7ff f8ec 	bl	8002b50 <HAL_GetTick>
 8003978:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b20      	cmp	r3, #32
 8003984:	f040 8238 	bne.w	8003df8 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2319      	movs	r3, #25
 800398e:	2201      	movs	r2, #1
 8003990:	497e      	ldr	r1, [pc, #504]	; (8003b8c <HAL_I2C_Master_Receive+0x230>)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f001 f994 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800399e:	2302      	movs	r3, #2
 80039a0:	e22b      	b.n	8003dfa <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_I2C_Master_Receive+0x54>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e224      	b.n	8003dfa <HAL_I2C_Master_Receive+0x49e>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d007      	beq.n	80039d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2222      	movs	r2, #34	; 0x22
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2210      	movs	r2, #16
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	893a      	ldrh	r2, [r7, #8]
 8003a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a5e      	ldr	r2, [pc, #376]	; (8003b90 <HAL_I2C_Master_Receive+0x234>)
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a18:	8979      	ldrh	r1, [r7, #10]
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 ff02 	bl	8004828 <I2C_MasterRequestRead>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e1e5      	b.n	8003dfa <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d113      	bne.n	8003a5e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	e1b9      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d11d      	bne.n	8003aa2 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a74:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a76:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a9e:	b662      	cpsie	i
 8003aa0:	e197      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d11d      	bne.n	8003ae6 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003aba:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ae2:	b662      	cpsie	i
 8003ae4:	e175      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b0c:	e161      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	f200 811a 	bhi.w	8003d4c <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d123      	bne.n	8003b68 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f001 fa23 	bl	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e162      	b.n	8003dfa <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b66:	e134      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d150      	bne.n	8003c12 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	2200      	movs	r2, #0
 8003b78:	4906      	ldr	r1, [pc, #24]	; (8003b94 <HAL_I2C_Master_Receive+0x238>)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f001 f8a0 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e137      	b.n	8003dfa <HAL_I2C_Master_Receive+0x49e>
 8003b8a:	bf00      	nop
 8003b8c:	00100002 	.word	0x00100002
 8003b90:	ffff0000 	.word	0xffff0000
 8003b94:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b98:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bdc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c10:	e0df      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	2200      	movs	r2, #0
 8003c1a:	497a      	ldr	r1, [pc, #488]	; (8003e04 <HAL_I2C_Master_Receive+0x4a8>)
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f001 f84f 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0e6      	b.n	8003dfa <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c3c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c70:	4b65      	ldr	r3, [pc, #404]	; (8003e08 <HAL_I2C_Master_Receive+0x4ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	08db      	lsrs	r3, r3, #3
 8003c76:	4a65      	ldr	r2, [pc, #404]	; (8003e0c <HAL_I2C_Master_Receive+0x4b0>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	0a1a      	lsrs	r2, r3, #8
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	00da      	lsls	r2, r3, #3
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d117      	bne.n	8003cc6 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003cb8:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e099      	b.n	8003dfa <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d1da      	bne.n	8003c8a <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d16:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d4a:	e042      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f001 f90d 	bl	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e04c      	b.n	8003dfa <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d118      	bne.n	8003dd2 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f47f ae99 	bne.w	8003b0e <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3728      	adds	r7, #40	; 0x28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	00010004 	.word	0x00010004
 8003e08:	20000018 	.word	0x20000018
 8003e0c:	14f8b589 	.word	0x14f8b589

08003e10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	460b      	mov	r3, r1
 8003e24:	813b      	strh	r3, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2a:	f7fe fe91 	bl	8002b50 <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	f040 80d9 	bne.w	8003ff0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2319      	movs	r3, #25
 8003e44:	2201      	movs	r2, #1
 8003e46:	496d      	ldr	r1, [pc, #436]	; (8003ffc <HAL_I2C_Mem_Write+0x1ec>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 ff39 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
 8003e56:	e0cc      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_I2C_Mem_Write+0x56>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e0c5      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d007      	beq.n	8003e8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2221      	movs	r2, #33	; 0x21
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2240      	movs	r2, #64	; 0x40
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a4d      	ldr	r2, [pc, #308]	; (8004000 <HAL_I2C_Mem_Write+0x1f0>)
 8003ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ece:	88f8      	ldrh	r0, [r7, #6]
 8003ed0:	893a      	ldrh	r2, [r7, #8]
 8003ed2:	8979      	ldrh	r1, [r7, #10]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	4603      	mov	r3, r0
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fd70 	bl	80049c4 <I2C_RequestMemoryWrite>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d052      	beq.n	8003f90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e081      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 ffba 	bl	8004e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d107      	bne.n	8003f16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e06b      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	781a      	ldrb	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d11b      	bne.n	8003f90 <HAL_I2C_Mem_Write+0x180>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1aa      	bne.n	8003eee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 ffa6 	bl	8004eee <I2C_WaitOnBTFFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d107      	bne.n	8003fc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e016      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e000      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ff0:	2302      	movs	r3, #2
  }
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	00100002 	.word	0x00100002
 8004000:	ffff0000 	.word	0xffff0000

08004004 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08c      	sub	sp, #48	; 0x30
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	4608      	mov	r0, r1
 800400e:	4611      	mov	r1, r2
 8004010:	461a      	mov	r2, r3
 8004012:	4603      	mov	r3, r0
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	460b      	mov	r3, r1
 8004018:	813b      	strh	r3, [r7, #8]
 800401a:	4613      	mov	r3, r2
 800401c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004022:	f7fe fd95 	bl	8002b50 <HAL_GetTick>
 8004026:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b20      	cmp	r3, #32
 8004032:	f040 823d 	bne.w	80044b0 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	2319      	movs	r3, #25
 800403c:	2201      	movs	r2, #1
 800403e:	4981      	ldr	r1, [pc, #516]	; (8004244 <HAL_I2C_Mem_Read+0x240>)
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fe3d 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
 800404e:	e230      	b.n	80044b2 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_I2C_Mem_Read+0x5a>
 800405a:	2302      	movs	r3, #2
 800405c:	e229      	b.n	80044b2 <HAL_I2C_Mem_Read+0x4ae>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d007      	beq.n	8004084 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2222      	movs	r2, #34	; 0x22
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2240      	movs	r2, #64	; 0x40
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a61      	ldr	r2, [pc, #388]	; (8004248 <HAL_I2C_Mem_Read+0x244>)
 80040c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c6:	88f8      	ldrh	r0, [r7, #6]
 80040c8:	893a      	ldrh	r2, [r7, #8]
 80040ca:	8979      	ldrh	r1, [r7, #10]
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4603      	mov	r3, r0
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fd0a 	bl	8004af0 <I2C_RequestMemoryRead>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e1e5      	b.n	80044b2 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d113      	bne.n	8004116 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e1b9      	b.n	800448a <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	2b01      	cmp	r3, #1
 800411c:	d11d      	bne.n	800415a <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800412e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004130:	2300      	movs	r3, #0
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004156:	b662      	cpsie	i
 8004158:	e197      	b.n	800448a <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	2b02      	cmp	r3, #2
 8004160:	d11d      	bne.n	800419e <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004170:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004172:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004198:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800419a:	b662      	cpsie	i
 800419c:	e175      	b.n	800448a <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80041c4:	e161      	b.n	800448a <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	f200 811a 	bhi.w	8004404 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d123      	bne.n	8004220 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fec7 	bl	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e162      	b.n	80044b2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800421e:	e134      	b.n	800448a <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004224:	2b02      	cmp	r3, #2
 8004226:	d150      	bne.n	80042ca <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422e:	2200      	movs	r2, #0
 8004230:	4906      	ldr	r1, [pc, #24]	; (800424c <HAL_I2C_Mem_Read+0x248>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fd44 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e137      	b.n	80044b2 <HAL_I2C_Mem_Read+0x4ae>
 8004242:	bf00      	nop
 8004244:	00100002 	.word	0x00100002
 8004248:	ffff0000 	.word	0xffff0000
 800424c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004250:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004260:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427e:	3b01      	subs	r3, #1
 8004280:	b29a      	uxth	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004294:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042c8:	e0df      	b.n	800448a <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	2200      	movs	r2, #0
 80042d2:	497a      	ldr	r1, [pc, #488]	; (80044bc <HAL_I2C_Mem_Read+0x4b8>)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fcf3 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e0e6      	b.n	80044b2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042f4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004328:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <HAL_I2C_Mem_Read+0x4bc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	4a65      	ldr	r2, [pc, #404]	; (80044c4 <HAL_I2C_Mem_Read+0x4c0>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	0a1a      	lsrs	r2, r3, #8
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	00da      	lsls	r2, r3, #3
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	3b01      	subs	r3, #1
 8004346:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d117      	bne.n	800437e <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	f043 0220 	orr.w	r2, r3, #32
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004370:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e099      	b.n	80044b2 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b04      	cmp	r3, #4
 800438a:	d1da      	bne.n	8004342 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043ce:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004402:	e042      	b.n	800448a <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fdb1 	bl	8004f70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e04c      	b.n	80044b2 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b04      	cmp	r3, #4
 8004456:	d118      	bne.n	800448a <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	2b00      	cmp	r3, #0
 8004490:	f47f ae99 	bne.w	80041c6 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e000      	b.n	80044b2 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
  }
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3728      	adds	r7, #40	; 0x28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	00010004 	.word	0x00010004
 80044c0:	20000018 	.word	0x20000018
 80044c4:	14f8b589 	.word	0x14f8b589

080044c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	607a      	str	r2, [r7, #4]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	460b      	mov	r3, r1
 80044d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80044d8:	f7fe fb3a 	bl	8002b50 <HAL_GetTick>
 80044dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80044de:	2301      	movs	r3, #1
 80044e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	f040 8111 	bne.w	8004712 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	2319      	movs	r3, #25
 80044f6:	2201      	movs	r2, #1
 80044f8:	4988      	ldr	r1, [pc, #544]	; (800471c <HAL_I2C_IsDeviceReady+0x254>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fbe0 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004506:	2302      	movs	r3, #2
 8004508:	e104      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_I2C_IsDeviceReady+0x50>
 8004514:	2302      	movs	r3, #2
 8004516:	e0fd      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b01      	cmp	r3, #1
 800452c:	d007      	beq.n	800453e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800454c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2224      	movs	r2, #36	; 0x24
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a70      	ldr	r2, [pc, #448]	; (8004720 <HAL_I2C_IsDeviceReady+0x258>)
 8004560:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004570:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2200      	movs	r2, #0
 800457a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fb9e 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004598:	d103      	bne.n	80045a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0b6      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045a6:	897b      	ldrh	r3, [r7, #10]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80045b6:	f7fe facb 	bl	8002b50 <HAL_GetTick>
 80045ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	bf0c      	ite	eq
 80045ca:	2301      	moveq	r3, #1
 80045cc:	2300      	movne	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2300      	movne	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80045ea:	e025      	b.n	8004638 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045ec:	f7fe fab0 	bl	8002b50 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d302      	bcc.n	8004602 <HAL_I2C_IsDeviceReady+0x13a>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	22a0      	movs	r2, #160	; 0xa0
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2ba0      	cmp	r3, #160	; 0xa0
 8004642:	d005      	beq.n	8004650 <HAL_I2C_IsDeviceReady+0x188>
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <HAL_I2C_IsDeviceReady+0x188>
 800464a:	7dbb      	ldrb	r3, [r7, #22]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0cd      	beq.n	80045ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b02      	cmp	r3, #2
 8004664:	d129      	bne.n	80046ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004674:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	2319      	movs	r3, #25
 8004692:	2201      	movs	r2, #1
 8004694:	4921      	ldr	r1, [pc, #132]	; (800471c <HAL_I2C_IsDeviceReady+0x254>)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fb12 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e036      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e02c      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	2319      	movs	r3, #25
 80046da:	2201      	movs	r2, #1
 80046dc:	490f      	ldr	r1, [pc, #60]	; (800471c <HAL_I2C_IsDeviceReady+0x254>)
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 faee 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e012      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	3301      	adds	r3, #1
 80046f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	f4ff af32 	bcc.w	8004562 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
  }
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	00100002 	.word	0x00100002
 8004720:	ffff0000 	.word	0xffff0000

08004724 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	460b      	mov	r3, r1
 8004732:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d006      	beq.n	800474e <I2C_MasterRequestWrite+0x2a>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d003      	beq.n	800474e <I2C_MasterRequestWrite+0x2a>
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800474c:	d108      	bne.n	8004760 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e00b      	b.n	8004778 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	2b12      	cmp	r3, #18
 8004766:	d107      	bne.n	8004778 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004776:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fa9b 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00d      	beq.n	80047ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479e:	d103      	bne.n	80047a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e035      	b.n	8004818 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b4:	d108      	bne.n	80047c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047b6:	897b      	ldrh	r3, [r7, #10]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047c4:	611a      	str	r2, [r3, #16]
 80047c6:	e01b      	b.n	8004800 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047c8:	897b      	ldrh	r3, [r7, #10]
 80047ca:	11db      	asrs	r3, r3, #7
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 0306 	and.w	r3, r3, #6
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f063 030f 	orn	r3, r3, #15
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	490e      	ldr	r1, [pc, #56]	; (8004820 <I2C_MasterRequestWrite+0xfc>)
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 fac1 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e010      	b.n	8004818 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047f6:	897b      	ldrh	r3, [r7, #10]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4907      	ldr	r1, [pc, #28]	; (8004824 <I2C_MasterRequestWrite+0x100>)
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fab1 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	00010008 	.word	0x00010008
 8004824:	00010002 	.word	0x00010002

08004828 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	607a      	str	r2, [r7, #4]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	460b      	mov	r3, r1
 8004836:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800484c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b08      	cmp	r3, #8
 8004852:	d006      	beq.n	8004862 <I2C_MasterRequestRead+0x3a>
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d003      	beq.n	8004862 <I2C_MasterRequestRead+0x3a>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004860:	d108      	bne.n	8004874 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e00b      	b.n	800488c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	2b11      	cmp	r3, #17
 800487a:	d107      	bne.n	800488c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800488a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fa11 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00d      	beq.n	80048c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b2:	d103      	bne.n	80048bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e079      	b.n	80049b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c8:	d108      	bne.n	80048dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048ca:	897b      	ldrh	r3, [r7, #10]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]
 80048da:	e05f      	b.n	800499c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048dc:	897b      	ldrh	r3, [r7, #10]
 80048de:	11db      	asrs	r3, r3, #7
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	f003 0306 	and.w	r3, r3, #6
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f063 030f 	orn	r3, r3, #15
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4930      	ldr	r1, [pc, #192]	; (80049bc <I2C_MasterRequestRead+0x194>)
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fa37 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e054      	b.n	80049b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800490a:	897b      	ldrh	r3, [r7, #10]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	4929      	ldr	r1, [pc, #164]	; (80049c0 <I2C_MasterRequestRead+0x198>)
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fa27 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e044      	b.n	80049b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800494e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f9af 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00d      	beq.n	8004984 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004976:	d103      	bne.n	8004980 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800497e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e017      	b.n	80049b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004984:	897b      	ldrh	r3, [r7, #10]
 8004986:	11db      	asrs	r3, r3, #7
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f003 0306 	and.w	r3, r3, #6
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f063 030e 	orn	r3, r3, #14
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	4907      	ldr	r1, [pc, #28]	; (80049c0 <I2C_MasterRequestRead+0x198>)
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f9e3 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	00010008 	.word	0x00010008
 80049c0:	00010002 	.word	0x00010002

080049c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	4608      	mov	r0, r1
 80049ce:	4611      	mov	r1, r2
 80049d0:	461a      	mov	r2, r3
 80049d2:	4603      	mov	r3, r0
 80049d4:	817b      	strh	r3, [r7, #10]
 80049d6:	460b      	mov	r3, r1
 80049d8:	813b      	strh	r3, [r7, #8]
 80049da:	4613      	mov	r3, r2
 80049dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f960 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a14:	d103      	bne.n	8004a1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e05f      	b.n	8004ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a22:	897b      	ldrh	r3, [r7, #10]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	6a3a      	ldr	r2, [r7, #32]
 8004a36:	492d      	ldr	r1, [pc, #180]	; (8004aec <I2C_RequestMemoryWrite+0x128>)
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f998 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e04c      	b.n	8004ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	6a39      	ldr	r1, [r7, #32]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fa02 	bl	8004e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00d      	beq.n	8004a8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d107      	bne.n	8004a86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e02b      	b.n	8004ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a90:	893b      	ldrh	r3, [r7, #8]
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	611a      	str	r2, [r3, #16]
 8004a9a:	e021      	b.n	8004ae0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a9c:	893b      	ldrh	r3, [r7, #8]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aac:	6a39      	ldr	r1, [r7, #32]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f9dc 	bl	8004e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00d      	beq.n	8004ad6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d107      	bne.n	8004ad2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e005      	b.n	8004ae2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad6:	893b      	ldrh	r3, [r7, #8]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	00010002 	.word	0x00010002

08004af0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	461a      	mov	r2, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	817b      	strh	r3, [r7, #10]
 8004b02:	460b      	mov	r3, r1
 8004b04:	813b      	strh	r3, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f8c2 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b50:	d103      	bne.n	8004b5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e0aa      	b.n	8004cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b5e:	897b      	ldrh	r3, [r7, #10]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	4952      	ldr	r1, [pc, #328]	; (8004cbc <I2C_RequestMemoryRead+0x1cc>)
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f8fa 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e097      	b.n	8004cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b84:	2300      	movs	r3, #0
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	6a39      	ldr	r1, [r7, #32]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f964 	bl	8004e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00d      	beq.n	8004bc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d107      	bne.n	8004bc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e076      	b.n	8004cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d105      	bne.n	8004bd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bcc:	893b      	ldrh	r3, [r7, #8]
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	611a      	str	r2, [r3, #16]
 8004bd6:	e021      	b.n	8004c1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bd8:	893b      	ldrh	r3, [r7, #8]
 8004bda:	0a1b      	lsrs	r3, r3, #8
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	6a39      	ldr	r1, [r7, #32]
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f93e 	bl	8004e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00d      	beq.n	8004c12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d107      	bne.n	8004c0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e050      	b.n	8004cb4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c12:	893b      	ldrh	r3, [r7, #8]
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1e:	6a39      	ldr	r1, [r7, #32]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f923 	bl	8004e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d107      	bne.n	8004c44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e035      	b.n	8004cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f82b 	bl	8004cc0 <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00d      	beq.n	8004c8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7e:	d103      	bne.n	8004c88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e013      	b.n	8004cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c8c:	897b      	ldrh	r3, [r7, #10]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	6a3a      	ldr	r2, [r7, #32]
 8004ca0:	4906      	ldr	r1, [pc, #24]	; (8004cbc <I2C_RequestMemoryRead+0x1cc>)
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f863 	bl	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	00010002 	.word	0x00010002

08004cc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd0:	e025      	b.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d021      	beq.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7fd ff39 	bl	8002b50 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d116      	bne.n	8004d1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e023      	b.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10d      	bne.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	43da      	mvns	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	e00c      	b.n	8004d5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d0b6      	beq.n	8004cd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d7c:	e051      	b.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d123      	bne.n	8004dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004da6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f043 0204 	orr.w	r2, r3, #4
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e046      	b.n	8004e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d021      	beq.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dde:	f7fd feb7 	bl	8002b50 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d302      	bcc.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d116      	bne.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e020      	b.n	8004e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	0c1b      	lsrs	r3, r3, #16
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d10c      	bne.n	8004e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	43da      	mvns	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bf14      	ite	ne
 8004e3e:	2301      	movne	r3, #1
 8004e40:	2300      	moveq	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	e00b      	b.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	43da      	mvns	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	4013      	ands	r3, r2
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	bf14      	ite	ne
 8004e58:	2301      	movne	r3, #1
 8004e5a:	2300      	moveq	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d18d      	bne.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e78:	e02d      	b.n	8004ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f8ce 	bl	800501c <I2C_IsAcknowledgeFailed>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e02d      	b.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d021      	beq.n	8004ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7fd fe5d 	bl	8002b50 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d116      	bne.n	8004ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f043 0220 	orr.w	r2, r3, #32
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e007      	b.n	8004ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee0:	2b80      	cmp	r3, #128	; 0x80
 8004ee2:	d1ca      	bne.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004efa:	e02d      	b.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f88d 	bl	800501c <I2C_IsAcknowledgeFailed>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e02d      	b.n	8004f68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d021      	beq.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f14:	f7fd fe1c 	bl	8002b50 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d302      	bcc.n	8004f2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d116      	bne.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	f043 0220 	orr.w	r2, r3, #32
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e007      	b.n	8004f68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d1ca      	bne.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f7c:	e042      	b.n	8005004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d119      	bne.n	8004fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0210 	mvn.w	r2, #16
 8004f94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e029      	b.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc0:	f7fd fdc6 	bl	8002b50 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d116      	bne.n	8005004 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f043 0220 	orr.w	r2, r3, #32
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e007      	b.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d1b5      	bne.n	8004f7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005032:	d11b      	bne.n	800506c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800503c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	f043 0204 	orr.w	r2, r3, #4
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e26c      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8087 	beq.w	80051a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005098:	4b92      	ldr	r3, [pc, #584]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f003 030c 	and.w	r3, r3, #12
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d00c      	beq.n	80050be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050a4:	4b8f      	ldr	r3, [pc, #572]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d112      	bne.n	80050d6 <HAL_RCC_OscConfig+0x5e>
 80050b0:	4b8c      	ldr	r3, [pc, #560]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050bc:	d10b      	bne.n	80050d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050be:	4b89      	ldr	r3, [pc, #548]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d06c      	beq.n	80051a4 <HAL_RCC_OscConfig+0x12c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d168      	bne.n	80051a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e246      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050de:	d106      	bne.n	80050ee <HAL_RCC_OscConfig+0x76>
 80050e0:	4b80      	ldr	r3, [pc, #512]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a7f      	ldr	r2, [pc, #508]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	e02e      	b.n	800514c <HAL_RCC_OscConfig+0xd4>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0x98>
 80050f6:	4b7b      	ldr	r3, [pc, #492]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a7a      	ldr	r2, [pc, #488]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b78      	ldr	r3, [pc, #480]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a77      	ldr	r2, [pc, #476]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e01d      	b.n	800514c <HAL_RCC_OscConfig+0xd4>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005118:	d10c      	bne.n	8005134 <HAL_RCC_OscConfig+0xbc>
 800511a:	4b72      	ldr	r3, [pc, #456]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a71      	ldr	r2, [pc, #452]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4b6f      	ldr	r3, [pc, #444]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a6e      	ldr	r2, [pc, #440]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800512c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e00b      	b.n	800514c <HAL_RCC_OscConfig+0xd4>
 8005134:	4b6b      	ldr	r3, [pc, #428]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a6a      	ldr	r2, [pc, #424]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800513a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a67      	ldr	r2, [pc, #412]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800514a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fd fcfc 	bl	8002b50 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7fd fcf8 	bl	8002b50 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e1fa      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	4b5d      	ldr	r3, [pc, #372]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0xe4>
 800517a:	e014      	b.n	80051a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fd fce8 	bl	8002b50 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005184:	f7fd fce4 	bl	8002b50 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	; 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e1e6      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	4b53      	ldr	r3, [pc, #332]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x10c>
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d063      	beq.n	800527a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051b2:	4b4c      	ldr	r3, [pc, #304]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051be:	4b49      	ldr	r3, [pc, #292]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d11c      	bne.n	8005204 <HAL_RCC_OscConfig+0x18c>
 80051ca:	4b46      	ldr	r3, [pc, #280]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d116      	bne.n	8005204 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d6:	4b43      	ldr	r3, [pc, #268]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_RCC_OscConfig+0x176>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d001      	beq.n	80051ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e1ba      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ee:	4b3d      	ldr	r3, [pc, #244]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4939      	ldr	r1, [pc, #228]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005202:	e03a      	b.n	800527a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005212:	f7fd fc9d 	bl	8002b50 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800521a:	f7fd fc99 	bl	8002b50 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e19b      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522c:	4b2d      	ldr	r3, [pc, #180]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005238:	4b2a      	ldr	r3, [pc, #168]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4927      	ldr	r1, [pc, #156]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005248:	4313      	orrs	r3, r2
 800524a:	600b      	str	r3, [r1, #0]
 800524c:	e015      	b.n	800527a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800524e:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005254:	f7fd fc7c 	bl	8002b50 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525c:	f7fd fc78 	bl	8002b50 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e17a      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526e:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d03a      	beq.n	80052fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d019      	beq.n	80052c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 8005290:	2201      	movs	r2, #1
 8005292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005294:	f7fd fc5c 	bl	8002b50 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800529c:	f7fd fc58 	bl	8002b50 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e15a      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052ba:	2001      	movs	r0, #1
 80052bc:	f000 fac6 	bl	800584c <RCC_Delay>
 80052c0:	e01c      	b.n	80052fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c2:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <HAL_RCC_OscConfig+0x274>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c8:	f7fd fc42 	bl	8002b50 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ce:	e00f      	b.n	80052f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d0:	f7fd fc3e 	bl	8002b50 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d908      	bls.n	80052f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e140      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
 80052e2:	bf00      	nop
 80052e4:	40021000 	.word	0x40021000
 80052e8:	42420000 	.word	0x42420000
 80052ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f0:	4b9e      	ldr	r3, [pc, #632]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e9      	bne.n	80052d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80a6 	beq.w	8005456 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800530e:	4b97      	ldr	r3, [pc, #604]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10d      	bne.n	8005336 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800531a:	4b94      	ldr	r3, [pc, #592]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4a93      	ldr	r2, [pc, #588]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 8005320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005324:	61d3      	str	r3, [r2, #28]
 8005326:	4b91      	ldr	r3, [pc, #580]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532e:	60bb      	str	r3, [r7, #8]
 8005330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005332:	2301      	movs	r3, #1
 8005334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005336:	4b8e      	ldr	r3, [pc, #568]	; (8005570 <HAL_RCC_OscConfig+0x4f8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d118      	bne.n	8005374 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005342:	4b8b      	ldr	r3, [pc, #556]	; (8005570 <HAL_RCC_OscConfig+0x4f8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a8a      	ldr	r2, [pc, #552]	; (8005570 <HAL_RCC_OscConfig+0x4f8>)
 8005348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800534e:	f7fd fbff 	bl	8002b50 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005356:	f7fd fbfb 	bl	8002b50 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b64      	cmp	r3, #100	; 0x64
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e0fd      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005368:	4b81      	ldr	r3, [pc, #516]	; (8005570 <HAL_RCC_OscConfig+0x4f8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d106      	bne.n	800538a <HAL_RCC_OscConfig+0x312>
 800537c:	4b7b      	ldr	r3, [pc, #492]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	4a7a      	ldr	r2, [pc, #488]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6213      	str	r3, [r2, #32]
 8005388:	e02d      	b.n	80053e6 <HAL_RCC_OscConfig+0x36e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x334>
 8005392:	4b76      	ldr	r3, [pc, #472]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	4a75      	ldr	r2, [pc, #468]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	6213      	str	r3, [r2, #32]
 800539e:	4b73      	ldr	r3, [pc, #460]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	4a72      	ldr	r2, [pc, #456]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80053a4:	f023 0304 	bic.w	r3, r3, #4
 80053a8:	6213      	str	r3, [r2, #32]
 80053aa:	e01c      	b.n	80053e6 <HAL_RCC_OscConfig+0x36e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d10c      	bne.n	80053ce <HAL_RCC_OscConfig+0x356>
 80053b4:	4b6d      	ldr	r3, [pc, #436]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	4a6c      	ldr	r2, [pc, #432]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80053ba:	f043 0304 	orr.w	r3, r3, #4
 80053be:	6213      	str	r3, [r2, #32]
 80053c0:	4b6a      	ldr	r3, [pc, #424]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	4a69      	ldr	r2, [pc, #420]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6213      	str	r3, [r2, #32]
 80053cc:	e00b      	b.n	80053e6 <HAL_RCC_OscConfig+0x36e>
 80053ce:	4b67      	ldr	r3, [pc, #412]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	4a66      	ldr	r2, [pc, #408]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6213      	str	r3, [r2, #32]
 80053da:	4b64      	ldr	r3, [pc, #400]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	4a63      	ldr	r2, [pc, #396]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d015      	beq.n	800541a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ee:	f7fd fbaf 	bl	8002b50 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f4:	e00a      	b.n	800540c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f6:	f7fd fbab 	bl	8002b50 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	f241 3288 	movw	r2, #5000	; 0x1388
 8005404:	4293      	cmp	r3, r2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e0ab      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540c:	4b57      	ldr	r3, [pc, #348]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0ee      	beq.n	80053f6 <HAL_RCC_OscConfig+0x37e>
 8005418:	e014      	b.n	8005444 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541a:	f7fd fb99 	bl	8002b50 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005420:	e00a      	b.n	8005438 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005422:	f7fd fb95 	bl	8002b50 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005430:	4293      	cmp	r3, r2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e095      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005438:	4b4c      	ldr	r3, [pc, #304]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1ee      	bne.n	8005422 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d105      	bne.n	8005456 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544a:	4b48      	ldr	r3, [pc, #288]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4a47      	ldr	r2, [pc, #284]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005454:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8081 	beq.w	8005562 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005460:	4b42      	ldr	r3, [pc, #264]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 030c 	and.w	r3, r3, #12
 8005468:	2b08      	cmp	r3, #8
 800546a:	d061      	beq.n	8005530 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d146      	bne.n	8005502 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005474:	4b3f      	ldr	r3, [pc, #252]	; (8005574 <HAL_RCC_OscConfig+0x4fc>)
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547a:	f7fd fb69 	bl	8002b50 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005482:	f7fd fb65 	bl	8002b50 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e067      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005494:	4b35      	ldr	r3, [pc, #212]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f0      	bne.n	8005482 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a8:	d108      	bne.n	80054bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054aa:	4b30      	ldr	r3, [pc, #192]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	492d      	ldr	r1, [pc, #180]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054bc:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a19      	ldr	r1, [r3, #32]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	430b      	orrs	r3, r1
 80054ce:	4927      	ldr	r1, [pc, #156]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d4:	4b27      	ldr	r3, [pc, #156]	; (8005574 <HAL_RCC_OscConfig+0x4fc>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054da:	f7fd fb39 	bl	8002b50 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e2:	f7fd fb35 	bl	8002b50 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e037      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054f4:	4b1d      	ldr	r3, [pc, #116]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x46a>
 8005500:	e02f      	b.n	8005562 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <HAL_RCC_OscConfig+0x4fc>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005508:	f7fd fb22 	bl	8002b50 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005510:	f7fd fb1e 	bl	8002b50 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e020      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x498>
 800552e:	e018      	b.n	8005562 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e013      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <HAL_RCC_OscConfig+0x4f4>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	429a      	cmp	r2, r3
 800554e:	d106      	bne.n	800555e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d001      	beq.n	8005562 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	40021000 	.word	0x40021000
 8005570:	40007000 	.word	0x40007000
 8005574:	42420060 	.word	0x42420060

08005578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0d0      	b.n	800572e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800558c:	4b6a      	ldr	r3, [pc, #424]	; (8005738 <HAL_RCC_ClockConfig+0x1c0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d910      	bls.n	80055bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	4b67      	ldr	r3, [pc, #412]	; (8005738 <HAL_RCC_ClockConfig+0x1c0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 0207 	bic.w	r2, r3, #7
 80055a2:	4965      	ldr	r1, [pc, #404]	; (8005738 <HAL_RCC_ClockConfig+0x1c0>)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	4b63      	ldr	r3, [pc, #396]	; (8005738 <HAL_RCC_ClockConfig+0x1c0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d001      	beq.n	80055bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0b8      	b.n	800572e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d020      	beq.n	800560a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d4:	4b59      	ldr	r3, [pc, #356]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4a58      	ldr	r2, [pc, #352]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 80055da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055ec:	4b53      	ldr	r3, [pc, #332]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4a52      	ldr	r2, [pc, #328]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 80055f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80055f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f8:	4b50      	ldr	r3, [pc, #320]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	494d      	ldr	r1, [pc, #308]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 8005606:	4313      	orrs	r3, r2
 8005608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d040      	beq.n	8005698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d107      	bne.n	800562e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561e:	4b47      	ldr	r3, [pc, #284]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d115      	bne.n	8005656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e07f      	b.n	800572e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d107      	bne.n	8005646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005636:	4b41      	ldr	r3, [pc, #260]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e073      	b.n	800572e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005646:	4b3d      	ldr	r3, [pc, #244]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e06b      	b.n	800572e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005656:	4b39      	ldr	r3, [pc, #228]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f023 0203 	bic.w	r2, r3, #3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	4936      	ldr	r1, [pc, #216]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 8005664:	4313      	orrs	r3, r2
 8005666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005668:	f7fd fa72 	bl	8002b50 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566e:	e00a      	b.n	8005686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005670:	f7fd fa6e 	bl	8002b50 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	; 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e053      	b.n	800572e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005686:	4b2d      	ldr	r3, [pc, #180]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 020c 	and.w	r2, r3, #12
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	429a      	cmp	r2, r3
 8005696:	d1eb      	bne.n	8005670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005698:	4b27      	ldr	r3, [pc, #156]	; (8005738 <HAL_RCC_ClockConfig+0x1c0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d210      	bcs.n	80056c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a6:	4b24      	ldr	r3, [pc, #144]	; (8005738 <HAL_RCC_ClockConfig+0x1c0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 0207 	bic.w	r2, r3, #7
 80056ae:	4922      	ldr	r1, [pc, #136]	; (8005738 <HAL_RCC_ClockConfig+0x1c0>)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b6:	4b20      	ldr	r3, [pc, #128]	; (8005738 <HAL_RCC_ClockConfig+0x1c0>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e032      	b.n	800572e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d4:	4b19      	ldr	r3, [pc, #100]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	4916      	ldr	r1, [pc, #88]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056f2:	4b12      	ldr	r3, [pc, #72]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	490e      	ldr	r1, [pc, #56]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 8005702:	4313      	orrs	r3, r2
 8005704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005706:	f000 f821 	bl	800574c <HAL_RCC_GetSysClockFreq>
 800570a:	4601      	mov	r1, r0
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <HAL_RCC_ClockConfig+0x1c4>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	091b      	lsrs	r3, r3, #4
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <HAL_RCC_ClockConfig+0x1c8>)
 8005718:	5cd3      	ldrb	r3, [r2, r3]
 800571a:	fa21 f303 	lsr.w	r3, r1, r3
 800571e:	4a09      	ldr	r2, [pc, #36]	; (8005744 <HAL_RCC_ClockConfig+0x1cc>)
 8005720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005722:	4b09      	ldr	r3, [pc, #36]	; (8005748 <HAL_RCC_ClockConfig+0x1d0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fd f9d0 	bl	8002acc <HAL_InitTick>

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	40022000 	.word	0x40022000
 800573c:	40021000 	.word	0x40021000
 8005740:	0800736c 	.word	0x0800736c
 8005744:	20000018 	.word	0x20000018
 8005748:	2000001c 	.word	0x2000001c

0800574c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800574c:	b490      	push	{r4, r7}
 800574e:	b08a      	sub	sp, #40	; 0x28
 8005750:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005752:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005754:	1d3c      	adds	r4, r7, #4
 8005756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800575c:	4b28      	ldr	r3, [pc, #160]	; (8005800 <HAL_RCC_GetSysClockFreq+0xb4>)
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	2300      	movs	r3, #0
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	2300      	movs	r3, #0
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005776:	4b23      	ldr	r3, [pc, #140]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f003 030c 	and.w	r3, r3, #12
 8005782:	2b04      	cmp	r3, #4
 8005784:	d002      	beq.n	800578c <HAL_RCC_GetSysClockFreq+0x40>
 8005786:	2b08      	cmp	r3, #8
 8005788:	d003      	beq.n	8005792 <HAL_RCC_GetSysClockFreq+0x46>
 800578a:	e02d      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800578c:	4b1e      	ldr	r3, [pc, #120]	; (8005808 <HAL_RCC_GetSysClockFreq+0xbc>)
 800578e:	623b      	str	r3, [r7, #32]
      break;
 8005790:	e02d      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	0c9b      	lsrs	r3, r3, #18
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800579e:	4413      	add	r3, r2
 80057a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80057a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d013      	beq.n	80057d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	0c5b      	lsrs	r3, r3, #17
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057be:	4413      	add	r3, r2
 80057c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80057c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	4a0f      	ldr	r2, [pc, #60]	; (8005808 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057ca:	fb02 f203 	mul.w	r2, r2, r3
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
 80057d6:	e004      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4a0c      	ldr	r2, [pc, #48]	; (800580c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	623b      	str	r3, [r7, #32]
      break;
 80057e6:	e002      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057e8:	4b07      	ldr	r3, [pc, #28]	; (8005808 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057ea:	623b      	str	r3, [r7, #32]
      break;
 80057ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ee:	6a3b      	ldr	r3, [r7, #32]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3728      	adds	r7, #40	; 0x28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc90      	pop	{r4, r7}
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	08007358 	.word	0x08007358
 8005800:	08007368 	.word	0x08007368
 8005804:	40021000 	.word	0x40021000
 8005808:	007a1200 	.word	0x007a1200
 800580c:	003d0900 	.word	0x003d0900

08005810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005814:	4b02      	ldr	r3, [pc, #8]	; (8005820 <HAL_RCC_GetHCLKFreq+0x10>)
 8005816:	681b      	ldr	r3, [r3, #0]
}
 8005818:	4618      	mov	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr
 8005820:	20000018 	.word	0x20000018

08005824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005828:	f7ff fff2 	bl	8005810 <HAL_RCC_GetHCLKFreq>
 800582c:	4601      	mov	r1, r0
 800582e:	4b05      	ldr	r3, [pc, #20]	; (8005844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	0a1b      	lsrs	r3, r3, #8
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	4a03      	ldr	r2, [pc, #12]	; (8005848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800583a:	5cd3      	ldrb	r3, [r2, r3]
 800583c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40021000 	.word	0x40021000
 8005848:	0800737c 	.word	0x0800737c

0800584c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <RCC_Delay+0x34>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <RCC_Delay+0x38>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	0a5b      	lsrs	r3, r3, #9
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005868:	bf00      	nop
  }
  while (Delay --);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1e5a      	subs	r2, r3, #1
 800586e:	60fa      	str	r2, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f9      	bne.n	8005868 <RCC_Delay+0x1c>
}
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20000018 	.word	0x20000018
 8005884:	10624dd3 	.word	0x10624dd3

08005888 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d07d      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80058a4:	2300      	movs	r3, #0
 80058a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058a8:	4b4f      	ldr	r3, [pc, #316]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10d      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b4:	4b4c      	ldr	r3, [pc, #304]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	4a4b      	ldr	r2, [pc, #300]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058be:	61d3      	str	r3, [r2, #28]
 80058c0:	4b49      	ldr	r3, [pc, #292]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	4b46      	ldr	r3, [pc, #280]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d118      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058dc:	4b43      	ldr	r3, [pc, #268]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a42      	ldr	r2, [pc, #264]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058e8:	f7fd f932 	bl	8002b50 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ee:	e008      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f0:	f7fd f92e 	bl	8002b50 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	; 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e06d      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005902:	4b3a      	ldr	r3, [pc, #232]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800590e:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005916:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d02e      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	d027      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800592c:	4b2e      	ldr	r3, [pc, #184]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005934:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005936:	4b2e      	ldr	r3, [pc, #184]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800593c:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005942:	4a29      	ldr	r2, [pc, #164]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d014      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005952:	f7fd f8fd 	bl	8002b50 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005958:	e00a      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fd f8f9 	bl	8002b50 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	; 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e036      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005970:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0ee      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800597c:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	4917      	ldr	r1, [pc, #92]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800598a:	4313      	orrs	r3, r2
 800598c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800598e:	7dfb      	ldrb	r3, [r7, #23]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d105      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005994:	4b14      	ldr	r3, [pc, #80]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	4a13      	ldr	r2, [pc, #76]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800599a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d008      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	490b      	ldr	r1, [pc, #44]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d008      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	4904      	ldr	r1, [pc, #16]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40021000 	.word	0x40021000
 80059ec:	40007000 	.word	0x40007000
 80059f0:	42420440 	.word	0x42420440

080059f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e041      	b.n	8005a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fc ff7a 	bl	8002914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	4619      	mov	r1, r3
 8005a32:	4610      	mov	r0, r2
 8005a34:	f000 fad8 	bl	8005fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d001      	beq.n	8005aac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e02d      	b.n	8005b08 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abc:	d009      	beq.n	8005ad2 <HAL_TIM_Base_Start+0x3e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a14      	ldr	r2, [pc, #80]	; (8005b14 <HAL_TIM_Base_Start+0x80>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_TIM_Base_Start+0x3e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a12      	ldr	r2, [pc, #72]	; (8005b18 <HAL_TIM_Base_Start+0x84>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d111      	bne.n	8005af6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b06      	cmp	r3, #6
 8005ae2:	d010      	beq.n	8005b06 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af4:	e007      	b.n	8005b06 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bc80      	pop	{r7}
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800

08005b1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d001      	beq.n	8005b34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e035      	b.n	8005ba0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d009      	beq.n	8005b6a <HAL_TIM_Base_Start_IT+0x4e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a14      	ldr	r2, [pc, #80]	; (8005bac <HAL_TIM_Base_Start_IT+0x90>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_TIM_Base_Start_IT+0x4e>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a12      	ldr	r2, [pc, #72]	; (8005bb0 <HAL_TIM_Base_Start_IT+0x94>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d111      	bne.n	8005b8e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b06      	cmp	r3, #6
 8005b7a:	d010      	beq.n	8005b9e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8c:	e007      	b.n	8005b9e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0201 	orr.w	r2, r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bc80      	pop	{r7}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40000800 	.word	0x40000800

08005bb4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0201 	bic.w	r2, r2, #1
 8005bca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a1a      	ldr	r2, [r3, #32]
 8005bd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10f      	bne.n	8005bfc <HAL_TIM_Base_Stop_IT+0x48>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6a1a      	ldr	r2, [r3, #32]
 8005be2:	f240 4344 	movw	r3, #1092	; 0x444
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d107      	bne.n	8005bfc <HAL_TIM_Base_Stop_IT+0x48>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d122      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0202 	mvn.w	r2, #2
 8005c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f9ad 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9a0 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f9af 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d122      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d11b      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0204 	mvn.w	r2, #4
 8005c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f983 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005cac:	e005      	b.n	8005cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f976 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f985 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d122      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d11b      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0208 	mvn.w	r2, #8
 8005ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2204      	movs	r2, #4
 8005cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f959 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005d00:	e005      	b.n	8005d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f94c 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f95b 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d122      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d11b      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0210 	mvn.w	r2, #16
 8005d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f92f 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005d54:	e005      	b.n	8005d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f922 	bl	8005fa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f931 	bl	8005fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10e      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d107      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0201 	mvn.w	r2, #1
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f8fd 	bl	8005f8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b80      	cmp	r3, #128	; 0x80
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dac:	2b80      	cmp	r3, #128	; 0x80
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fa5b 	bl	8006276 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d10e      	bne.n	8005dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	d107      	bne.n	8005dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f8f5 	bl	8005fd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0220 	mvn.w	r2, #32
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fa26 	bl	8006264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIM_ConfigClockSource+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e0a6      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x166>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d067      	beq.n	8005f40 <HAL_TIM_ConfigClockSource+0x120>
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d80b      	bhi.n	8005e8c <HAL_TIM_ConfigClockSource+0x6c>
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d073      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0x140>
 8005e78:	2b10      	cmp	r3, #16
 8005e7a:	d802      	bhi.n	8005e82 <HAL_TIM_ConfigClockSource+0x62>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d06f      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e80:	e078      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	d06c      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0x140>
 8005e86:	2b30      	cmp	r3, #48	; 0x30
 8005e88:	d06a      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e8a:	e073      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e8c:	2b70      	cmp	r3, #112	; 0x70
 8005e8e:	d00d      	beq.n	8005eac <HAL_TIM_ConfigClockSource+0x8c>
 8005e90:	2b70      	cmp	r3, #112	; 0x70
 8005e92:	d804      	bhi.n	8005e9e <HAL_TIM_ConfigClockSource+0x7e>
 8005e94:	2b50      	cmp	r3, #80	; 0x50
 8005e96:	d033      	beq.n	8005f00 <HAL_TIM_ConfigClockSource+0xe0>
 8005e98:	2b60      	cmp	r3, #96	; 0x60
 8005e9a:	d041      	beq.n	8005f20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005e9c:	e06a      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea2:	d066      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x152>
 8005ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea8:	d017      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005eaa:	e063      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	6899      	ldr	r1, [r3, #8]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f000 f95b 	bl	8006176 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ece:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	609a      	str	r2, [r3, #8]
      break;
 8005ed8:	e04c      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6899      	ldr	r1, [r3, #8]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f000 f944 	bl	8006176 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005efc:	609a      	str	r2, [r3, #8]
      break;
 8005efe:	e039      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6859      	ldr	r1, [r3, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f000 f8bb 	bl	8006088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2150      	movs	r1, #80	; 0x50
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 f912 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005f1e:	e029      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	6859      	ldr	r1, [r3, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f000 f8d9 	bl	80060e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2160      	movs	r1, #96	; 0x60
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f902 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005f3e:	e019      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6859      	ldr	r1, [r3, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f000 f89b 	bl	8006088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2140      	movs	r1, #64	; 0x40
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 f8f2 	bl	8006142 <TIM_ITRx_SetConfig>
      break;
 8005f5e:	e009      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f000 f8e9 	bl	8006142 <TIM_ITRx_SetConfig>
        break;
 8005f70:	e000      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffe:	d007      	beq.n	8006010 <TIM_Base_SetConfig+0x28>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a1f      	ldr	r2, [pc, #124]	; (8006080 <TIM_Base_SetConfig+0x98>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_Base_SetConfig+0x28>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <TIM_Base_SetConfig+0x9c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006028:	d007      	beq.n	800603a <TIM_Base_SetConfig+0x52>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a14      	ldr	r2, [pc, #80]	; (8006080 <TIM_Base_SetConfig+0x98>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_Base_SetConfig+0x52>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a13      	ldr	r2, [pc, #76]	; (8006084 <TIM_Base_SetConfig+0x9c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d108      	bne.n	800604c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	615a      	str	r2, [r3, #20]
}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	bc80      	pop	{r7}
 800607e:	4770      	bx	lr
 8006080:	40000400 	.word	0x40000400
 8006084:	40000800 	.word	0x40000800

08006088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 030a 	bic.w	r3, r3, #10
 80060c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr

080060e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	f023 0210 	bic.w	r2, r3, #16
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800610e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	031b      	lsls	r3, r3, #12
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006120:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	621a      	str	r2, [r3, #32]
}
 8006138:	bf00      	nop
 800613a:	371c      	adds	r7, #28
 800613c:	46bd      	mov	sp, r7
 800613e:	bc80      	pop	{r7}
 8006140:	4770      	bx	lr

08006142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	f043 0307 	orr.w	r3, r3, #7
 8006164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	bf00      	nop
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	bc80      	pop	{r7}
 8006174:	4770      	bx	lr

08006176 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006176:	b480      	push	{r7}
 8006178:	b087      	sub	sp, #28
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006190:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	021a      	lsls	r2, r3, #8
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	431a      	orrs	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	4313      	orrs	r3, r2
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	609a      	str	r2, [r3, #8]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e041      	b.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620e:	d009      	beq.n	8006224 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a11      	ldr	r2, [pc, #68]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a10      	ldr	r2, [pc, #64]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d10c      	bne.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	4313      	orrs	r3, r2
 8006234:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	bc80      	pop	{r7}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40000400 	.word	0x40000400
 8006260:	40000800 	.word	0x40000800

08006264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr

08006276 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <__errno>:
 8006288:	4b01      	ldr	r3, [pc, #4]	; (8006290 <__errno+0x8>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000024 	.word	0x20000024

08006294 <__libc_init_array>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	2500      	movs	r5, #0
 8006298:	4e0c      	ldr	r6, [pc, #48]	; (80062cc <__libc_init_array+0x38>)
 800629a:	4c0d      	ldr	r4, [pc, #52]	; (80062d0 <__libc_init_array+0x3c>)
 800629c:	1ba4      	subs	r4, r4, r6
 800629e:	10a4      	asrs	r4, r4, #2
 80062a0:	42a5      	cmp	r5, r4
 80062a2:	d109      	bne.n	80062b8 <__libc_init_array+0x24>
 80062a4:	f001 f84c 	bl	8007340 <_init>
 80062a8:	2500      	movs	r5, #0
 80062aa:	4e0a      	ldr	r6, [pc, #40]	; (80062d4 <__libc_init_array+0x40>)
 80062ac:	4c0a      	ldr	r4, [pc, #40]	; (80062d8 <__libc_init_array+0x44>)
 80062ae:	1ba4      	subs	r4, r4, r6
 80062b0:	10a4      	asrs	r4, r4, #2
 80062b2:	42a5      	cmp	r5, r4
 80062b4:	d105      	bne.n	80062c2 <__libc_init_array+0x2e>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062bc:	4798      	blx	r3
 80062be:	3501      	adds	r5, #1
 80062c0:	e7ee      	b.n	80062a0 <__libc_init_array+0xc>
 80062c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062c6:	4798      	blx	r3
 80062c8:	3501      	adds	r5, #1
 80062ca:	e7f2      	b.n	80062b2 <__libc_init_array+0x1e>
 80062cc:	080073c8 	.word	0x080073c8
 80062d0:	080073c8 	.word	0x080073c8
 80062d4:	080073c8 	.word	0x080073c8
 80062d8:	080073cc 	.word	0x080073cc

080062dc <memset>:
 80062dc:	4603      	mov	r3, r0
 80062de:	4402      	add	r2, r0
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d100      	bne.n	80062e6 <memset+0xa>
 80062e4:	4770      	bx	lr
 80062e6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ea:	e7f9      	b.n	80062e0 <memset+0x4>

080062ec <pow>:
 80062ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f0:	b08f      	sub	sp, #60	; 0x3c
 80062f2:	461d      	mov	r5, r3
 80062f4:	4680      	mov	r8, r0
 80062f6:	4689      	mov	r9, r1
 80062f8:	4614      	mov	r4, r2
 80062fa:	f000 f955 	bl	80065a8 <__ieee754_pow>
 80062fe:	4fa1      	ldr	r7, [pc, #644]	; (8006584 <pow+0x298>)
 8006300:	e9cd 0100 	strd	r0, r1, [sp]
 8006304:	f997 3000 	ldrsb.w	r3, [r7]
 8006308:	463e      	mov	r6, r7
 800630a:	9302      	str	r3, [sp, #8]
 800630c:	3301      	adds	r3, #1
 800630e:	d05f      	beq.n	80063d0 <pow+0xe4>
 8006310:	4622      	mov	r2, r4
 8006312:	462b      	mov	r3, r5
 8006314:	4620      	mov	r0, r4
 8006316:	4629      	mov	r1, r5
 8006318:	f7fa fb70 	bl	80009fc <__aeabi_dcmpun>
 800631c:	4682      	mov	sl, r0
 800631e:	2800      	cmp	r0, #0
 8006320:	d156      	bne.n	80063d0 <pow+0xe4>
 8006322:	4642      	mov	r2, r8
 8006324:	464b      	mov	r3, r9
 8006326:	4640      	mov	r0, r8
 8006328:	4649      	mov	r1, r9
 800632a:	f7fa fb67 	bl	80009fc <__aeabi_dcmpun>
 800632e:	9003      	str	r0, [sp, #12]
 8006330:	b1e8      	cbz	r0, 800636e <pow+0x82>
 8006332:	2200      	movs	r2, #0
 8006334:	2300      	movs	r3, #0
 8006336:	4620      	mov	r0, r4
 8006338:	4629      	mov	r1, r5
 800633a:	f7fa fb2d 	bl	8000998 <__aeabi_dcmpeq>
 800633e:	2800      	cmp	r0, #0
 8006340:	d046      	beq.n	80063d0 <pow+0xe4>
 8006342:	2301      	movs	r3, #1
 8006344:	2200      	movs	r2, #0
 8006346:	9304      	str	r3, [sp, #16]
 8006348:	4b8f      	ldr	r3, [pc, #572]	; (8006588 <pow+0x29c>)
 800634a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800634e:	9305      	str	r3, [sp, #20]
 8006350:	4b8e      	ldr	r3, [pc, #568]	; (800658c <pow+0x2a0>)
 8006352:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006356:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800635a:	9b02      	ldr	r3, [sp, #8]
 800635c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d031      	beq.n	80063c8 <pow+0xdc>
 8006364:	a804      	add	r0, sp, #16
 8006366:	f000 fedf 	bl	8007128 <matherr>
 800636a:	bb38      	cbnz	r0, 80063bc <pow+0xd0>
 800636c:	e058      	b.n	8006420 <pow+0x134>
 800636e:	f04f 0a00 	mov.w	sl, #0
 8006372:	f04f 0b00 	mov.w	fp, #0
 8006376:	4652      	mov	r2, sl
 8006378:	465b      	mov	r3, fp
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	f7fa fb0b 	bl	8000998 <__aeabi_dcmpeq>
 8006382:	2800      	cmp	r0, #0
 8006384:	d051      	beq.n	800642a <pow+0x13e>
 8006386:	4652      	mov	r2, sl
 8006388:	465b      	mov	r3, fp
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7fa fb03 	bl	8000998 <__aeabi_dcmpeq>
 8006392:	4606      	mov	r6, r0
 8006394:	b308      	cbz	r0, 80063da <pow+0xee>
 8006396:	2301      	movs	r3, #1
 8006398:	9304      	str	r3, [sp, #16]
 800639a:	4b7b      	ldr	r3, [pc, #492]	; (8006588 <pow+0x29c>)
 800639c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80063a0:	9305      	str	r3, [sp, #20]
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80063a8:	930c      	str	r3, [sp, #48]	; 0x30
 80063aa:	9b02      	ldr	r3, [sp, #8]
 80063ac:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0d7      	beq.n	8006364 <pow+0x78>
 80063b4:	2200      	movs	r2, #0
 80063b6:	4b75      	ldr	r3, [pc, #468]	; (800658c <pow+0x2a0>)
 80063b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80063bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063be:	b11b      	cbz	r3, 80063c8 <pow+0xdc>
 80063c0:	f7ff ff62 	bl	8006288 <__errno>
 80063c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063c6:	6003      	str	r3, [r0, #0]
 80063c8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80063cc:	e9cd 3400 	strd	r3, r4, [sp]
 80063d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063d4:	b00f      	add	sp, #60	; 0x3c
 80063d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063da:	4620      	mov	r0, r4
 80063dc:	4629      	mov	r1, r5
 80063de:	f000 fe9d 	bl	800711c <finite>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d0f4      	beq.n	80063d0 <pow+0xe4>
 80063e6:	4652      	mov	r2, sl
 80063e8:	465b      	mov	r3, fp
 80063ea:	4620      	mov	r0, r4
 80063ec:	4629      	mov	r1, r5
 80063ee:	f7fa fadd 	bl	80009ac <__aeabi_dcmplt>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d0ec      	beq.n	80063d0 <pow+0xe4>
 80063f6:	2301      	movs	r3, #1
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	4b63      	ldr	r3, [pc, #396]	; (8006588 <pow+0x29c>)
 80063fc:	960c      	str	r6, [sp, #48]	; 0x30
 80063fe:	9305      	str	r3, [sp, #20]
 8006400:	f997 3000 	ldrsb.w	r3, [r7]
 8006404:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006408:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800640c:	b913      	cbnz	r3, 8006414 <pow+0x128>
 800640e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006412:	e7a7      	b.n	8006364 <pow+0x78>
 8006414:	2000      	movs	r0, #0
 8006416:	495e      	ldr	r1, [pc, #376]	; (8006590 <pow+0x2a4>)
 8006418:	2b02      	cmp	r3, #2
 800641a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800641e:	d1a1      	bne.n	8006364 <pow+0x78>
 8006420:	f7ff ff32 	bl	8006288 <__errno>
 8006424:	2321      	movs	r3, #33	; 0x21
 8006426:	6003      	str	r3, [r0, #0]
 8006428:	e7c8      	b.n	80063bc <pow+0xd0>
 800642a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800642e:	f000 fe75 	bl	800711c <finite>
 8006432:	9002      	str	r0, [sp, #8]
 8006434:	2800      	cmp	r0, #0
 8006436:	d177      	bne.n	8006528 <pow+0x23c>
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f000 fe6e 	bl	800711c <finite>
 8006440:	2800      	cmp	r0, #0
 8006442:	d071      	beq.n	8006528 <pow+0x23c>
 8006444:	4620      	mov	r0, r4
 8006446:	4629      	mov	r1, r5
 8006448:	f000 fe68 	bl	800711c <finite>
 800644c:	2800      	cmp	r0, #0
 800644e:	d06b      	beq.n	8006528 <pow+0x23c>
 8006450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f7fa fad0 	bl	80009fc <__aeabi_dcmpun>
 800645c:	f997 7000 	ldrsb.w	r7, [r7]
 8006460:	4b49      	ldr	r3, [pc, #292]	; (8006588 <pow+0x29c>)
 8006462:	b1a0      	cbz	r0, 800648e <pow+0x1a2>
 8006464:	2201      	movs	r2, #1
 8006466:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800646a:	9b02      	ldr	r3, [sp, #8]
 800646c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006470:	930c      	str	r3, [sp, #48]	; 0x30
 8006472:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006476:	2f00      	cmp	r7, #0
 8006478:	d0c9      	beq.n	800640e <pow+0x122>
 800647a:	4652      	mov	r2, sl
 800647c:	465b      	mov	r3, fp
 800647e:	4650      	mov	r0, sl
 8006480:	4659      	mov	r1, fp
 8006482:	f7fa f94b 	bl	800071c <__aeabi_ddiv>
 8006486:	2f02      	cmp	r7, #2
 8006488:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800648c:	e7c7      	b.n	800641e <pow+0x132>
 800648e:	2203      	movs	r2, #3
 8006490:	900c      	str	r0, [sp, #48]	; 0x30
 8006492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006496:	4620      	mov	r0, r4
 8006498:	4629      	mov	r1, r5
 800649a:	2200      	movs	r2, #0
 800649c:	4b3d      	ldr	r3, [pc, #244]	; (8006594 <pow+0x2a8>)
 800649e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80064a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80064a6:	f7fa f80f 	bl	80004c8 <__aeabi_dmul>
 80064aa:	4604      	mov	r4, r0
 80064ac:	460d      	mov	r5, r1
 80064ae:	bb17      	cbnz	r7, 80064f6 <pow+0x20a>
 80064b0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80064b4:	4b38      	ldr	r3, [pc, #224]	; (8006598 <pow+0x2ac>)
 80064b6:	4640      	mov	r0, r8
 80064b8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80064bc:	4649      	mov	r1, r9
 80064be:	4652      	mov	r2, sl
 80064c0:	465b      	mov	r3, fp
 80064c2:	f7fa fa73 	bl	80009ac <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d054      	beq.n	8006574 <pow+0x288>
 80064ca:	4620      	mov	r0, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	f000 fe33 	bl	8007138 <rint>
 80064d2:	4622      	mov	r2, r4
 80064d4:	462b      	mov	r3, r5
 80064d6:	f7fa fa5f 	bl	8000998 <__aeabi_dcmpeq>
 80064da:	b920      	cbnz	r0, 80064e6 <pow+0x1fa>
 80064dc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80064e0:	4b2e      	ldr	r3, [pc, #184]	; (800659c <pow+0x2b0>)
 80064e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80064e6:	f996 3000 	ldrsb.w	r3, [r6]
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d142      	bne.n	8006574 <pow+0x288>
 80064ee:	f7ff fecb 	bl	8006288 <__errno>
 80064f2:	2322      	movs	r3, #34	; 0x22
 80064f4:	e797      	b.n	8006426 <pow+0x13a>
 80064f6:	2200      	movs	r2, #0
 80064f8:	4b29      	ldr	r3, [pc, #164]	; (80065a0 <pow+0x2b4>)
 80064fa:	4640      	mov	r0, r8
 80064fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006500:	4649      	mov	r1, r9
 8006502:	4652      	mov	r2, sl
 8006504:	465b      	mov	r3, fp
 8006506:	f7fa fa51 	bl	80009ac <__aeabi_dcmplt>
 800650a:	2800      	cmp	r0, #0
 800650c:	d0eb      	beq.n	80064e6 <pow+0x1fa>
 800650e:	4620      	mov	r0, r4
 8006510:	4629      	mov	r1, r5
 8006512:	f000 fe11 	bl	8007138 <rint>
 8006516:	4622      	mov	r2, r4
 8006518:	462b      	mov	r3, r5
 800651a:	f7fa fa3d 	bl	8000998 <__aeabi_dcmpeq>
 800651e:	2800      	cmp	r0, #0
 8006520:	d1e1      	bne.n	80064e6 <pow+0x1fa>
 8006522:	2200      	movs	r2, #0
 8006524:	4b1a      	ldr	r3, [pc, #104]	; (8006590 <pow+0x2a4>)
 8006526:	e7dc      	b.n	80064e2 <pow+0x1f6>
 8006528:	2200      	movs	r2, #0
 800652a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800652e:	2300      	movs	r3, #0
 8006530:	f7fa fa32 	bl	8000998 <__aeabi_dcmpeq>
 8006534:	2800      	cmp	r0, #0
 8006536:	f43f af4b 	beq.w	80063d0 <pow+0xe4>
 800653a:	4640      	mov	r0, r8
 800653c:	4649      	mov	r1, r9
 800653e:	f000 fded 	bl	800711c <finite>
 8006542:	2800      	cmp	r0, #0
 8006544:	f43f af44 	beq.w	80063d0 <pow+0xe4>
 8006548:	4620      	mov	r0, r4
 800654a:	4629      	mov	r1, r5
 800654c:	f000 fde6 	bl	800711c <finite>
 8006550:	2800      	cmp	r0, #0
 8006552:	f43f af3d 	beq.w	80063d0 <pow+0xe4>
 8006556:	2304      	movs	r3, #4
 8006558:	9304      	str	r3, [sp, #16]
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <pow+0x29c>)
 800655c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006560:	9305      	str	r3, [sp, #20]
 8006562:	2300      	movs	r3, #0
 8006564:	2400      	movs	r4, #0
 8006566:	930c      	str	r3, [sp, #48]	; 0x30
 8006568:	2300      	movs	r3, #0
 800656a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800656e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8006572:	e7b8      	b.n	80064e6 <pow+0x1fa>
 8006574:	a804      	add	r0, sp, #16
 8006576:	f000 fdd7 	bl	8007128 <matherr>
 800657a:	2800      	cmp	r0, #0
 800657c:	f47f af1e 	bne.w	80063bc <pow+0xd0>
 8006580:	e7b5      	b.n	80064ee <pow+0x202>
 8006582:	bf00      	nop
 8006584:	20000088 	.word	0x20000088
 8006588:	08007384 	.word	0x08007384
 800658c:	3ff00000 	.word	0x3ff00000
 8006590:	fff00000 	.word	0xfff00000
 8006594:	3fe00000 	.word	0x3fe00000
 8006598:	47efffff 	.word	0x47efffff
 800659c:	c7efffff 	.word	0xc7efffff
 80065a0:	7ff00000 	.word	0x7ff00000
 80065a4:	00000000 	.word	0x00000000

080065a8 <__ieee754_pow>:
 80065a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	b091      	sub	sp, #68	; 0x44
 80065ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065b2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80065b6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80065ba:	ea55 0302 	orrs.w	r3, r5, r2
 80065be:	4607      	mov	r7, r0
 80065c0:	4688      	mov	r8, r1
 80065c2:	f000 84b7 	beq.w	8006f34 <__ieee754_pow+0x98c>
 80065c6:	4b80      	ldr	r3, [pc, #512]	; (80067c8 <__ieee754_pow+0x220>)
 80065c8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80065cc:	429c      	cmp	r4, r3
 80065ce:	4689      	mov	r9, r1
 80065d0:	4682      	mov	sl, r0
 80065d2:	dc09      	bgt.n	80065e8 <__ieee754_pow+0x40>
 80065d4:	d103      	bne.n	80065de <__ieee754_pow+0x36>
 80065d6:	b938      	cbnz	r0, 80065e8 <__ieee754_pow+0x40>
 80065d8:	42a5      	cmp	r5, r4
 80065da:	dc0d      	bgt.n	80065f8 <__ieee754_pow+0x50>
 80065dc:	e001      	b.n	80065e2 <__ieee754_pow+0x3a>
 80065de:	429d      	cmp	r5, r3
 80065e0:	dc02      	bgt.n	80065e8 <__ieee754_pow+0x40>
 80065e2:	429d      	cmp	r5, r3
 80065e4:	d10e      	bne.n	8006604 <__ieee754_pow+0x5c>
 80065e6:	b16a      	cbz	r2, 8006604 <__ieee754_pow+0x5c>
 80065e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80065ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80065f0:	ea54 030a 	orrs.w	r3, r4, sl
 80065f4:	f000 849e 	beq.w	8006f34 <__ieee754_pow+0x98c>
 80065f8:	4874      	ldr	r0, [pc, #464]	; (80067cc <__ieee754_pow+0x224>)
 80065fa:	b011      	add	sp, #68	; 0x44
 80065fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006600:	f000 bd94 	b.w	800712c <nan>
 8006604:	f1b9 0f00 	cmp.w	r9, #0
 8006608:	da53      	bge.n	80066b2 <__ieee754_pow+0x10a>
 800660a:	4b71      	ldr	r3, [pc, #452]	; (80067d0 <__ieee754_pow+0x228>)
 800660c:	429d      	cmp	r5, r3
 800660e:	dc4e      	bgt.n	80066ae <__ieee754_pow+0x106>
 8006610:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006614:	429d      	cmp	r5, r3
 8006616:	dd4c      	ble.n	80066b2 <__ieee754_pow+0x10a>
 8006618:	152b      	asrs	r3, r5, #20
 800661a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800661e:	2b14      	cmp	r3, #20
 8006620:	dd28      	ble.n	8006674 <__ieee754_pow+0xcc>
 8006622:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006626:	fa22 f103 	lsr.w	r1, r2, r3
 800662a:	fa01 f303 	lsl.w	r3, r1, r3
 800662e:	4293      	cmp	r3, r2
 8006630:	d13f      	bne.n	80066b2 <__ieee754_pow+0x10a>
 8006632:	f001 0101 	and.w	r1, r1, #1
 8006636:	f1c1 0302 	rsb	r3, r1, #2
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	2a00      	cmp	r2, #0
 800663e:	d15c      	bne.n	80066fa <__ieee754_pow+0x152>
 8006640:	4b61      	ldr	r3, [pc, #388]	; (80067c8 <__ieee754_pow+0x220>)
 8006642:	429d      	cmp	r5, r3
 8006644:	d126      	bne.n	8006694 <__ieee754_pow+0xec>
 8006646:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800664a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800664e:	ea53 030a 	orrs.w	r3, r3, sl
 8006652:	f000 846f 	beq.w	8006f34 <__ieee754_pow+0x98c>
 8006656:	4b5f      	ldr	r3, [pc, #380]	; (80067d4 <__ieee754_pow+0x22c>)
 8006658:	429c      	cmp	r4, r3
 800665a:	dd2c      	ble.n	80066b6 <__ieee754_pow+0x10e>
 800665c:	2e00      	cmp	r6, #0
 800665e:	f280 846f 	bge.w	8006f40 <__ieee754_pow+0x998>
 8006662:	f04f 0b00 	mov.w	fp, #0
 8006666:	f04f 0c00 	mov.w	ip, #0
 800666a:	4658      	mov	r0, fp
 800666c:	4661      	mov	r1, ip
 800666e:	b011      	add	sp, #68	; 0x44
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	2a00      	cmp	r2, #0
 8006676:	d13e      	bne.n	80066f6 <__ieee754_pow+0x14e>
 8006678:	f1c3 0314 	rsb	r3, r3, #20
 800667c:	fa45 f103 	asr.w	r1, r5, r3
 8006680:	fa01 f303 	lsl.w	r3, r1, r3
 8006684:	42ab      	cmp	r3, r5
 8006686:	f040 8463 	bne.w	8006f50 <__ieee754_pow+0x9a8>
 800668a:	f001 0101 	and.w	r1, r1, #1
 800668e:	f1c1 0302 	rsb	r3, r1, #2
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	4b50      	ldr	r3, [pc, #320]	; (80067d8 <__ieee754_pow+0x230>)
 8006696:	429d      	cmp	r5, r3
 8006698:	d114      	bne.n	80066c4 <__ieee754_pow+0x11c>
 800669a:	2e00      	cmp	r6, #0
 800669c:	f280 8454 	bge.w	8006f48 <__ieee754_pow+0x9a0>
 80066a0:	463a      	mov	r2, r7
 80066a2:	4643      	mov	r3, r8
 80066a4:	2000      	movs	r0, #0
 80066a6:	494c      	ldr	r1, [pc, #304]	; (80067d8 <__ieee754_pow+0x230>)
 80066a8:	f7fa f838 	bl	800071c <__aeabi_ddiv>
 80066ac:	e013      	b.n	80066d6 <__ieee754_pow+0x12e>
 80066ae:	2302      	movs	r3, #2
 80066b0:	e7c3      	b.n	800663a <__ieee754_pow+0x92>
 80066b2:	2300      	movs	r3, #0
 80066b4:	e7c1      	b.n	800663a <__ieee754_pow+0x92>
 80066b6:	2e00      	cmp	r6, #0
 80066b8:	dad3      	bge.n	8006662 <__ieee754_pow+0xba>
 80066ba:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80066be:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80066c2:	e7d2      	b.n	800666a <__ieee754_pow+0xc2>
 80066c4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80066c8:	d108      	bne.n	80066dc <__ieee754_pow+0x134>
 80066ca:	463a      	mov	r2, r7
 80066cc:	4643      	mov	r3, r8
 80066ce:	4638      	mov	r0, r7
 80066d0:	4641      	mov	r1, r8
 80066d2:	f7f9 fef9 	bl	80004c8 <__aeabi_dmul>
 80066d6:	4683      	mov	fp, r0
 80066d8:	468c      	mov	ip, r1
 80066da:	e7c6      	b.n	800666a <__ieee754_pow+0xc2>
 80066dc:	4b3f      	ldr	r3, [pc, #252]	; (80067dc <__ieee754_pow+0x234>)
 80066de:	429e      	cmp	r6, r3
 80066e0:	d10b      	bne.n	80066fa <__ieee754_pow+0x152>
 80066e2:	f1b9 0f00 	cmp.w	r9, #0
 80066e6:	db08      	blt.n	80066fa <__ieee754_pow+0x152>
 80066e8:	4638      	mov	r0, r7
 80066ea:	4641      	mov	r1, r8
 80066ec:	b011      	add	sp, #68	; 0x44
 80066ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f2:	f000 bc63 	b.w	8006fbc <__ieee754_sqrt>
 80066f6:	2300      	movs	r3, #0
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	4638      	mov	r0, r7
 80066fc:	4641      	mov	r1, r8
 80066fe:	f000 fd09 	bl	8007114 <fabs>
 8006702:	4683      	mov	fp, r0
 8006704:	468c      	mov	ip, r1
 8006706:	f1ba 0f00 	cmp.w	sl, #0
 800670a:	d12b      	bne.n	8006764 <__ieee754_pow+0x1bc>
 800670c:	b124      	cbz	r4, 8006718 <__ieee754_pow+0x170>
 800670e:	4b32      	ldr	r3, [pc, #200]	; (80067d8 <__ieee754_pow+0x230>)
 8006710:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8006714:	429a      	cmp	r2, r3
 8006716:	d125      	bne.n	8006764 <__ieee754_pow+0x1bc>
 8006718:	2e00      	cmp	r6, #0
 800671a:	da07      	bge.n	800672c <__ieee754_pow+0x184>
 800671c:	465a      	mov	r2, fp
 800671e:	4663      	mov	r3, ip
 8006720:	2000      	movs	r0, #0
 8006722:	492d      	ldr	r1, [pc, #180]	; (80067d8 <__ieee754_pow+0x230>)
 8006724:	f7f9 fffa 	bl	800071c <__aeabi_ddiv>
 8006728:	4683      	mov	fp, r0
 800672a:	468c      	mov	ip, r1
 800672c:	f1b9 0f00 	cmp.w	r9, #0
 8006730:	da9b      	bge.n	800666a <__ieee754_pow+0xc2>
 8006732:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006736:	9b00      	ldr	r3, [sp, #0]
 8006738:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800673c:	4323      	orrs	r3, r4
 800673e:	d108      	bne.n	8006752 <__ieee754_pow+0x1aa>
 8006740:	465a      	mov	r2, fp
 8006742:	4663      	mov	r3, ip
 8006744:	4658      	mov	r0, fp
 8006746:	4661      	mov	r1, ip
 8006748:	f7f9 fd06 	bl	8000158 <__aeabi_dsub>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	e7aa      	b.n	80066a8 <__ieee754_pow+0x100>
 8006752:	9b00      	ldr	r3, [sp, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d188      	bne.n	800666a <__ieee754_pow+0xc2>
 8006758:	4658      	mov	r0, fp
 800675a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800675e:	4683      	mov	fp, r0
 8006760:	469c      	mov	ip, r3
 8006762:	e782      	b.n	800666a <__ieee754_pow+0xc2>
 8006764:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8006768:	f109 33ff 	add.w	r3, r9, #4294967295
 800676c:	930d      	str	r3, [sp, #52]	; 0x34
 800676e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006770:	9b00      	ldr	r3, [sp, #0]
 8006772:	4313      	orrs	r3, r2
 8006774:	d104      	bne.n	8006780 <__ieee754_pow+0x1d8>
 8006776:	463a      	mov	r2, r7
 8006778:	4643      	mov	r3, r8
 800677a:	4638      	mov	r0, r7
 800677c:	4641      	mov	r1, r8
 800677e:	e7e3      	b.n	8006748 <__ieee754_pow+0x1a0>
 8006780:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <__ieee754_pow+0x238>)
 8006782:	429d      	cmp	r5, r3
 8006784:	f340 80fe 	ble.w	8006984 <__ieee754_pow+0x3dc>
 8006788:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800678c:	429d      	cmp	r5, r3
 800678e:	dd0b      	ble.n	80067a8 <__ieee754_pow+0x200>
 8006790:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <__ieee754_pow+0x22c>)
 8006792:	429c      	cmp	r4, r3
 8006794:	dc0e      	bgt.n	80067b4 <__ieee754_pow+0x20c>
 8006796:	2e00      	cmp	r6, #0
 8006798:	f6bf af63 	bge.w	8006662 <__ieee754_pow+0xba>
 800679c:	a308      	add	r3, pc, #32	; (adr r3, 80067c0 <__ieee754_pow+0x218>)
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	4610      	mov	r0, r2
 80067a4:	4619      	mov	r1, r3
 80067a6:	e794      	b.n	80066d2 <__ieee754_pow+0x12a>
 80067a8:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <__ieee754_pow+0x23c>)
 80067aa:	429c      	cmp	r4, r3
 80067ac:	ddf3      	ble.n	8006796 <__ieee754_pow+0x1ee>
 80067ae:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <__ieee754_pow+0x230>)
 80067b0:	429c      	cmp	r4, r3
 80067b2:	dd19      	ble.n	80067e8 <__ieee754_pow+0x240>
 80067b4:	2e00      	cmp	r6, #0
 80067b6:	dcf1      	bgt.n	800679c <__ieee754_pow+0x1f4>
 80067b8:	e753      	b.n	8006662 <__ieee754_pow+0xba>
 80067ba:	bf00      	nop
 80067bc:	f3af 8000 	nop.w
 80067c0:	8800759c 	.word	0x8800759c
 80067c4:	7e37e43c 	.word	0x7e37e43c
 80067c8:	7ff00000 	.word	0x7ff00000
 80067cc:	08007387 	.word	0x08007387
 80067d0:	433fffff 	.word	0x433fffff
 80067d4:	3fefffff 	.word	0x3fefffff
 80067d8:	3ff00000 	.word	0x3ff00000
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	41e00000 	.word	0x41e00000
 80067e4:	3feffffe 	.word	0x3feffffe
 80067e8:	4661      	mov	r1, ip
 80067ea:	2200      	movs	r2, #0
 80067ec:	4b60      	ldr	r3, [pc, #384]	; (8006970 <__ieee754_pow+0x3c8>)
 80067ee:	4658      	mov	r0, fp
 80067f0:	f7f9 fcb2 	bl	8000158 <__aeabi_dsub>
 80067f4:	a354      	add	r3, pc, #336	; (adr r3, 8006948 <__ieee754_pow+0x3a0>)
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	4604      	mov	r4, r0
 80067fc:	460d      	mov	r5, r1
 80067fe:	f7f9 fe63 	bl	80004c8 <__aeabi_dmul>
 8006802:	a353      	add	r3, pc, #332	; (adr r3, 8006950 <__ieee754_pow+0x3a8>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	4606      	mov	r6, r0
 800680a:	460f      	mov	r7, r1
 800680c:	4620      	mov	r0, r4
 800680e:	4629      	mov	r1, r5
 8006810:	f7f9 fe5a 	bl	80004c8 <__aeabi_dmul>
 8006814:	2200      	movs	r2, #0
 8006816:	4682      	mov	sl, r0
 8006818:	468b      	mov	fp, r1
 800681a:	4b56      	ldr	r3, [pc, #344]	; (8006974 <__ieee754_pow+0x3cc>)
 800681c:	4620      	mov	r0, r4
 800681e:	4629      	mov	r1, r5
 8006820:	f7f9 fe52 	bl	80004c8 <__aeabi_dmul>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	a14b      	add	r1, pc, #300	; (adr r1, 8006958 <__ieee754_pow+0x3b0>)
 800682a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800682e:	f7f9 fc93 	bl	8000158 <__aeabi_dsub>
 8006832:	4622      	mov	r2, r4
 8006834:	462b      	mov	r3, r5
 8006836:	f7f9 fe47 	bl	80004c8 <__aeabi_dmul>
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	2000      	movs	r0, #0
 8006840:	494d      	ldr	r1, [pc, #308]	; (8006978 <__ieee754_pow+0x3d0>)
 8006842:	f7f9 fc89 	bl	8000158 <__aeabi_dsub>
 8006846:	4622      	mov	r2, r4
 8006848:	462b      	mov	r3, r5
 800684a:	4680      	mov	r8, r0
 800684c:	4689      	mov	r9, r1
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7f9 fe39 	bl	80004c8 <__aeabi_dmul>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	f7f9 fe33 	bl	80004c8 <__aeabi_dmul>
 8006862:	a33f      	add	r3, pc, #252	; (adr r3, 8006960 <__ieee754_pow+0x3b8>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f7f9 fe2e 	bl	80004c8 <__aeabi_dmul>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4650      	mov	r0, sl
 8006872:	4659      	mov	r1, fp
 8006874:	f7f9 fc70 	bl	8000158 <__aeabi_dsub>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4604      	mov	r4, r0
 800687e:	460d      	mov	r5, r1
 8006880:	4630      	mov	r0, r6
 8006882:	4639      	mov	r1, r7
 8006884:	f7f9 fc6a 	bl	800015c <__adddf3>
 8006888:	2000      	movs	r0, #0
 800688a:	468b      	mov	fp, r1
 800688c:	4682      	mov	sl, r0
 800688e:	4632      	mov	r2, r6
 8006890:	463b      	mov	r3, r7
 8006892:	f7f9 fc61 	bl	8000158 <__aeabi_dsub>
 8006896:	4602      	mov	r2, r0
 8006898:	460b      	mov	r3, r1
 800689a:	4620      	mov	r0, r4
 800689c:	4629      	mov	r1, r5
 800689e:	f7f9 fc5b 	bl	8000158 <__aeabi_dsub>
 80068a2:	9b00      	ldr	r3, [sp, #0]
 80068a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f04f 0300 	mov.w	r3, #0
 80068ae:	bf0c      	ite	eq
 80068b0:	4c32      	ldreq	r4, [pc, #200]	; (800697c <__ieee754_pow+0x3d4>)
 80068b2:	4c2f      	ldrne	r4, [pc, #188]	; (8006970 <__ieee754_pow+0x3c8>)
 80068b4:	4606      	mov	r6, r0
 80068b6:	e9cd 3400 	strd	r3, r4, [sp]
 80068ba:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068be:	2400      	movs	r4, #0
 80068c0:	460f      	mov	r7, r1
 80068c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068c6:	4622      	mov	r2, r4
 80068c8:	462b      	mov	r3, r5
 80068ca:	f7f9 fc45 	bl	8000158 <__aeabi_dsub>
 80068ce:	4652      	mov	r2, sl
 80068d0:	465b      	mov	r3, fp
 80068d2:	f7f9 fdf9 	bl	80004c8 <__aeabi_dmul>
 80068d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068da:	4680      	mov	r8, r0
 80068dc:	4689      	mov	r9, r1
 80068de:	4630      	mov	r0, r6
 80068e0:	4639      	mov	r1, r7
 80068e2:	f7f9 fdf1 	bl	80004c8 <__aeabi_dmul>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4640      	mov	r0, r8
 80068ec:	4649      	mov	r1, r9
 80068ee:	f7f9 fc35 	bl	800015c <__adddf3>
 80068f2:	4622      	mov	r2, r4
 80068f4:	462b      	mov	r3, r5
 80068f6:	4680      	mov	r8, r0
 80068f8:	4689      	mov	r9, r1
 80068fa:	4650      	mov	r0, sl
 80068fc:	4659      	mov	r1, fp
 80068fe:	f7f9 fde3 	bl	80004c8 <__aeabi_dmul>
 8006902:	4604      	mov	r4, r0
 8006904:	460d      	mov	r5, r1
 8006906:	460b      	mov	r3, r1
 8006908:	4602      	mov	r2, r0
 800690a:	4649      	mov	r1, r9
 800690c:	4640      	mov	r0, r8
 800690e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006912:	f7f9 fc23 	bl	800015c <__adddf3>
 8006916:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <__ieee754_pow+0x3d8>)
 8006918:	4682      	mov	sl, r0
 800691a:	4299      	cmp	r1, r3
 800691c:	460f      	mov	r7, r1
 800691e:	460e      	mov	r6, r1
 8006920:	f340 82e1 	ble.w	8006ee6 <__ieee754_pow+0x93e>
 8006924:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006928:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800692c:	4303      	orrs	r3, r0
 800692e:	f000 81db 	beq.w	8006ce8 <__ieee754_pow+0x740>
 8006932:	a30d      	add	r3, pc, #52	; (adr r3, 8006968 <__ieee754_pow+0x3c0>)
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	e9dd 0100 	ldrd	r0, r1, [sp]
 800693c:	f7f9 fdc4 	bl	80004c8 <__aeabi_dmul>
 8006940:	a309      	add	r3, pc, #36	; (adr r3, 8006968 <__ieee754_pow+0x3c0>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	e6c4      	b.n	80066d2 <__ieee754_pow+0x12a>
 8006948:	60000000 	.word	0x60000000
 800694c:	3ff71547 	.word	0x3ff71547
 8006950:	f85ddf44 	.word	0xf85ddf44
 8006954:	3e54ae0b 	.word	0x3e54ae0b
 8006958:	55555555 	.word	0x55555555
 800695c:	3fd55555 	.word	0x3fd55555
 8006960:	652b82fe 	.word	0x652b82fe
 8006964:	3ff71547 	.word	0x3ff71547
 8006968:	8800759c 	.word	0x8800759c
 800696c:	7e37e43c 	.word	0x7e37e43c
 8006970:	3ff00000 	.word	0x3ff00000
 8006974:	3fd00000 	.word	0x3fd00000
 8006978:	3fe00000 	.word	0x3fe00000
 800697c:	bff00000 	.word	0xbff00000
 8006980:	408fffff 	.word	0x408fffff
 8006984:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	da08      	bge.n	80069a0 <__ieee754_pow+0x3f8>
 800698e:	4658      	mov	r0, fp
 8006990:	4bcd      	ldr	r3, [pc, #820]	; (8006cc8 <__ieee754_pow+0x720>)
 8006992:	4661      	mov	r1, ip
 8006994:	f7f9 fd98 	bl	80004c8 <__aeabi_dmul>
 8006998:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800699c:	4683      	mov	fp, r0
 800699e:	460c      	mov	r4, r1
 80069a0:	1523      	asrs	r3, r4, #20
 80069a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80069a6:	4413      	add	r3, r2
 80069a8:	930c      	str	r3, [sp, #48]	; 0x30
 80069aa:	4bc8      	ldr	r3, [pc, #800]	; (8006ccc <__ieee754_pow+0x724>)
 80069ac:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80069b0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80069b4:	429c      	cmp	r4, r3
 80069b6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80069ba:	dd08      	ble.n	80069ce <__ieee754_pow+0x426>
 80069bc:	4bc4      	ldr	r3, [pc, #784]	; (8006cd0 <__ieee754_pow+0x728>)
 80069be:	429c      	cmp	r4, r3
 80069c0:	f340 815b 	ble.w	8006c7a <__ieee754_pow+0x6d2>
 80069c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80069ca:	3301      	adds	r3, #1
 80069cc:	930c      	str	r3, [sp, #48]	; 0x30
 80069ce:	f04f 0800 	mov.w	r8, #0
 80069d2:	4658      	mov	r0, fp
 80069d4:	4629      	mov	r1, r5
 80069d6:	4bbf      	ldr	r3, [pc, #764]	; (8006cd4 <__ieee754_pow+0x72c>)
 80069d8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80069dc:	444b      	add	r3, r9
 80069de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069e2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80069e6:	461a      	mov	r2, r3
 80069e8:	4623      	mov	r3, r4
 80069ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069ee:	f7f9 fbb3 	bl	8000158 <__aeabi_dsub>
 80069f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80069f6:	4606      	mov	r6, r0
 80069f8:	460f      	mov	r7, r1
 80069fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069fe:	f7f9 fbad 	bl	800015c <__adddf3>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	2000      	movs	r0, #0
 8006a08:	49b3      	ldr	r1, [pc, #716]	; (8006cd8 <__ieee754_pow+0x730>)
 8006a0a:	f7f9 fe87 	bl	800071c <__aeabi_ddiv>
 8006a0e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4630      	mov	r0, r6
 8006a18:	4639      	mov	r1, r7
 8006a1a:	f7f9 fd55 	bl	80004c8 <__aeabi_dmul>
 8006a1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a22:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006a26:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	106d      	asrs	r5, r5, #1
 8006a30:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006a3a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006a3e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8006a42:	4650      	mov	r0, sl
 8006a44:	4659      	mov	r1, fp
 8006a46:	4614      	mov	r4, r2
 8006a48:	461d      	mov	r5, r3
 8006a4a:	f7f9 fd3d 	bl	80004c8 <__aeabi_dmul>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4630      	mov	r0, r6
 8006a54:	4639      	mov	r1, r7
 8006a56:	f7f9 fb7f 	bl	8000158 <__aeabi_dsub>
 8006a5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a5e:	4606      	mov	r6, r0
 8006a60:	460f      	mov	r7, r1
 8006a62:	4620      	mov	r0, r4
 8006a64:	4629      	mov	r1, r5
 8006a66:	f7f9 fb77 	bl	8000158 <__aeabi_dsub>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a72:	f7f9 fb71 	bl	8000158 <__aeabi_dsub>
 8006a76:	4652      	mov	r2, sl
 8006a78:	465b      	mov	r3, fp
 8006a7a:	f7f9 fd25 	bl	80004c8 <__aeabi_dmul>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4630      	mov	r0, r6
 8006a84:	4639      	mov	r1, r7
 8006a86:	f7f9 fb67 	bl	8000158 <__aeabi_dsub>
 8006a8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a8e:	f7f9 fd1b 	bl	80004c8 <__aeabi_dmul>
 8006a92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	f7f9 fd13 	bl	80004c8 <__aeabi_dmul>
 8006aa2:	a377      	add	r3, pc, #476	; (adr r3, 8006c80 <__ieee754_pow+0x6d8>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	460d      	mov	r5, r1
 8006aac:	f7f9 fd0c 	bl	80004c8 <__aeabi_dmul>
 8006ab0:	a375      	add	r3, pc, #468	; (adr r3, 8006c88 <__ieee754_pow+0x6e0>)
 8006ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab6:	f7f9 fb51 	bl	800015c <__adddf3>
 8006aba:	4622      	mov	r2, r4
 8006abc:	462b      	mov	r3, r5
 8006abe:	f7f9 fd03 	bl	80004c8 <__aeabi_dmul>
 8006ac2:	a373      	add	r3, pc, #460	; (adr r3, 8006c90 <__ieee754_pow+0x6e8>)
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f7f9 fb48 	bl	800015c <__adddf3>
 8006acc:	4622      	mov	r2, r4
 8006ace:	462b      	mov	r3, r5
 8006ad0:	f7f9 fcfa 	bl	80004c8 <__aeabi_dmul>
 8006ad4:	a370      	add	r3, pc, #448	; (adr r3, 8006c98 <__ieee754_pow+0x6f0>)
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f7f9 fb3f 	bl	800015c <__adddf3>
 8006ade:	4622      	mov	r2, r4
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	f7f9 fcf1 	bl	80004c8 <__aeabi_dmul>
 8006ae6:	a36e      	add	r3, pc, #440	; (adr r3, 8006ca0 <__ieee754_pow+0x6f8>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	f7f9 fb36 	bl	800015c <__adddf3>
 8006af0:	4622      	mov	r2, r4
 8006af2:	462b      	mov	r3, r5
 8006af4:	f7f9 fce8 	bl	80004c8 <__aeabi_dmul>
 8006af8:	a36b      	add	r3, pc, #428	; (adr r3, 8006ca8 <__ieee754_pow+0x700>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f7f9 fb2d 	bl	800015c <__adddf3>
 8006b02:	4622      	mov	r2, r4
 8006b04:	4606      	mov	r6, r0
 8006b06:	460f      	mov	r7, r1
 8006b08:	462b      	mov	r3, r5
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f7f9 fcdb 	bl	80004c8 <__aeabi_dmul>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4630      	mov	r0, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	f7f9 fcd5 	bl	80004c8 <__aeabi_dmul>
 8006b1e:	4604      	mov	r4, r0
 8006b20:	460d      	mov	r5, r1
 8006b22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b26:	4652      	mov	r2, sl
 8006b28:	465b      	mov	r3, fp
 8006b2a:	f7f9 fb17 	bl	800015c <__adddf3>
 8006b2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b32:	f7f9 fcc9 	bl	80004c8 <__aeabi_dmul>
 8006b36:	4622      	mov	r2, r4
 8006b38:	462b      	mov	r3, r5
 8006b3a:	f7f9 fb0f 	bl	800015c <__adddf3>
 8006b3e:	4652      	mov	r2, sl
 8006b40:	4606      	mov	r6, r0
 8006b42:	460f      	mov	r7, r1
 8006b44:	465b      	mov	r3, fp
 8006b46:	4650      	mov	r0, sl
 8006b48:	4659      	mov	r1, fp
 8006b4a:	f7f9 fcbd 	bl	80004c8 <__aeabi_dmul>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	4b62      	ldr	r3, [pc, #392]	; (8006cdc <__ieee754_pow+0x734>)
 8006b52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b56:	f7f9 fb01 	bl	800015c <__adddf3>
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	f7f9 fafd 	bl	800015c <__adddf3>
 8006b62:	9804      	ldr	r0, [sp, #16]
 8006b64:	460d      	mov	r5, r1
 8006b66:	4604      	mov	r4, r0
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4650      	mov	r0, sl
 8006b6e:	4659      	mov	r1, fp
 8006b70:	f7f9 fcaa 	bl	80004c8 <__aeabi_dmul>
 8006b74:	2200      	movs	r2, #0
 8006b76:	4682      	mov	sl, r0
 8006b78:	468b      	mov	fp, r1
 8006b7a:	4b58      	ldr	r3, [pc, #352]	; (8006cdc <__ieee754_pow+0x734>)
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	4629      	mov	r1, r5
 8006b80:	f7f9 faea 	bl	8000158 <__aeabi_dsub>
 8006b84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b88:	f7f9 fae6 	bl	8000158 <__aeabi_dsub>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4630      	mov	r0, r6
 8006b92:	4639      	mov	r1, r7
 8006b94:	f7f9 fae0 	bl	8000158 <__aeabi_dsub>
 8006b98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b9c:	f7f9 fc94 	bl	80004c8 <__aeabi_dmul>
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460f      	mov	r7, r1
 8006ba6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006baa:	462b      	mov	r3, r5
 8006bac:	f7f9 fc8c 	bl	80004c8 <__aeabi_dmul>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7f9 fad0 	bl	800015c <__adddf3>
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	460f      	mov	r7, r1
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	f7f9 fac8 	bl	800015c <__adddf3>
 8006bcc:	a338      	add	r3, pc, #224	; (adr r3, 8006cb0 <__ieee754_pow+0x708>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	9804      	ldr	r0, [sp, #16]
 8006bd4:	460d      	mov	r5, r1
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	f7f9 fc76 	bl	80004c8 <__aeabi_dmul>
 8006bdc:	4652      	mov	r2, sl
 8006bde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006be2:	465b      	mov	r3, fp
 8006be4:	4620      	mov	r0, r4
 8006be6:	4629      	mov	r1, r5
 8006be8:	f7f9 fab6 	bl	8000158 <__aeabi_dsub>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	4639      	mov	r1, r7
 8006bf4:	f7f9 fab0 	bl	8000158 <__aeabi_dsub>
 8006bf8:	a32f      	add	r3, pc, #188	; (adr r3, 8006cb8 <__ieee754_pow+0x710>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fc63 	bl	80004c8 <__aeabi_dmul>
 8006c02:	a32f      	add	r3, pc, #188	; (adr r3, 8006cc0 <__ieee754_pow+0x718>)
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	4606      	mov	r6, r0
 8006c0a:	460f      	mov	r7, r1
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	4629      	mov	r1, r5
 8006c10:	f7f9 fc5a 	bl	80004c8 <__aeabi_dmul>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	f7f9 fa9e 	bl	800015c <__adddf3>
 8006c20:	4b2f      	ldr	r3, [pc, #188]	; (8006ce0 <__ieee754_pow+0x738>)
 8006c22:	444b      	add	r3, r9
 8006c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c28:	f7f9 fa98 	bl	800015c <__adddf3>
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006c30:	460d      	mov	r5, r1
 8006c32:	f7f9 fbdf 	bl	80003f4 <__aeabi_i2d>
 8006c36:	4606      	mov	r6, r0
 8006c38:	460f      	mov	r7, r1
 8006c3a:	4b2a      	ldr	r3, [pc, #168]	; (8006ce4 <__ieee754_pow+0x73c>)
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	444b      	add	r3, r9
 8006c40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c44:	462b      	mov	r3, r5
 8006c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c4a:	f7f9 fa87 	bl	800015c <__adddf3>
 8006c4e:	4642      	mov	r2, r8
 8006c50:	464b      	mov	r3, r9
 8006c52:	f7f9 fa83 	bl	800015c <__adddf3>
 8006c56:	4632      	mov	r2, r6
 8006c58:	463b      	mov	r3, r7
 8006c5a:	f7f9 fa7f 	bl	800015c <__adddf3>
 8006c5e:	9804      	ldr	r0, [sp, #16]
 8006c60:	4632      	mov	r2, r6
 8006c62:	463b      	mov	r3, r7
 8006c64:	4682      	mov	sl, r0
 8006c66:	468b      	mov	fp, r1
 8006c68:	f7f9 fa76 	bl	8000158 <__aeabi_dsub>
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	f7f9 fa72 	bl	8000158 <__aeabi_dsub>
 8006c74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c78:	e60b      	b.n	8006892 <__ieee754_pow+0x2ea>
 8006c7a:	f04f 0801 	mov.w	r8, #1
 8006c7e:	e6a8      	b.n	80069d2 <__ieee754_pow+0x42a>
 8006c80:	4a454eef 	.word	0x4a454eef
 8006c84:	3fca7e28 	.word	0x3fca7e28
 8006c88:	93c9db65 	.word	0x93c9db65
 8006c8c:	3fcd864a 	.word	0x3fcd864a
 8006c90:	a91d4101 	.word	0xa91d4101
 8006c94:	3fd17460 	.word	0x3fd17460
 8006c98:	518f264d 	.word	0x518f264d
 8006c9c:	3fd55555 	.word	0x3fd55555
 8006ca0:	db6fabff 	.word	0xdb6fabff
 8006ca4:	3fdb6db6 	.word	0x3fdb6db6
 8006ca8:	33333303 	.word	0x33333303
 8006cac:	3fe33333 	.word	0x3fe33333
 8006cb0:	e0000000 	.word	0xe0000000
 8006cb4:	3feec709 	.word	0x3feec709
 8006cb8:	dc3a03fd 	.word	0xdc3a03fd
 8006cbc:	3feec709 	.word	0x3feec709
 8006cc0:	145b01f5 	.word	0x145b01f5
 8006cc4:	be3e2fe0 	.word	0xbe3e2fe0
 8006cc8:	43400000 	.word	0x43400000
 8006ccc:	0003988e 	.word	0x0003988e
 8006cd0:	000bb679 	.word	0x000bb679
 8006cd4:	08007388 	.word	0x08007388
 8006cd8:	3ff00000 	.word	0x3ff00000
 8006cdc:	40080000 	.word	0x40080000
 8006ce0:	080073a8 	.word	0x080073a8
 8006ce4:	08007398 	.word	0x08007398
 8006ce8:	a39b      	add	r3, pc, #620	; (adr r3, 8006f58 <__ieee754_pow+0x9b0>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	f7f9 fa33 	bl	800015c <__adddf3>
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	4650      	mov	r0, sl
 8006d00:	4639      	mov	r1, r7
 8006d02:	f7f9 fa29 	bl	8000158 <__aeabi_dsub>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d0e:	f7f9 fe6b 	bl	80009e8 <__aeabi_dcmpgt>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	f47f ae0d 	bne.w	8006932 <__ieee754_pow+0x38a>
 8006d18:	4aa3      	ldr	r2, [pc, #652]	; (8006fa8 <__ieee754_pow+0xa00>)
 8006d1a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	f340 8103 	ble.w	8006f2a <__ieee754_pow+0x982>
 8006d24:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006d28:	2000      	movs	r0, #0
 8006d2a:	151b      	asrs	r3, r3, #20
 8006d2c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006d30:	fa4a f303 	asr.w	r3, sl, r3
 8006d34:	4433      	add	r3, r6
 8006d36:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006d3a:	4f9c      	ldr	r7, [pc, #624]	; (8006fac <__ieee754_pow+0xa04>)
 8006d3c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006d40:	4117      	asrs	r7, r2
 8006d42:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006d46:	ea23 0107 	bic.w	r1, r3, r7
 8006d4a:	f1c2 0214 	rsb	r2, r2, #20
 8006d4e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006d52:	fa4a fa02 	asr.w	sl, sl, r2
 8006d56:	2e00      	cmp	r6, #0
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	4629      	mov	r1, r5
 8006d60:	bfb8      	it	lt
 8006d62:	f1ca 0a00 	rsblt	sl, sl, #0
 8006d66:	f7f9 f9f7 	bl	8000158 <__aeabi_dsub>
 8006d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d72:	4642      	mov	r2, r8
 8006d74:	464b      	mov	r3, r9
 8006d76:	f7f9 f9f1 	bl	800015c <__adddf3>
 8006d7a:	a379      	add	r3, pc, #484	; (adr r3, 8006f60 <__ieee754_pow+0x9b8>)
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	2000      	movs	r0, #0
 8006d82:	460d      	mov	r5, r1
 8006d84:	4604      	mov	r4, r0
 8006d86:	f7f9 fb9f 	bl	80004c8 <__aeabi_dmul>
 8006d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d8e:	4606      	mov	r6, r0
 8006d90:	460f      	mov	r7, r1
 8006d92:	4620      	mov	r0, r4
 8006d94:	4629      	mov	r1, r5
 8006d96:	f7f9 f9df 	bl	8000158 <__aeabi_dsub>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4640      	mov	r0, r8
 8006da0:	4649      	mov	r1, r9
 8006da2:	f7f9 f9d9 	bl	8000158 <__aeabi_dsub>
 8006da6:	a370      	add	r3, pc, #448	; (adr r3, 8006f68 <__ieee754_pow+0x9c0>)
 8006da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dac:	f7f9 fb8c 	bl	80004c8 <__aeabi_dmul>
 8006db0:	a36f      	add	r3, pc, #444	; (adr r3, 8006f70 <__ieee754_pow+0x9c8>)
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	4680      	mov	r8, r0
 8006db8:	4689      	mov	r9, r1
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	f7f9 fb83 	bl	80004c8 <__aeabi_dmul>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	4649      	mov	r1, r9
 8006dca:	f7f9 f9c7 	bl	800015c <__adddf3>
 8006dce:	4604      	mov	r4, r0
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	4639      	mov	r1, r7
 8006dda:	f7f9 f9bf 	bl	800015c <__adddf3>
 8006dde:	4632      	mov	r2, r6
 8006de0:	463b      	mov	r3, r7
 8006de2:	4680      	mov	r8, r0
 8006de4:	4689      	mov	r9, r1
 8006de6:	f7f9 f9b7 	bl	8000158 <__aeabi_dsub>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7f9 f9b1 	bl	8000158 <__aeabi_dsub>
 8006df6:	4642      	mov	r2, r8
 8006df8:	4606      	mov	r6, r0
 8006dfa:	460f      	mov	r7, r1
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	4640      	mov	r0, r8
 8006e00:	4649      	mov	r1, r9
 8006e02:	f7f9 fb61 	bl	80004c8 <__aeabi_dmul>
 8006e06:	a35c      	add	r3, pc, #368	; (adr r3, 8006f78 <__ieee754_pow+0x9d0>)
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	460d      	mov	r5, r1
 8006e10:	f7f9 fb5a 	bl	80004c8 <__aeabi_dmul>
 8006e14:	a35a      	add	r3, pc, #360	; (adr r3, 8006f80 <__ieee754_pow+0x9d8>)
 8006e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1a:	f7f9 f99d 	bl	8000158 <__aeabi_dsub>
 8006e1e:	4622      	mov	r2, r4
 8006e20:	462b      	mov	r3, r5
 8006e22:	f7f9 fb51 	bl	80004c8 <__aeabi_dmul>
 8006e26:	a358      	add	r3, pc, #352	; (adr r3, 8006f88 <__ieee754_pow+0x9e0>)
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	f7f9 f996 	bl	800015c <__adddf3>
 8006e30:	4622      	mov	r2, r4
 8006e32:	462b      	mov	r3, r5
 8006e34:	f7f9 fb48 	bl	80004c8 <__aeabi_dmul>
 8006e38:	a355      	add	r3, pc, #340	; (adr r3, 8006f90 <__ieee754_pow+0x9e8>)
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	f7f9 f98b 	bl	8000158 <__aeabi_dsub>
 8006e42:	4622      	mov	r2, r4
 8006e44:	462b      	mov	r3, r5
 8006e46:	f7f9 fb3f 	bl	80004c8 <__aeabi_dmul>
 8006e4a:	a353      	add	r3, pc, #332	; (adr r3, 8006f98 <__ieee754_pow+0x9f0>)
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 f984 	bl	800015c <__adddf3>
 8006e54:	4622      	mov	r2, r4
 8006e56:	462b      	mov	r3, r5
 8006e58:	f7f9 fb36 	bl	80004c8 <__aeabi_dmul>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4640      	mov	r0, r8
 8006e62:	4649      	mov	r1, r9
 8006e64:	f7f9 f978 	bl	8000158 <__aeabi_dsub>
 8006e68:	4604      	mov	r4, r0
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	f7f9 fb28 	bl	80004c8 <__aeabi_dmul>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7f9 f967 	bl	8000158 <__aeabi_dsub>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e92:	f7f9 fc43 	bl	800071c <__aeabi_ddiv>
 8006e96:	4632      	mov	r2, r6
 8006e98:	4604      	mov	r4, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	463b      	mov	r3, r7
 8006e9e:	4640      	mov	r0, r8
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	f7f9 fb11 	bl	80004c8 <__aeabi_dmul>
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	f7f9 f957 	bl	800015c <__adddf3>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	f7f9 f94f 	bl	8000158 <__aeabi_dsub>
 8006eba:	4642      	mov	r2, r8
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	f7f9 f94b 	bl	8000158 <__aeabi_dsub>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	4939      	ldr	r1, [pc, #228]	; (8006fb0 <__ieee754_pow+0xa08>)
 8006eca:	f7f9 f945 	bl	8000158 <__aeabi_dsub>
 8006ece:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006ed2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006ed6:	da2b      	bge.n	8006f30 <__ieee754_pow+0x988>
 8006ed8:	4652      	mov	r2, sl
 8006eda:	f000 f9b9 	bl	8007250 <scalbn>
 8006ede:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ee2:	f7ff bbf6 	b.w	80066d2 <__ieee754_pow+0x12a>
 8006ee6:	4b33      	ldr	r3, [pc, #204]	; (8006fb4 <__ieee754_pow+0xa0c>)
 8006ee8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006eec:	429f      	cmp	r7, r3
 8006eee:	f77f af13 	ble.w	8006d18 <__ieee754_pow+0x770>
 8006ef2:	4b31      	ldr	r3, [pc, #196]	; (8006fb8 <__ieee754_pow+0xa10>)
 8006ef4:	440b      	add	r3, r1
 8006ef6:	4303      	orrs	r3, r0
 8006ef8:	d00b      	beq.n	8006f12 <__ieee754_pow+0x96a>
 8006efa:	a329      	add	r3, pc, #164	; (adr r3, 8006fa0 <__ieee754_pow+0x9f8>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f04:	f7f9 fae0 	bl	80004c8 <__aeabi_dmul>
 8006f08:	a325      	add	r3, pc, #148	; (adr r3, 8006fa0 <__ieee754_pow+0x9f8>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f7ff bbe0 	b.w	80066d2 <__ieee754_pow+0x12a>
 8006f12:	4622      	mov	r2, r4
 8006f14:	462b      	mov	r3, r5
 8006f16:	f7f9 f91f 	bl	8000158 <__aeabi_dsub>
 8006f1a:	4642      	mov	r2, r8
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	f7f9 fd59 	bl	80009d4 <__aeabi_dcmpge>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	f43f aef8 	beq.w	8006d18 <__ieee754_pow+0x770>
 8006f28:	e7e7      	b.n	8006efa <__ieee754_pow+0x952>
 8006f2a:	f04f 0a00 	mov.w	sl, #0
 8006f2e:	e71e      	b.n	8006d6e <__ieee754_pow+0x7c6>
 8006f30:	4621      	mov	r1, r4
 8006f32:	e7d4      	b.n	8006ede <__ieee754_pow+0x936>
 8006f34:	f04f 0b00 	mov.w	fp, #0
 8006f38:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006fb0 <__ieee754_pow+0xa08>
 8006f3c:	f7ff bb95 	b.w	800666a <__ieee754_pow+0xc2>
 8006f40:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006f44:	f7ff bb91 	b.w	800666a <__ieee754_pow+0xc2>
 8006f48:	4638      	mov	r0, r7
 8006f4a:	4641      	mov	r1, r8
 8006f4c:	f7ff bbc3 	b.w	80066d6 <__ieee754_pow+0x12e>
 8006f50:	9200      	str	r2, [sp, #0]
 8006f52:	f7ff bb9f 	b.w	8006694 <__ieee754_pow+0xec>
 8006f56:	bf00      	nop
 8006f58:	652b82fe 	.word	0x652b82fe
 8006f5c:	3c971547 	.word	0x3c971547
 8006f60:	00000000 	.word	0x00000000
 8006f64:	3fe62e43 	.word	0x3fe62e43
 8006f68:	fefa39ef 	.word	0xfefa39ef
 8006f6c:	3fe62e42 	.word	0x3fe62e42
 8006f70:	0ca86c39 	.word	0x0ca86c39
 8006f74:	be205c61 	.word	0xbe205c61
 8006f78:	72bea4d0 	.word	0x72bea4d0
 8006f7c:	3e663769 	.word	0x3e663769
 8006f80:	c5d26bf1 	.word	0xc5d26bf1
 8006f84:	3ebbbd41 	.word	0x3ebbbd41
 8006f88:	af25de2c 	.word	0xaf25de2c
 8006f8c:	3f11566a 	.word	0x3f11566a
 8006f90:	16bebd93 	.word	0x16bebd93
 8006f94:	3f66c16c 	.word	0x3f66c16c
 8006f98:	5555553e 	.word	0x5555553e
 8006f9c:	3fc55555 	.word	0x3fc55555
 8006fa0:	c2f8f359 	.word	0xc2f8f359
 8006fa4:	01a56e1f 	.word	0x01a56e1f
 8006fa8:	3fe00000 	.word	0x3fe00000
 8006fac:	000fffff 	.word	0x000fffff
 8006fb0:	3ff00000 	.word	0x3ff00000
 8006fb4:	4090cbff 	.word	0x4090cbff
 8006fb8:	3f6f3400 	.word	0x3f6f3400

08006fbc <__ieee754_sqrt>:
 8006fbc:	4b54      	ldr	r3, [pc, #336]	; (8007110 <__ieee754_sqrt+0x154>)
 8006fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc2:	438b      	bics	r3, r1
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	460d      	mov	r5, r1
 8006fc8:	460a      	mov	r2, r1
 8006fca:	460c      	mov	r4, r1
 8006fcc:	d10f      	bne.n	8006fee <__ieee754_sqrt+0x32>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	f7f9 fa79 	bl	80004c8 <__aeabi_dmul>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4630      	mov	r0, r6
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7f9 f8bd 	bl	800015c <__adddf3>
 8006fe2:	4606      	mov	r6, r0
 8006fe4:	460d      	mov	r5, r1
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	4629      	mov	r1, r5
 8006fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fee:	2900      	cmp	r1, #0
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	dc0e      	bgt.n	8007014 <__ieee754_sqrt+0x58>
 8006ff6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006ffa:	ea5c 0707 	orrs.w	r7, ip, r7
 8006ffe:	d0f2      	beq.n	8006fe6 <__ieee754_sqrt+0x2a>
 8007000:	b141      	cbz	r1, 8007014 <__ieee754_sqrt+0x58>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	f7f9 f8a7 	bl	8000158 <__aeabi_dsub>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	f7f9 fb85 	bl	800071c <__aeabi_ddiv>
 8007012:	e7e6      	b.n	8006fe2 <__ieee754_sqrt+0x26>
 8007014:	1512      	asrs	r2, r2, #20
 8007016:	d074      	beq.n	8007102 <__ieee754_sqrt+0x146>
 8007018:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800701c:	07d5      	lsls	r5, r2, #31
 800701e:	f04f 0500 	mov.w	r5, #0
 8007022:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007026:	bf48      	it	mi
 8007028:	0fd9      	lsrmi	r1, r3, #31
 800702a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800702e:	bf44      	itt	mi
 8007030:	005b      	lslmi	r3, r3, #1
 8007032:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8007036:	1051      	asrs	r1, r2, #1
 8007038:	0fda      	lsrs	r2, r3, #31
 800703a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800703e:	4628      	mov	r0, r5
 8007040:	2216      	movs	r2, #22
 8007042:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	1987      	adds	r7, r0, r6
 800704a:	42a7      	cmp	r7, r4
 800704c:	bfde      	ittt	le
 800704e:	19b8      	addle	r0, r7, r6
 8007050:	1be4      	suble	r4, r4, r7
 8007052:	19ad      	addle	r5, r5, r6
 8007054:	0fdf      	lsrs	r7, r3, #31
 8007056:	3a01      	subs	r2, #1
 8007058:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800705c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007060:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007064:	d1f0      	bne.n	8007048 <__ieee754_sqrt+0x8c>
 8007066:	f04f 0c20 	mov.w	ip, #32
 800706a:	4696      	mov	lr, r2
 800706c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007070:	4284      	cmp	r4, r0
 8007072:	eb06 070e 	add.w	r7, r6, lr
 8007076:	dc02      	bgt.n	800707e <__ieee754_sqrt+0xc2>
 8007078:	d112      	bne.n	80070a0 <__ieee754_sqrt+0xe4>
 800707a:	429f      	cmp	r7, r3
 800707c:	d810      	bhi.n	80070a0 <__ieee754_sqrt+0xe4>
 800707e:	2f00      	cmp	r7, #0
 8007080:	eb07 0e06 	add.w	lr, r7, r6
 8007084:	da42      	bge.n	800710c <__ieee754_sqrt+0x150>
 8007086:	f1be 0f00 	cmp.w	lr, #0
 800708a:	db3f      	blt.n	800710c <__ieee754_sqrt+0x150>
 800708c:	f100 0801 	add.w	r8, r0, #1
 8007090:	1a24      	subs	r4, r4, r0
 8007092:	4640      	mov	r0, r8
 8007094:	429f      	cmp	r7, r3
 8007096:	bf88      	it	hi
 8007098:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800709c:	1bdb      	subs	r3, r3, r7
 800709e:	4432      	add	r2, r6
 80070a0:	0064      	lsls	r4, r4, #1
 80070a2:	f1bc 0c01 	subs.w	ip, ip, #1
 80070a6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80070aa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80070ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070b2:	d1dd      	bne.n	8007070 <__ieee754_sqrt+0xb4>
 80070b4:	4323      	orrs	r3, r4
 80070b6:	d006      	beq.n	80070c6 <__ieee754_sqrt+0x10a>
 80070b8:	1c54      	adds	r4, r2, #1
 80070ba:	bf0b      	itete	eq
 80070bc:	4662      	moveq	r2, ip
 80070be:	3201      	addne	r2, #1
 80070c0:	3501      	addeq	r5, #1
 80070c2:	f022 0201 	bicne.w	r2, r2, #1
 80070c6:	106b      	asrs	r3, r5, #1
 80070c8:	0852      	lsrs	r2, r2, #1
 80070ca:	07e8      	lsls	r0, r5, #31
 80070cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80070d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80070d4:	bf48      	it	mi
 80070d6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80070da:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80070de:	4616      	mov	r6, r2
 80070e0:	e781      	b.n	8006fe6 <__ieee754_sqrt+0x2a>
 80070e2:	0adc      	lsrs	r4, r3, #11
 80070e4:	3915      	subs	r1, #21
 80070e6:	055b      	lsls	r3, r3, #21
 80070e8:	2c00      	cmp	r4, #0
 80070ea:	d0fa      	beq.n	80070e2 <__ieee754_sqrt+0x126>
 80070ec:	02e6      	lsls	r6, r4, #11
 80070ee:	d50a      	bpl.n	8007106 <__ieee754_sqrt+0x14a>
 80070f0:	f1c2 0020 	rsb	r0, r2, #32
 80070f4:	fa23 f000 	lsr.w	r0, r3, r0
 80070f8:	1e55      	subs	r5, r2, #1
 80070fa:	4093      	lsls	r3, r2
 80070fc:	4304      	orrs	r4, r0
 80070fe:	1b4a      	subs	r2, r1, r5
 8007100:	e78a      	b.n	8007018 <__ieee754_sqrt+0x5c>
 8007102:	4611      	mov	r1, r2
 8007104:	e7f0      	b.n	80070e8 <__ieee754_sqrt+0x12c>
 8007106:	0064      	lsls	r4, r4, #1
 8007108:	3201      	adds	r2, #1
 800710a:	e7ef      	b.n	80070ec <__ieee754_sqrt+0x130>
 800710c:	4680      	mov	r8, r0
 800710e:	e7bf      	b.n	8007090 <__ieee754_sqrt+0xd4>
 8007110:	7ff00000 	.word	0x7ff00000

08007114 <fabs>:
 8007114:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007118:	4619      	mov	r1, r3
 800711a:	4770      	bx	lr

0800711c <finite>:
 800711c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007120:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8007124:	0fc0      	lsrs	r0, r0, #31
 8007126:	4770      	bx	lr

08007128 <matherr>:
 8007128:	2000      	movs	r0, #0
 800712a:	4770      	bx	lr

0800712c <nan>:
 800712c:	2000      	movs	r0, #0
 800712e:	4901      	ldr	r1, [pc, #4]	; (8007134 <nan+0x8>)
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	7ff80000 	.word	0x7ff80000

08007138 <rint>:
 8007138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800713a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800713e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8007142:	f1bc 0f13 	cmp.w	ip, #19
 8007146:	4604      	mov	r4, r0
 8007148:	460d      	mov	r5, r1
 800714a:	460b      	mov	r3, r1
 800714c:	4606      	mov	r6, r0
 800714e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8007152:	dc5a      	bgt.n	800720a <rint+0xd2>
 8007154:	f1bc 0f00 	cmp.w	ip, #0
 8007158:	da2b      	bge.n	80071b2 <rint+0x7a>
 800715a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800715e:	4302      	orrs	r2, r0
 8007160:	d023      	beq.n	80071aa <rint+0x72>
 8007162:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007166:	4302      	orrs	r2, r0
 8007168:	4256      	negs	r6, r2
 800716a:	4316      	orrs	r6, r2
 800716c:	0c4b      	lsrs	r3, r1, #17
 800716e:	0b36      	lsrs	r6, r6, #12
 8007170:	4934      	ldr	r1, [pc, #208]	; (8007244 <rint+0x10c>)
 8007172:	045b      	lsls	r3, r3, #17
 8007174:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8007178:	ea46 0503 	orr.w	r5, r6, r3
 800717c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8007180:	4602      	mov	r2, r0
 8007182:	462b      	mov	r3, r5
 8007184:	e9d1 4500 	ldrd	r4, r5, [r1]
 8007188:	4620      	mov	r0, r4
 800718a:	4629      	mov	r1, r5
 800718c:	f7f8 ffe6 	bl	800015c <__adddf3>
 8007190:	e9cd 0100 	strd	r0, r1, [sp]
 8007194:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007198:	462b      	mov	r3, r5
 800719a:	4622      	mov	r2, r4
 800719c:	f7f8 ffdc 	bl	8000158 <__aeabi_dsub>
 80071a0:	4604      	mov	r4, r0
 80071a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071a6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80071aa:	4620      	mov	r0, r4
 80071ac:	4629      	mov	r1, r5
 80071ae:	b003      	add	sp, #12
 80071b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b2:	4a25      	ldr	r2, [pc, #148]	; (8007248 <rint+0x110>)
 80071b4:	fa42 f20c 	asr.w	r2, r2, ip
 80071b8:	4011      	ands	r1, r2
 80071ba:	4301      	orrs	r1, r0
 80071bc:	d0f5      	beq.n	80071aa <rint+0x72>
 80071be:	0852      	lsrs	r2, r2, #1
 80071c0:	ea05 0102 	and.w	r1, r5, r2
 80071c4:	ea50 0601 	orrs.w	r6, r0, r1
 80071c8:	d00c      	beq.n	80071e4 <rint+0xac>
 80071ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80071ce:	f1bc 0f13 	cmp.w	ip, #19
 80071d2:	bf0c      	ite	eq
 80071d4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 80071d8:	2600      	movne	r6, #0
 80071da:	ea25 0202 	bic.w	r2, r5, r2
 80071de:	fa43 f30c 	asr.w	r3, r3, ip
 80071e2:	4313      	orrs	r3, r2
 80071e4:	4917      	ldr	r1, [pc, #92]	; (8007244 <rint+0x10c>)
 80071e6:	4632      	mov	r2, r6
 80071e8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 80071ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071f0:	4620      	mov	r0, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7f8 ffb2 	bl	800015c <__adddf3>
 80071f8:	e9cd 0100 	strd	r0, r1, [sp]
 80071fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007200:	4622      	mov	r2, r4
 8007202:	462b      	mov	r3, r5
 8007204:	f7f8 ffa8 	bl	8000158 <__aeabi_dsub>
 8007208:	e008      	b.n	800721c <rint+0xe4>
 800720a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800720e:	dd08      	ble.n	8007222 <rint+0xea>
 8007210:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8007214:	d1c9      	bne.n	80071aa <rint+0x72>
 8007216:	4602      	mov	r2, r0
 8007218:	f7f8 ffa0 	bl	800015c <__adddf3>
 800721c:	4604      	mov	r4, r0
 800721e:	460d      	mov	r5, r1
 8007220:	e7c3      	b.n	80071aa <rint+0x72>
 8007222:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8007226:	f04f 32ff 	mov.w	r2, #4294967295
 800722a:	40ca      	lsrs	r2, r1
 800722c:	4210      	tst	r0, r2
 800722e:	d0bc      	beq.n	80071aa <rint+0x72>
 8007230:	0852      	lsrs	r2, r2, #1
 8007232:	4210      	tst	r0, r2
 8007234:	bf1f      	itttt	ne
 8007236:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800723a:	ea20 0202 	bicne.w	r2, r0, r2
 800723e:	410e      	asrne	r6, r1
 8007240:	4316      	orrne	r6, r2
 8007242:	e7cf      	b.n	80071e4 <rint+0xac>
 8007244:	080073b8 	.word	0x080073b8
 8007248:	000fffff 	.word	0x000fffff
 800724c:	00000000 	.word	0x00000000

08007250 <scalbn>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	4616      	mov	r6, r2
 8007254:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007258:	4604      	mov	r4, r0
 800725a:	460d      	mov	r5, r1
 800725c:	460b      	mov	r3, r1
 800725e:	b982      	cbnz	r2, 8007282 <scalbn+0x32>
 8007260:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007264:	4303      	orrs	r3, r0
 8007266:	d034      	beq.n	80072d2 <scalbn+0x82>
 8007268:	4b2d      	ldr	r3, [pc, #180]	; (8007320 <scalbn+0xd0>)
 800726a:	2200      	movs	r2, #0
 800726c:	f7f9 f92c 	bl	80004c8 <__aeabi_dmul>
 8007270:	4b2c      	ldr	r3, [pc, #176]	; (8007324 <scalbn+0xd4>)
 8007272:	4604      	mov	r4, r0
 8007274:	429e      	cmp	r6, r3
 8007276:	460d      	mov	r5, r1
 8007278:	da0d      	bge.n	8007296 <scalbn+0x46>
 800727a:	a325      	add	r3, pc, #148	; (adr r3, 8007310 <scalbn+0xc0>)
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	e01c      	b.n	80072bc <scalbn+0x6c>
 8007282:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007286:	42ba      	cmp	r2, r7
 8007288:	d109      	bne.n	800729e <scalbn+0x4e>
 800728a:	4602      	mov	r2, r0
 800728c:	f7f8 ff66 	bl	800015c <__adddf3>
 8007290:	4604      	mov	r4, r0
 8007292:	460d      	mov	r5, r1
 8007294:	e01d      	b.n	80072d2 <scalbn+0x82>
 8007296:	460b      	mov	r3, r1
 8007298:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800729c:	3a36      	subs	r2, #54	; 0x36
 800729e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80072a2:	4432      	add	r2, r6
 80072a4:	428a      	cmp	r2, r1
 80072a6:	dd0c      	ble.n	80072c2 <scalbn+0x72>
 80072a8:	4622      	mov	r2, r4
 80072aa:	462b      	mov	r3, r5
 80072ac:	a11a      	add	r1, pc, #104	; (adr r1, 8007318 <scalbn+0xc8>)
 80072ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072b2:	f000 f83b 	bl	800732c <copysign>
 80072b6:	a318      	add	r3, pc, #96	; (adr r3, 8007318 <scalbn+0xc8>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	f7f9 f904 	bl	80004c8 <__aeabi_dmul>
 80072c0:	e7e6      	b.n	8007290 <scalbn+0x40>
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	dd08      	ble.n	80072d8 <scalbn+0x88>
 80072c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80072ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072ce:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80072d2:	4620      	mov	r0, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80072dc:	da0b      	bge.n	80072f6 <scalbn+0xa6>
 80072de:	f24c 3350 	movw	r3, #50000	; 0xc350
 80072e2:	429e      	cmp	r6, r3
 80072e4:	4622      	mov	r2, r4
 80072e6:	462b      	mov	r3, r5
 80072e8:	dce0      	bgt.n	80072ac <scalbn+0x5c>
 80072ea:	a109      	add	r1, pc, #36	; (adr r1, 8007310 <scalbn+0xc0>)
 80072ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072f0:	f000 f81c 	bl	800732c <copysign>
 80072f4:	e7c1      	b.n	800727a <scalbn+0x2a>
 80072f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80072fa:	3236      	adds	r2, #54	; 0x36
 80072fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007300:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	2200      	movs	r2, #0
 800730a:	4b07      	ldr	r3, [pc, #28]	; (8007328 <scalbn+0xd8>)
 800730c:	e7d6      	b.n	80072bc <scalbn+0x6c>
 800730e:	bf00      	nop
 8007310:	c2f8f359 	.word	0xc2f8f359
 8007314:	01a56e1f 	.word	0x01a56e1f
 8007318:	8800759c 	.word	0x8800759c
 800731c:	7e37e43c 	.word	0x7e37e43c
 8007320:	43500000 	.word	0x43500000
 8007324:	ffff3cb0 	.word	0xffff3cb0
 8007328:	3c900000 	.word	0x3c900000

0800732c <copysign>:
 800732c:	b530      	push	{r4, r5, lr}
 800732e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007336:	ea42 0503 	orr.w	r5, r2, r3
 800733a:	4629      	mov	r1, r5
 800733c:	bd30      	pop	{r4, r5, pc}
	...

08007340 <_init>:
 8007340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007342:	bf00      	nop
 8007344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007346:	bc08      	pop	{r3}
 8007348:	469e      	mov	lr, r3
 800734a:	4770      	bx	lr

0800734c <_fini>:
 800734c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734e:	bf00      	nop
 8007350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007352:	bc08      	pop	{r3}
 8007354:	469e      	mov	lr, r3
 8007356:	4770      	bx	lr
